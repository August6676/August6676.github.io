<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>September个人随想</title>
    <link href="/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<p>Hey! 转眼间九月已经过去了将近一半，这么多天一直没怎么更新我的 Blog，实在是忙晕啦 😫😫！</p><div style="background: linear-gradient(to right, #e0f7fa, #b2ebf2); border-left: 5px solid #0288d1; padding: 20px; margin: 20px 0; border-radius: 10px; box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.1);">  <strong style="font-size: 1.2em; color: #01579b;">2024年9月11日</strong><br><br>  <p style="line-height: 1.6; font-size: 1.05em; color: #424242;">    从9月8日晚交完数模以后，就一直不在学习状态 🥺<br>    先是自己统计综测，然后在综测的时候得知自己大二学年算上军训和思想政治理论实践课的学分均绩不是第一了 🤦🏻‍♀️，    算是惜败、、、但是自己就算不加上这两科也不一定能险胜，然后小小 emo 了一个晚上 🥹<br><br>    综测统计结束之后，在和妈妈打视频的时候得知，家里人都会无条件支持我一直读书，    本科硕士博士...无论我是要保研或者是出国，都无条件尊重我的选择，哪怕学费高昂众筹也要继续读书，很是感动 😭😭！<br><br>    奈何自己一点都不善于表达自己的情感，一句“谢谢”说出来都会感觉尴尬，希望我的所作所为不会让一家人的心意白费！<br><br>  </p>  <p style="font-weight: bold; font-size: 1.1em; color: #00796b;">    也希望我的未来，能够越走越宽，是我去选择怎样生活，而不是被生活所限制！🐱🐼  </p></div><div style="background: linear-gradient(to right, #fce4ec, #f8bbd0); border-left: 5px solid #d81b60; padding: 20px; margin: 20px 0; border-radius: 10px; box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.1);">  <strong style="font-size: 1.2em; color: #c2185b;">2024年9月12日</strong><br><br>  <p style="line-height: 1.6; font-size: 1.05em; color: #424242;">    刚刚上完课，感慨一下，苯人无论上什么课，无论这个老师讲的课好或者是不好，无论上课是在看电脑看pad还是在记笔记，其实都是在走神...😳😳<br>    发现自己上了大学以后，好像是真的真的不会听课了...什么课最后都是自己课下看，一上课脑子就是宕机状态😓😓  </p></div><div style="background: linear-gradient(to right, #fff8e1, #ffe082); border-left: 5px solid #ffb300; padding: 20px; margin: 20px 0; border-radius: 10px; box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.1);">  <strong style="font-size: 1.2em; color: #f57f17;">2024年9月17日</strong><br><br>  <p style="line-height: 1.6; font-size: 1.05em; color: #424242;">    今天是中秋节！🌕🎑 但是今天却是假期的最后一天，从秦皇岛和小胖分离，回沈阳，眼泪还是簌簌地掉下来🥹<br><br>    在秦皇岛短暂的旅行，充斥着学院综测的ddl和小组作业的ddl，也没有到处转转☹️☹️🌸<br><br>    希望能借着中秋的圆月，把思念送到远方，愿家人都平安健康！🌕🍂<br><br>  </p>  <p style="font-weight: bold; font-size: 1.1em; color: #bf360c;">    Hopelly in the future，我能够自己支配自己的时间，不是被外在的命令所左右，起码在假期、非工作时间，是自由、愉快、轻松的！🙈🙉🙊  </p></div>]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic Knowledge for Domain Generalization</title>
    <link href="/2024/09/04/Generalization/"/>
    <url>/2024/09/04/Generalization/</url>
    
    <content type="html"><![CDATA[<p>🌞🌞有幸接触到一个做域泛化的项目组，在准备期间看论文发现自己机器学习、深度学习的基础其实一点都不扎实🥹🥹，在这里记录一下跟进项目需要用到的知识点！</p><h3 id="域自适应-Domain-Adaptation-VS-域泛化-Domain-Generalization"><a href="#域自适应-Domain-Adaptation-VS-域泛化-Domain-Generalization" class="headerlink" title="域自适应[Domain Adaptation] VS 域泛化[Domain Generalization]"></a><strong>域自适应[Domain Adaptation]</strong> VS <strong>域泛化[Domain Generalization]</strong></h3><p>以一个具体的场景为例： 假设我在开发一个自动驾驶系统，它需要识别街道上的行人。我在A城市收集了大量的行人图像（源领域），我的目标是把这个系统应用到B城市，但是B城市的街道布局、行人穿着、天气条件等可能与A有所不同，这就是所谓的“领域偏移”（domain shift）。</p><ul><li><strong>Domain Adaptation:</strong> 在训练的过程中，就给模型提供B城市的图像，虽然这些图像可能没有标注过，但是我的目标是让模型利用这些未标注的目标领域数据，调整自己对新环境的适应性。</li><li><strong>Domain Generalization:</strong> 在训练过程中，我并不提供B城市的图像，而模型在使用的过程中，也可以识别出B城市的行人。</li></ul><p>总结来说：<strong>域自适应</strong>是通过使用一些目标领域的数据来帮助模型适应新环境，而<strong>域泛化</strong>则要求模型在没有看到目标领域数据的情况下，依然能够应对新的环境。</p><h3 id="元学习-Meta-Learning"><a href="#元学习-Meta-Learning" class="headerlink" title="元学习[Meta Learning]"></a>元学习[Meta Learning]</h3><p>Meta-learning，也称为“学习如何学习”，是一种机器学习方法，旨在通过学习元知识（即关于学习过程本身的知识）来提高模型在新任务上的表现。Meta-learning的目标是使模型能够快速适应新任务，即使在只有少量训练数据的情况下，也能取得良好的效果。元学习的核心想法是学习一个先验知识 (prior)。</p><blockquote><p>(夹带点私货，下面这个elegant的图，是用mermaid绘制出来的，useful!🤩🤩欸，但是大小不好调整，而且多次尝试都失败了，😢sad)</p></blockquote><p><strong>元学习的内容细分</strong></p><pre><code class=" mermaid">%%&#123; init: &#123; &quot;theme&quot;: &quot;base&quot;, &quot;themeVariables&quot;: &#123; &quot;width&quot;: &quot;300px&quot;, &quot;height&quot;: &quot;300px&quot; &#125;&#125;&#125;%%graph LR    A[Meta-Learning] --&gt; B[Meta-Training Phase]    A --&gt; C[Meta-Testing Phase]    B --&gt; D[Meta-Training Data]    B --&gt; E[Meta-Validation Data]    D --&gt; F[Meta-Train Task 1]    D --&gt; G[Meta-Train Task 2]    D --&gt; H[Meta-Train Task N]    E --&gt; I[Meta-Validation Task 1]    E --&gt; J[Meta-Validation Task 2]    E --&gt; K[Meta-Validation Task N]    C --&gt; L[Meta-Testing Data]    L --&gt; M[Meta-Test Task]subgraph Task_StructureF --&gt; N[Support Set N-way K-shot]F --&gt; O[Query Set]G --&gt; NG --&gt; OH --&gt; NH --&gt; OM --&gt; NM --&gt; Oend</code></pre><h3 id="PACS-数据集"><a href="#PACS-数据集" class="headerlink" title="PACS 数据集"></a>PACS 数据集</h3><p><strong>PACS</strong> 是一个常用于域自适应和域泛化任务的数据集。它特别适用于评估模型在不同视觉风格下的泛化能力。PACS 的全称来自它所包含的四个不同的视觉风格类别：</p><ul><li>P: Photo（真实照片）</li><li>A: Art painting（艺术画）</li><li>C: Cartoon（卡通图像）</li><li>S: Sketch（素描）</li></ul><p>每种风格都包含相同的7个类别的物体：狗、象、长颈鹿、吉他、马、房子、人物。</p><p>PACS 的数据来自四种视觉风格，旨在研究模型如何在不同的视觉领域间进行泛化。例如，模型可能在“Photo”风格上进行训练，但要在“Art painting”或“Cartoon”风格上进行测试。</p><h3 id="图像的通道"><a href="#图像的通道" class="headerlink" title="图像的通道"></a>图像的通道</h3><p>图像的通道是指图像中每个像素点所包含的颜色或信息维度。不同类型的图像根据所使用的颜色模式可能有不同数量的通道。<br>RGB图像是最常见的彩色图像格式，有<strong>三个</strong>通道：红色 (Red)、绿色 (Green)、蓝色 (Blue)。<br>每个像素点通过三个通道的组合来表示颜色。每个通道的值通常范围在 0 到 255 之间，不同通道的组合可以生成不同的颜色。</p><p>在深度学习中，特别是计算机视觉任务中，通道数是图像张量结构的一部分。例如，对于一个 RGB 图像，张量通常表示为 (C, H, W)，其中：</p><ul><li>C 代表通道数（对于 RGB 图像为 3）；</li><li>H 代表图像的高度；</li><li>W 代表图像的宽度。</li></ul><p>神经网络会分别处理每个通道的数据，并通过卷积、池化等操作来提取和处理图像的特征。</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useful code</title>
    <link href="/2024/08/22/code/"/>
    <url>/2024/08/22/code/</url>
    
    <content type="html"><![CDATA[<p>在这里记录下有用的代码，也是提醒自己在跑实验的时候不要只关注于代码正确了，实验跑通了，深入理解代码细节！持续更新中📚…</p><h3 id="设置可见GPU"><a href="#设置可见GPU" class="headerlink" title="设置可见GPU"></a>设置可见GPU</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = gpu_ids<br>gpu_ids = <span class="hljs-string">&#x27;0&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><strong>指定GPU</strong>：通过设置 <code>CUDA_VISIBLE_DEVICES</code> 环境变量，可以指定哪些GPU可供程序使用。例如，如果有4个GPU（编号为 0, 1, 2, 3），但只希望程序使用GPU 2和GPU 3，你可以设置<code>gpu_ids = &quot;2,3&quot;</code>，这样程序运行时只会看到这两个GPU。</li><li><strong>屏蔽GPU</strong>：如果不希望程序使用任何GPU，可以将<code>gpu_ids</code>设置为空字符串，即<code>gpu_ids = &quot;&quot;</code>。这会使得程序无法看到任何GPU，从而只使用CPU。</li></ul><p><strong>attention:</strong> 这行代码实际上只是告诉程序哪些GPU是可见的或可用的，但它并不保证程序一定会使用这些GPU中的所有GPU。</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地主机连接远程服务器的几种方式</title>
    <link href="/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>从大二开始，我接触到远程服务器，在这里总结一下本地主机连接远程服务器的几种方式😎</p><ol><li><strong>使用密码和VPN（可选）连接</strong>：这是我接触最多的连接方式，但是这样连接有缺点：安全性差。<br> 这种方式有时需要使用VPN才能连接，因为VPN可以屏蔽一些网络设备，比如防火墙，所以可以避免一些安全风险。<br> 首先通过VPN连接到远程服务器所在的网络。VPN（虚拟专用网络）将本地网络流量加密，并通过远程服务器所在的网络进行路由，使我们能够像在同一局域网内一样访问服务器。</li><li><strong>使用公钥和私钥连接</strong>：有过一次使用公私钥连接的经历。这种方式可以避免密码的传输，安全性更高。连接流程如下：<ol><li>生成密钥对: 使用SSH工具（如ssh-keygen）在本地生成一对公钥和私钥。</li><li>配置公钥: 将生成的公钥 (~&#x2F;.ssh&#x2F;id_rsa.pub) 添加到远程服务器上的 ~&#x2F;.ssh&#x2F;authorized_keys 文件中。</li><li>SSH连接: 使用SSH客户端，通过私钥文件（~&#x2F;.ssh&#x2F;id_rsa）连接到远程服务器。SSH会自动使用私钥进行身份验证。<br>这样连接以后，无需输入密码即可快速登录服务器，提升了工作效率，而且具有较高的安全性。🙆🏻如下图所示，是使用MobaXterm进行连接的界面：<br><img src="/../img/Moba_ssh.png" alt="使用MobaXterm进行公私钥的SSH连接"></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>August💘个人随想</title>
    <link href="/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>2024年8月9日，本来想要感慨一下和父母教育理念的差异，但是突然实验室有活了，然后忙完一小会感觉不想记录了，那就在这里感慨一下：I am a bit lazy!🥹</p>          </div><div class="note note-success">            <p>2024年8月14日凌晨，我突然感觉到自己跑的图像编辑的结果可能会有问题，如果真有问题那么一晚上的努力都白费了，就是一直有种不祥的预感😨😨<br>和小胖争论，但是那股倔强劲又上来了，自己没什么经验又不服输，但是最后还是被小胖说服了，哎哎哎😢<br>在复现别人的工作的时候，可以首先验证论文中已经给出的例子，通过这种方式能够先检查出代码的正确性，之后再大规模跑数据，要不然白白浪费资源呀！🥲<br>和小胖沟通的过程，发现自己有点冒进了，只想赶紧完成任务，但没有认真读过别人的代码，对于很多指令只是会用但是细节还不太懂，非常囫囵吞枣，需改正！🤨<br>通话的48分04秒确实让我发现很多不足，不要好高骛远吗，不要盲目求快，现在还是要脚踏实地学一学！😮‍💨<br>and 又发现自己机器学习、深度学习的基础知识忘得差不多了，以前没认真看，现在很多基本的函数如Dataset类什么的都觉得很陌生···<br>前路漫漫，要学的东西还是很多，这一学期继续加油！<br>然后，咳咳，感谢小胖，不仅是我的💕💕，更亦师亦友~</p>          </div><div class="note note-secondary">            <p>2024年8月15日，我发现我曾经负责的一个项目，前端一直说让我开放API，但是我一直没有理解，然后这个问题一直拖到现在，还有3天就要交付了。<br>哎，悬着的心终于死了，一个东西太久不做就会不想上手，但是又遇到ddl，只能给自己说加油了😟</p>          </div><div class="note note-warning">            <p>2024年8月16日，我在处理POPE数据集的时候，突然发现：咦，我从github上下载的数据集怎么现在和github上的不一样了？？？<br>仔细思考后发现，我之前运行过一次代码，把随机sample的数据集破坏了哈哈😅，现在和官网上不一样，又要重新处理喽！<br>又给实验室浪费了200块钱😓🙂！</p>          </div><div class="note note-info">            <p>2024年8月18日，看到了我特别喜爱的花滑名将特鲁索娃结婚的消息，哇哦，感慨一下，同是00后，有人已经事业有成步入婚姻的殿堂，有人还在被窝里和10后的妹妹打架🙇🏻···</p>          </div><div class="note note-light">            <p>今天是2024年8月21日，<strong>农历7月18</strong>，昨天小胖告诉我说是他的生日，结果我这两天一直忙着跑数据，给忘了！😫😫<br>今天小胖提醒我，我才发现这回事，不过小胖没有生气，我给他买了一个小小的果切赔罪，嘻嘻嘻，等他阳历生日再好好过呀😬😬<br>这下可算理解了小胖大三大四的时候总是忘记我的事情，呜呜，原来是忙昏头了😵‍💫😵‍💫···<br>前天改好的多卡加载模型的代码到现在都没来得及看，感觉自己一直忙但是没有得到提升，在这里提醒自己抽出时间去看看代码的逻辑！</p>          </div><div class="note note-danger">            <p>2024年8月22日，中午吃完饭我想玩一下画画，这可是午休时间啊，我计划等我买的桃胶牛奶到了就开始工作。<br>然后我的监工突然水灵灵的站在我后面了，我的桌子上都是画笔和颜料，我滴亲妈，给我吓一激灵😫😫<br>然后还被他发现了一个打分的错误，然后他站在我后面看我解释什么的，我浑身冷汗直流，嗷嗷嗷嗷😣😣<br>球球了，下次再来告诉我声吧，跟班主任似的让孩子怎么过啊😨😨</p>          </div><div class="note note-primary">            <p>2024年8月23日我打了一天的喷嚏🤧🤧并且伴随着一低头就头疼的症状，晚上回到寝室，好家伙，室友给我测体温38.7···<br>深夜11点10分紧急买药吃药，晚上迷迷糊糊的睡得也不好，第二天总是出汗。<br>又要到周末组会了，但是上周交付的后端接口，前端负责人一直没有给我回应，哎···和另外一个项目的人聊了一下原来是去搞另外一个项目了，但是感觉不回我消息是不是不太礼貌😟😟<br>突然意识到自己大三也不轻松了，好忙好忙，课里课外，有点焦虑😔，有点伤感···</p>          </div><div class="note note-info">            <p>2024年8月25日，发现我这周压力爆棚了，明明是开学前的一星期，但是这周</p><ol><li>周二之前要看懂两篇论文然后开会，都是我不熟悉的领域</li><li>周日之前要完成一个项目的前后端联调的工作，然后周日晚上给老师汇报</li><li>这周本身就有的实验室的工作</li><li>学院的综测统计工作，我甚至目前压缩包都没下载···<br>这些事情里面，有一项是因为自己以前懈怠，剩下的都是日常或者是突如其来的事情，oh my brain boom boom!!!💥🤯<br>现在感觉呢，也没有那么那么难，但是，，， I’m so tired🥱🥱</li></ol>          </div><div class="note note-success">            <p>转眼间···时间来到了8月31日，本来想感慨一下暑假要结束了什么的，但是刚刚学长下来找我，我的工作量突然+++++，待跑n个脚本处理nnnn条数据，毁灭吧世界！</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm如何连接远程服务器</title>
    <link href="/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在实习，旁边的小伙伴全都劝我用vscode，说连接简单不费力，我这样一个忠诚的pycharm用户，JetBrains全家桶爱好者，怎么能受得了这样的虎狼之词！😡😡<br>于是，写下一篇博文，记录一下如何使用pycharm连接远程服务器。</p><div class="note note-warning">            <p>该远程连接步骤没有参考任何网上教程；pycharm版本：PyCharm 2023.2.2<br>pycharm连接远程服务器有很多种方法，或者某一步骤错误了其实有很多补救措施，可以自行探索！☺️</p>          </div><h3 id="Step1：新建一个项目"><a href="#Step1：新建一个项目" class="headerlink" title="Step1：新建一个项目"></a>Step1：新建一个项目</h3><p>新建一个项目，选择Python解释器，选择<code>Previously configured interpreter</code>，然后点击<code>Add Interpreter</code>，选择<code>On SSh</code>，如下图所示：<br><img src="/../img/img_img1.png" alt="img.png"><br>在这儿，填写服务器的ip地址（Host），端口号（往往默认），用户名，如下图所示：<br><img src="/../img/img_1.png" alt="img_1.png"><br>之后能点击next的，一路点击next，直到下图，输入密码（这里我使用的是密码连接），之后还是点击next，如下图：<br><img src="/../img/img_2.png" alt="img_2.png"><br>还是next：<br><img src="/../img/img_3.png" alt="img_3.png"><br>ok，现在来到第四步：<br><img src="/../img/img_4.png" alt="img_4.png"><br>在这里，我想要使用服务器中已经存在的环境，于是我选择<code>existing</code>,选择虚拟环境中对应的<code>python.exe</code>,往往在<code>Anaconda3</code>中的<code>envs</code>的虚拟环境名字下的<code>bin</code>中，选好了点击ok，然后点击create，如下图：<br><img src="/../img/img_5.png" alt="img_5.png"><br>之后注意选一下相匹配的文件夹，也就是你的这个项目中的文件，应该上传到服务器中的文件夹中的什么位置：<br><img src="/../img/img_10.png" alt="img_10.png"><br>这样就创建项目成功啦！</p><h3 id="Step2：浏览服务器上的文件夹"><a href="#Step2：浏览服务器上的文件夹" class="headerlink" title="Step2：浏览服务器上的文件夹"></a>Step2：浏览服务器上的文件夹</h3><p>在项目创建成功后，点击<code>Main Menu</code>（就是左上角三条线的图标），之后点击同行的<code>tools</code>-&gt;<code>deployment</code>-&gt;<code>Browse Remote Host</code>，如下图：<br><img src="/../img/img_6.png" alt="img_6.png"><br>之后在pycharm最左侧就会出代表现服务器上的文件夹的标志，选择对应的远程主机，就可以看到展开的文件夹啦：<br><img src="/../img/img_8.png" alt="img_8.png"></p><h3 id="Step3：终端修改"><a href="#Step3：终端修改" class="headerlink" title="Step3：终端修改"></a>Step3：终端修改</h3><p>注意在使用远程服务器的时候，我们往往是在终端操作，点击终端，注意<code>+</code>号旁边的小箭头，点击这个小箭头，选择对应的虚拟环境即可，如下图：<br><img src="/../img/img_9.png" alt="img_9.png"><br>这样，终端也切换到远程服务器的虚拟环境啦！It’s done!</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Useful instructions in Linux</title>
    <link href="/2024/08/01/Useful-instructions-in-Linux/"/>
    <url>/2024/08/01/Useful-instructions-in-Linux/</url>
    
    <content type="html"><![CDATA[<p>这是第一次正经使用远程服务器跑数据，遂记录一下常用的命令，希望以后会越来越熟练！🤗</p><ul><li><p>查看显卡情况</p><ul><li>1️⃣ 简易版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nvidia-smi<br></code></pre></td></tr></table></figure></li><li>2️⃣ 更详细更美观🤩  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install nvitop<br>nvitop<br></code></pre></td></tr></table></figure>  nvitop的效果确实更美观，包括进程也展示的更加清楚：<br><img src="/../img/nvitop.jpg" alt="nvitop效果图"></li></ul></li><li><p>查看虚拟环境列表</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env list<br></code></pre></td></tr></table></figure></li><li><p>多人共享一个服务器，GPU资源稀缺的时候，需要进行<strong>占卡</strong>操作，确保一个人在使用 GPU 时，其他人不会干扰或抢占该资源<br>  如何实现占卡？编写一个脚本，在脚本中执行一个死循环，这样就可以占用 GPU 资源了。例如：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvidia-smi<br><span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0  <span class="hljs-comment"># 选择 GPU 0</span><br>python your_script.py<br></code></pre></td></tr></table></figure></li><li><p>脱离自己的终端，继续运行脚本，我常常使用的指令是<code>nohup</code>，例如：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> python your_script.py &gt; stdout.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p>这个指令用于在后台运行一个Python脚本，同时将输出重定向到日志文件中。具体来说：</p><ul><li><code>nohup</code>：表示“no hang up”，用于在你关闭终端后继续运行该命令。通常，如果没有使用<code>nohup</code>，关闭终端后，正在运行的进程也会被终止。使用nohup可以确保即使关闭了终端，脚本仍然会继续运行。</li><li><code>python your_script.py</code>：这是你要运行的Python脚本的命令。</li><li><code>&gt;</code>：重定向符号，表示将输出重定向到指定的文件。 </li><li><code>stdout.log</code>：用于存储脚本的标准输出（即通常在终端显示的输出信息）。所有标准输出会被写入这个文件中。</li><li><code>2&gt;&amp;1</code>：这是将标准错误输出（即错误信息）重定向到标准输出中，因此所有的错误信息也会被写入stdout.log中。这其中，2表示标准错误，1表示标准输出，&amp;表示引用相同的文件描述符。</li><li><code>&amp;</code>：将该命令放到后台运行，即使你关闭当前的终端会话，脚本仍然会继续运行。</li></ul></li><li><p>赋予自己的脚本权限，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x your_script.py<br></code></pre></td></tr></table></figure><p>使用<code>chmod</code>命令，你可以给文件赋予权限。<code>+x</code>表示增加执行权限，这样你就可以运行这个脚本了。同理，<code>-x</code>表示移除执行权限，移除之后，你无法运行这个脚本。</p></li><li><p>杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 pid # pid是进程的ID, kill -9 强制终止进程<br>kill pid<br></code></pre></td></tr></table></figure></li><li><p>退出状态码</p><ul><li><strong>Exit 1</strong> 通常是脚本内的问题，需要检查日志。<br>本小菜在分批次使用nohup执行脚本时，发现脚本总是自动退出，退出状态码为1。后来寻找发现是自己的bash文件多了一行空行，实际上是多了换行符，导致脚本无法执行🥲🥲。</li><li><strong>Exit 126</strong> 通常是权限或路径问题，需要检查脚本路径和权限。</li></ul></li><li><p>查看文件夹下有多少文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -1 /path/to/directory | wc -l<br></code></pre></td></tr></table></figure><ul><li><code>ls -1</code> 列出目录中的每个文件和文件夹，每行显示一个名称。</li><li><code>wc -l</code> 统计行数，即文件和文件夹的数量。</li></ul></li><li><p>从huggingface的镜像上下载文件到服务器，步骤如下图所示：<br><img src="https://krseoul.imgtbl.com/i/2024/08/22/66c6b5110cb2b.png" alt="huggingface-cli.png"></p><div class="note note-warning">            <p>注意，在每次执行下载命令的时候都要<code>export HF ENDPOINT=https://hf-mirror.com</code>，要不然下载速度会巨慢无比😑</p>          </div></li><li><p>查看当前的python进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep python <br>ps -aux | grep python<br></code></pre></td></tr></table></figure><ul><li><p><code>ps -ef</code> 显示的是更传统的 Unix 风格的输出，注重进程间的关系（如父子进程关系）以及命令的详细信息。例子如下所示：<br><img src="/../img/ef.png" alt="ef.png"></p></li><li><p><code>ps -aux</code> 提供了关于资源使用情况的更多信息，如 CPU 和内存占用率，且格式与 <code>ps -ef</code> 不同。 例子如下所示：<br><img src="/../img/aux_1.png" alt="aux.png"><br>其中，<code>STAT</code> 列显示了每个进程的状态，其中字母组合（如 Ssl、Sl、Rl 等）表示进程的状态和属性。以下是这些标记的含义：</p><ol><li>S: Interruptible Sleep (可中断的睡眠状态)</li><li>R: Running (运行中)</li><li>l: Multi-threaded (多线程)</li><li>s: Session Leader (会话领导)</li><li>S: Low-priority (低优先级)</li></ol><p>这些字母组合起来，就表示了进程的状态和属性。例如，<code>Ssl</code> 表示进程正在睡眠中，并且是低优先级的···</p></li></ul></li><li><p>查看当前机器的内存空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">free -h<br></code></pre></td></tr></table></figure><p>效果如下图所示：<br><a href="https://img.picui.cn/free/2024/08/20/66c437b30e9c4.png"><img src="https://img.picui.cn/free/2024/08/20/66c437b30e9c4.png" alt="free.png"></a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>再学机器学习和深度学习</title>
    <link href="/2024/10/11/DL/"/>
    <url>/2024/10/11/DL/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d415b7d428538527e67e069c5c93748e10d3b4dea86328799225f3f301d97051">4630436162ade97ba2718b7d0c4b3b6351ade09e539dfebeb5402828e29e64b03842139bcd96982230beaabe7f4e507d7cf2d5e9c1645b51e4960827392e00da17a2239f770291571677a42ede00c195d3257c8f9c6a9f70aacce3eaf394051f9040d0bac0cf1b90f63523824e36b21e525f8b9328f603a09446d45be9d2522597190f05320aaaeac8e739393fe063442119592e274615e2ec5f3fa449e35b776be3b074f386476f414678efd9ef89fddf19af0705f249c165e5c73a8bc4197a36427ac1f899c5b20c37fc517b888664d234e4b47bf21c8b4ba32dd1cc411a2549e49685c264391c8507ff7c2244225d162e13c165ecb003b77b73e7742505a4be0e963605df775e59d09e084a0db7b0a4e44ff5f06923deecd82401e3fb257e6443d7b14bb08f8b19732c3a5fd326521f5d9855a285fc4fb71f94179a83f38d676c315c69aa7344c63e4ad0f66f04b19eaa69345d67f2035cb51ff5ca04d5ad5bdabdb98fca04bf58eafeb6f153ba93a0ac94128158dceaad34ed610d96599306c0bcbc49bb02ce201aca261a9cb67a2991457225c1974abfc76a60461eb33f1cff0b17d554e6b8a04ecc3c58917f43c98e985a4c7c0e7699c1c2db7d65f112192dc0e08f5ab125cbd382068c470a041313a28ee13c51c3486ce13fb12491cd49786be83be375205515962179f7b60faffd0b1d577e99e0e43353e91834fef7caa406c5ec732a540d60484226bcd897d3f06b654351c08b1914953cf854edc8e8b02aeb9a68e3acd16ee2e1f828b3c259d661901c0c0023843d4f914b4bf636311698b84cf33d2ebb8d10b978d689ca28087dcde7fb8e3eea4e2234fb2d5f400415f9f80ee59da970c8d8d258e93eae7d492b6ef49da8a9b01e99069fb73bcd94383a60bc6a023b78234bf164fdc64dd1b15d089a40550f9906cff97b74f6b6efc30aeea2451a51ef3fa6f4febaeafb2e49349bc4c59b0e4b750f035a30d449803d41596e9883731e5e1ca17ee0a134fc73289b6e428884cf79935402c638a53aae67dd68a829ff8cecf5eaf1af3e09e9c2694b51f1607b23b746c09c261bb9f52ff6afe9332f5a45bc9027501afa17ecda84abd29f682a51e86c9ecc2ead4218b7953bff9decadaefbec676b850adaf48448e5784e3cf8de05a578fdbb637517ebc0c39c4d6d9b4f56487a7a16925bdc58e615584961a770027531b4edd2f17c3dcb1de346d3ff64845cc3bbcfac53ce67937890ceb29d1dceea12103493630d6008d886ec278b89271eaac1e91b23f6e1bbfc0e2ce1272a606d6da3f8cd5c28ebfa5c86a31cfae8cd25efa6b6efeaef7002698bf1261346e520e857f063a1b3f485a564018a3f6c3c81856df12768ecfa497a27b81144a4d627a5802c76b85700fb1d4eaab64c28380627e151b300d5867a02ac89e0fc7f1cbe97a7916c380cd950fc82b7e8cacc44692741d2dc7fb671f9dc2a5d47428dd31facefc8afb4e0f7d89f7bf46a75c390ea4286bef3865ac660d9136a97a671448052562fdfc6f1e6c2761d2b280a1bd98cbea4a41ec1070231e5b262ac93c541e99ce63a9763cea1a878cdf84db2ba410456e2071e1b676e7f531ec3f8859538b1ed0c5c0658db290f4afff3622503047852c61240fee5251960d818759c52a4535e9ca54c710b769bf8239f5f697c35b9a3237b72c9adc361b1017aab777a1c670125c0f0ddac880643e640a8295007f7bd9906cac939b8f35efc14a6e2bbec4ba918f6ae21a87c878c6b33d952a700e13c462bdd72861a1aee2ea9f98fd9fa21d4354fa233aef8a18edb7456cb3c84dc1a252fe6b6e40f9e57340a125ae7e832382d5c940bc2c91e6646c5e64b31fc4afe674c42b723125d0454a54acb2000612d169d2d80bafcb4bcfb4837a1c525b1cb04fd242bc2008bbbaed8c4c683b2acfca8dc966e81ed788c757e4819fc1743ed4569ee5d70ff15aa48084279cfbf536a85b7c7d0898434e36b9596e44e430a2067748a5bf7f7560e924e9b97f7ce609c5f6045d1d8fcd0b2b88cd7d2282a57a04d44a98edfad08c7230ecd08cc99ed4d3af3b682b25b09936d1f90513c6154231dd0c3a858b7d624f5b89e0d8d8ff258ac55e1130cffadbe005e05e69a80d67199053afa368a6bef1b4dbdbe610bfa3f287cc932c52b8dab79282e3fee1b6607faa520cbc0f77b56f3f03f397b780a90e38e69ff6d4019d0b7e7d85b61b6f384f420267d6411b8a93613d246b40ae7e0a80cf16fece096b93da3a6a8b1c7387fd7f9273dde3608d4f4ce48d150f7e4e450197e4278f89e06e27bb817df291ecb2b8d80c46ede919ac5df11bbcc34cd72b29c5aed7191e0828f767165e19ef6d583bb3e2e6db3f84cff7c4f62a4f8a8b5b61f322e6e67e3154e7aa1493f450c9da0c6b4f2cec5c3d31a87e22a1bf043b76c7e3ec8af3a8f378c71cf7157d7be80d6a1e40cbdafa49e754cf2ca48b79024c46ef39c86de30b3aa81d242e0838691bcb2f5b617686e4f1502602ba3801cfcaf7815422fc361f322af1d801e28117e1fbc4166d635adc2685ec081ec39915f1a3b5191e71209d6f3f299354757b473a2a2ff12779039adfadab60787e0db0b81e8d1f4357f6fde5520e4f7c8cf503550ba3a434fc9fc49a30b49d4c88d7684c69763bc27ae7b0425a0ff3c6ce478892a323a6794fe3b61fe6d77118c61c42d214837853128a12e004d3765819de1aa959aa84ecbeaf701c4be93c034efd7f77c4ddf47e714fe145b6d8478a9ee88b0a946ab9e196382a358c97f791a88bb25bc025bcbf35a88ebc33ad1738a335f53f363873542c9fb3181c8cc716aaf939b80923e3f18c4a2a17da470d1240e8dad486f10ba664e48c5ebb70e9c5624ea9b5bd85681dec4ffa740e7c73bed8107c96805d1e481b8662dce6f019e52e3786f12f09bc27a25ce8af8285b13a0426cb4428275011a722c8566cbb75bca4d80d106ee371df0fab98cf0f52c5c426f8e1862d192aa7bfcbd15e9e6a7c48c6fb3defddcb7783239b7adcc695b95e5dd7c73ac7c006fe8efe019b5250417ab24538a5c8f0cde4a5ac5e27d6027dbdd3b69193fb0777f761302624266b662bccd5173069deb464568ca9d66efe054dcb70e46c9e7ca4040a1cd31c04d302a7a00e7106dbeb3fc7b90354df111a9539d6262aa58469f2598010c67e8218e84d33a65b269f51f1deabd80a34519d7d860fe5c1b471f9157a3f8ed3ca35f745eecd4008ed0fa4366f7096775ab807d9a3c56bf020b869336c55dc3a422bc3bd2e1c4db55ec9ee05def765c1476692c98c9cd3ef8d76890049c98fbf006caa0383c53d08b8086a9e8c4fbe76dcaf3588b082fc153cc2303ab6d33c53eab819872d9d3f8bead6c0f8b4da0e467d42d5482f9dce8071612cc70f7a5de772f11d70cc2463c2ee0103685921c30ab71904f4876ab3a2c415fed77b85f7ba46e54af855dcef19fa9ffa08b3761cad6a20447b5c8184ffee9cbe07f1bfda92d45954bdc0959ef94d5742491c58c23156b7af50e6ae0518094624ab7b99ee3d3c38a9cbb53265158db217af8808ca239b92c09d77f8d598b34594af3d362e643a39d8b48b51e74a4400cdb89131d737e31ee5be56141f6de541d65db930b2d050f2488ecebfc6a187ae33edebb66c30fd0fb5a8b92d0447a486c6d797fadc75bea44ff3f32caaa1fe5d3b05e092e9f50954d2fae5af5616f47374e45e8c23a6632b4151ad368363e0f114bef9247ae689871976266b18aa51d00cc9d2eb86c682a45a5199a92f3121466c17d9c3f14052ff78c15bf47165c5596527236c4ebb9635e73fc51d063adc74f9ca4612c7ae2745f924938728072eb865b77ec44cf40e87818f1c3e16803d05d35108148029a33c556e1b61ed113cda8e7bace8bfbead783477e14704c2aa729a4e66d4e8b7467df513d170fa51a750b2eab1eb56c5eea382ad0891c4969bf77eda612509841d37bb41e21f1257bf300221e2f0c17b1325d89d2eb2d1f2dc2ec4c49ec11ec8a192072c47f3b8ca8f561dcf927301244ceb4b3d0020585d0fee3cfda4112c2c032beda5dc987b60bf498798924f2c38e38056af43b3c653451408a1b0feb4a81ce0c5610aeaf6655300909480f93a281ec62395a79555efd100985da2cfcbe500a1e4a9fc827c7be04798a816166e5ef25f07f7df882268cd93259fcf8c41b08eb165fd8ac342ed7dddc9d209f78dd7207ce4a4d6ac703a4fe1d8e26ad97c8bd2d185ab22fad059487f5ba4fad670015e35ad277f5dc21e10cbb7ce0e7db0899b24d211d9b07dce8df516e0ed3429e5b008c453a77f76362bb98ba96723243d6a956ecee2dd176ece7f1d9c3e9fcb784f2dee9e6ef8cb8eaff813d0da222f794bec798d0da92240e0a14c58250060fdb9735a6c895653d31b237940eaf827badb4ccb8ac4841a541fbbfe5aae23c8ba3d9f36bac3e29b722c1d7401f0ab857c38f7fd696c360006142db2cd2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>October个人随想</title>
    <link href="/2024/10/08/October%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/10/08/October%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="82ffad2573e171cc68d192ccebb3f6bc0211c8857e52372d69160ca91f3440d4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习</title>
    <link href="/2024/09/30/Docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/09/30/Docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>很久之前就下载了Docker，但是因为种种原因一直搁置，也没有学习，今天一起来学一学吧~😄😄</p><h2 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h2><p><strong>Docker</strong>是一个开源平台，允许开发者打包、分发和运行应用程序<strong>容器</strong>，使用<strong>容器</strong>来隔离应用程序和以来项，使得应用能够在不同环境中一致运行。</p><p>在和Skyee聊天的时候，她说她用的是<strong>Docker Compose</strong>，这是一个工具，使得用户可以一次性启动、停止和管理多个Docker容器，而不需要单独管理每个容器，具体内容没有详细看，在这里先以Docker为主！</p><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><ul><li><strong>镜像(Image)</strong>: 镜像是一个只读的模板，用于创建<strong>容器</strong>，可以从<strong>Docker Hub</strong>等公共库中下载，也可以通过<strong>Dockerfile</strong>自定义构建。比方说我从Docker Hub下载的Centos、Ubuntu等都称为镜像。</li><li><strong>容器(Container)</strong>: 容器是<strong>镜像</strong>的运行实例，可以启动、停止、删除，是一个轻量级的、独立的可执行环境。</li><li><strong>仓库(Repository)</strong>: 仓库是<strong>镜像</strong>的存储库，可以上传、下载镜像，也可以自定义镜像。可以是本地的，也可以是<strong>Docker Hub</strong>等公共库。</li><li><strong>Dockerfile</strong>: Dockerfile是一个文本文件，用于定义如何构建镜像，用户使用dockerfile自定义镜像。</li></ul><p>模仿着画了一张图，展示容器和镜像的关系：<br><img src="https://ice.frostsky.com/2024/09/30/67cf83690f2e153549870e881e07aab9.png" alt="Docker学习-容器和镜像的关系"><br>在这个图中，更细致地指出了Docker镜像是由多个只读层组成的，容器是在镜像之上启动的，会在镜像之上创建一个可读写层，容器的更改都发生在这一层，不会影响下面的只读层。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="设置镜像"><a href="#设置镜像" class="headerlink" title="设置镜像"></a>设置镜像</h3><p>在国内使用Docker时，需要设置镜像源，不然会很慢，但是我配置了镜像源之后还是偶尔出现超时错误，或许和我开启了VPN有关，不过总而言之还是需要设置镜像源。<br>我使用的Docker Desktop，在settings -&gt; Docker Engine中添加如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull &lt;image&gt;<br>docker pull &lt;image&gt;:&lt;tag&gt;<br><span class="hljs-comment"># 示例</span><br>docker pull ubuntu:18.04<br></code></pre></td></tr></table></figure><p><img src="https://ice.frostsky.com/2024/09/30/6cf6b6e18898c032c49d347f65fe5f7b.png" alt="Docker学习-下载报错示例"><br><img src="https://ice.frostsky.com/2024/09/30/3b4db79d0d03ef2c4deb7352b5b15ba9.png" alt="Docker学习-正常下载示例"></p><h3 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br>docker images &lt;image&gt;<br><span class="hljs-comment"># 示例</span><br>docker images ubuntu<br></code></pre></td></tr></table></figure><p><img src="https://ice.frostsky.com/2024/09/30/0cb47e0f38d7ed863c932ae8acad4ecf.png" alt="Docker学习-查看镜像信息"></p><ul><li><strong>REPOSITORY</strong>: 镜像的名称，表示该镜像所属的仓库。</li><li><strong>TAG</strong>: 镜像的标签，表示该镜像的版本。</li><li><strong>IMAGE ID</strong>: 镜像的ID，表示该镜像的唯一标识。</li><li><strong>CREATED</strong>: 镜像的创建时间。</li><li><strong>SIZE</strong>: 镜像的大小，以字节为单位。</li></ul><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi &lt;image&gt;<br><span class="hljs-comment"># 示例</span><br>docker rmi ubuntu:18.04<br></code></pre></td></tr></table></figure><p><code>docker rmi</code>命令用于删除一个或多个镜像，image参数可以是镜像的ID或者名称，多个镜像之间用空格隔开。</p><h3 id="新建启动容器"><a href="#新建启动容器" class="headerlink" title="新建启动容器"></a>新建启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --it --<span class="hljs-built_in">rm</span> &lt;image&gt; &lt;<span class="hljs-built_in">command</span>&gt;<br><span class="hljs-comment"># 示例</span><br>docker run --it --<span class="hljs-built_in">rm</span> ubuntu:18.04 /bin/bash<br>docker run --it --<span class="hljs-built_in">rm</span> ubuntu:18.04 /bin/bash -c <span class="hljs-string">&quot;echo hello world&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>–it</strong>: 启动容器并进入交互式shell。</li><li><strong>–rm</strong>: 退出后删除这个容器，当然没有这句话就不删除。</li></ul><p><img src="https://ice.frostsky.com/2024/09/30/fcd20a18d1030093004d3560d6bb601d.png" alt="Docker学习-新建容器"></p><h3 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start &lt;container&gt;<br>docker stop &lt;container&gt;<br></code></pre></td></tr></table></figure><p>这里的container指容器的ID或者名称，可以通过<code>docker ps</code>命令查看。<br><img src="https://ice.frostsky.com/2024/09/30/be53fdd6929408c7e6c704ed60c3cca4.png" alt="Docker学习-启动容器"></p><ul><li><strong>Container ID</strong>: 容器的ID，唯一标识符。</li><li><strong>Image</strong>: 容器使用的镜像。</li><li><strong>Command</strong>: 容器启动时执行的命令。</li><li><strong>Status</strong>: 容器的运行状态。</li><li><strong>Ports</strong>: 容器映射的端口。</li><li><strong>Names</strong>: 容器的名称。</li></ul><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> &lt;container&gt;<br></code></pre></td></tr></table></figure><p><code>docker rm</code>命令用于删除一个或多个容器。container参数可以是容器的ID或者名称，多个容器之间用空格隔开。<br><img src="https://ice.frostsky.com/2024/09/30/d878a86dc0823c56123d2811bf3afb47.png" alt="Docker学习-删除容器"></p><h3 id="根据dockerfile创建镜像"><a href="#根据dockerfile创建镜像" class="headerlink" title="根据dockerfile创建镜像"></a>根据dockerfile创建镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t &lt;image&gt;:&lt;tag&gt; &lt;path&gt;<br></code></pre></td></tr></table></figure><ul><li><code>-t image</code>:<code>-t</code>选项用来为新创建的镜像指定一个名称<code>&lt;image_name&gt;</code></li><li><code>path</code>: 表示Dockerfile所在的路径</li></ul><p>不过该方法还没有实现过，dockerfile也很有讲究，那就To be continued~</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git几步曲</title>
    <link href="/2024/09/30/git%E5%87%A0%E6%AD%A5%E6%9B%B2/"/>
    <url>/2024/09/30/git%E5%87%A0%E6%AD%A5%E6%9B%B2/</url>
    
    <content type="html"><![CDATA[<p>这里记录一些git的非常基本基本的操作，主要用于管理个人的小项目。没错非常简单，但我就是记不住然后每次左向箭头找到历史。。</p><h3 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化git仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><p>这个命令会在当前目录下创建一个git仓库，并初始化一个空的提交记录，只需要在最初始的时候使用该命令。</p><h3 id="检查git状态"><a href="#检查git状态" class="headerlink" title="检查git状态"></a>检查git状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>这个命令会显示工作目录和暂存区的状态，包括哪些文件已更改、哪些文件在暂存区中等信息。</p><h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add &lt;file&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把指定的文件添加到暂存区，等待下一次提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure><p>这个命令会把当前目录下的所有文件添加到暂存区，等待下一次提交。</p><h3 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;commit message&quot;<br></code></pre></td></tr></table></figure><p>这个命令会把暂存区的更改提交到本地仓库，并添加提交信息。</p><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin &lt;分支名&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把本地仓库中的更改推送到远程仓库，并指定分支名。</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>learn_about_humanEval</title>
    <link href="/2024/09/18/learn-about-humanEval/"/>
    <url>/2024/09/18/learn-about-humanEval/</url>
    
    <content type="html"><![CDATA[<p>在这里记录一下评估模型代码生成能力常用的Benchmark：<strong>humanEval</strong><br>HumanEval 数据集是 OpenAI 为评估代码生成模型而创建的一个数据集，专门用于测试模型的编程能力。该数据集中一共有164条数据，均以python书写。</p><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>举例一条数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;task_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HumanEval/163&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;prompt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\ndef generate_integers(a, b):\n    \&quot;\&quot;\&quot;\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) =&gt; [2, 4, 6, 8]\n    generate_integers(8, 2) =&gt; [2, 4, 6, 8]\n    generate_integers(10, 14) =&gt; []\n    \&quot;\&quot;\&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;entry_point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;generate_integers&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;canonical_solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \&quot;Test 1\&quot;\n    assert candidate(10, 2) == [2, 4, 6, 8], \&quot;Test 2\&quot;\n    assert candidate(132, 2) == [2, 4, 6, 8], \&quot;Test 3\&quot;\n    assert candidate(17,89) == [], \&quot;Test 4\&quot;\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \&quot;This prints if this assert fails 2 (also good for debugging!)\&quot;\n\n&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在<code>prompt</code>中，告诉了模型函数名、函数定义和预期输出，<code>entry_point</code>为函数名，<code>canonical_solution</code>提供了示例函数，<code>test</code>为测试用例。</p><h3 id="HumanEval如何评测代码正确性？"><a href="#HumanEval如何评测代码正确性？" class="headerlink" title="HumanEval如何评测代码正确性？"></a>HumanEval如何评测代码正确性？</h3><p>在HumanEval中，评测的代码位于<code>execution.py</code>中，拼接程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Construct the check program and run it.</span><br>check_program = (<br>    problem[<span class="hljs-string">&quot;prompt&quot;</span>] + completion + <span class="hljs-string">&quot;\n&quot;</span> +<br>    problem[<span class="hljs-string">&quot;test&quot;</span>] + <span class="hljs-string">&quot;\n&quot;</span> +<br>    <span class="hljs-string">f&quot;check(<span class="hljs-subst">&#123;problem[<span class="hljs-string">&#x27;entry_point&#x27;</span>]&#125;</span>)&quot;</span><br>    )<br></code></pre></td></tr></table></figure><p>之后运行这个拼接之后的代码，<code>test</code>中包含了很多测试用例，模型需要判断是否通过所有测试用例，全部通过才代表<code>passed</code>。<br>但是模型生成的代码并不完全是符合要求的格式：仅包含代码块，实际也会生成函数头，但经过检查发现这样没有影响评测的结果，why？<br>如果函数头重复，那么生成的代码类似以下格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-comment"># 这个函数头重复了一遍</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has_close_elements</span>(<span class="hljs-params">numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>], threshold: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Check if in given list of numbers, are any two numbers closer to each other than</span><br><span class="hljs-string">    given threshold.</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.0, 3.0], 0.5)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has_close_elements</span>(<span class="hljs-params">numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>], threshold: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Check if in given list of numbers, are any two numbers closer to each other than</span><br><span class="hljs-string">    given threshold.</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.0, 3.0], 0.5)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> idx, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numbers):<br>        <span class="hljs-keyword">for</span> idx2, elem2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numbers):<br>            <span class="hljs-keyword">if</span> idx != idx2:<br>                distance = <span class="hljs-built_in">abs</span>(elem - elem2)<br>                <span class="hljs-keyword">if</span> distance &lt; threshold:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>METADATA = &#123;<br>    <span class="hljs-string">&#x27;author&#x27;</span>: <span class="hljs-string">&#x27;jt&#x27;</span>,<br>    <span class="hljs-string">&#x27;dataset&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">candidate</span>):<br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.2</span>], <span class="hljs-number">0.3</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.2</span>], <span class="hljs-number">0.05</span>) == <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>], <span class="hljs-number">0.95</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>], <span class="hljs-number">0.8</span>) == <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.0</span>], <span class="hljs-number">0.1</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">4.1</span>, <span class="hljs-number">5.1</span>], <span class="hljs-number">1.0</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">4.1</span>, <span class="hljs-number">5.1</span>], <span class="hljs-number">0.5</span>) == <span class="hljs-literal">False</span><br><br><br></code></pre></td></tr></table></figure><p>这是一个有趣的现象，说明即使模型生成的代码中包含了函数头，拼接后的代码仍然可以通过评测。这是因为Python的<strong>函数定义覆盖特性</strong>以及<strong>代码执行顺序</strong>允许这种情况下的正确执行。<br>实际上，最终的有效定义是<code>completion</code>中的那个函数，因为它会覆盖掉<code>prompt</code>中的不完整定义。这个机制确保了模型生成的完整代码可以正确执行。</p><h3 id="评价指标-‘Pass-k’"><a href="#评价指标-‘Pass-k’" class="headerlink" title="评价指标 ‘Pass@k’"></a>评价指标 ‘Pass@k’</h3><p>HumanEval 使用 pass@k 作为主要评估指标，它衡量的是模型生成代码在多次尝试中成功解决问题的概率。具体计算方式如下：</p><ul><li>k &#x3D; 1：模型只生成一个代码解决方案，评估该方案是否通过所有测试用例。</li><li>k &gt; 1：模型可以生成多个候选代码，评估在这 k 个候选方案中，至少有一个通过所有测试用例的情况。</li></ul><h3 id="Record-两天复现DeepSeek-on-HumanEval-python🤩"><a href="#Record-两天复现DeepSeek-on-HumanEval-python🤩" class="headerlink" title="[Record] 两天复现DeepSeek on HumanEval-python🤩"></a>[Record] 两天复现<code>DeepSeek on HumanEval-python</code>🤩</h3><p>在这里记录一下，由于项目需要，所以复现了一下DeepSeek在HumanEval上的测评。</p><p>复现使用的大模型是<code>DeepSeek-V2.5</code>，在这里并没有从Huggingface上下载开源大模型，只是使用API调用的方法进行评测。</p><p>首先clone下来<a href="https://github.com/deepseek-ai/deepseek-coder">DeepSeek-Coder</a>的系列代码，阅读代码发现，他们在评测humanEval的时候，并不是单纯把prompt输入进去，而是对prompt进行了修改，增加了一段约束输出的提示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_deepseekcoder_instruction</span>(<span class="hljs-params">languge: <span class="hljs-built_in">str</span>, question: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">return</span> <br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Please continue to complete the function. You are not allowed to modify the given code and do the completion only. Please return all completed function in a codeblock. Here is the given code to do completion:</span><br><span class="hljs-string">    ```&#123;&#125;</span><br><span class="hljs-string">        &#123;&#125;```</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>.strip().<span class="hljs-built_in">format</span>(languge.lower(), question.strip())<br></code></pre></td></tr></table></figure><p>下面需要面对的问题就是，在调用API接口的时候，两个关键的参数<code>temperature</code>和<code>top_p</code>怎么设定？</p><div class="note note-primary">            <ol><li>temperature控制模型生成的随机性或创造性。 <ul><li>范围：通常在0到1之间（可以取大于1的值，但不常见）。</li><li>作用：<ul><li>当temperature值接近0时，模型的输出会变得更加<strong>确定</strong>，它会倾向于选择概率最高的单词，这样生成的内容会更保守，更接近训练数据中的常见模式。</li><li>当temperature值较高时，模型生成的单词选择会更加<strong>随机</strong>，输出的内容会更具创造性，但也可能会变得不太连贯或不合逻辑。</li></ul></li></ul></li><li>top_p(Nucleus Sampling)控制模型生成时使用的<strong>概率累积阈值</strong>，用于确定在候选单词中的选择范围，主要控制<strong>多样性</strong>。<ul><li>范围：在0到1之间。</li><li>作用：<ul><li>top_p会影响生成时候选单词的集合。当top_p&#x3D;1时，模型会从所有可能的单词中进行采样；当top_p的值越低，模型会在一个概率累积较高的候选词集合中选择，即只考虑那些占总概率最高的词汇。</li></ul></li></ul></li></ol>          </div><p>在这里，由于在deepseek的官方代码中没有找到他们的参数，因此我选择和<a href="https://huggingface.co/spaces/bigcode/bigcode-models-leaderboard">bigcode-models-leaderboard</a>的参数对齐。也就是<code>temperature=0.2，top_p=0.95</code></p><p>调用代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_response</span>(<span class="hljs-params">prompt</span>):<br>    prompt = build_deepseekcoder_instruction(<span class="hljs-string">&#x27;Python&#x27;</span>, prompt)<br>    response = client.chat.completions.create(<br>        model=<span class="hljs-string">&quot;deepseek-coder&quot;</span>,<br>        messages=[<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;<br>        ],<br>        temperature=<span class="hljs-number">0.2</span>,<br>        top_p=<span class="hljs-number">0.95</span>,<br>        max_tokens=<span class="hljs-number">1024</span>,<br>        stream=<span class="hljs-literal">False</span><br>    )<br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message.content<br></code></pre></td></tr></table></figure><p>主要的两个问题考虑了之后，我首先跑出了第一轮结果：<br><img src="/../img/first_round.png" alt="first_round.png"><br>官网给出的分数高达89，但我只复现出了约66分，说明复现的过程还是有问题。<br>思考思考，检查结果很容易发现，生成的代码报错原因非常集中：<br><img src="/../img/mistake.png" alt="mistake.png"><br>都是缩进的错···🙄🙄<br>于是阅读了deepseek处理代码缩进的逻辑，并且对他们的逻辑进行稍微修改（很奇怪，他们的逻辑会把prompt中代码def之前的部分补上，又会导致缩进问题，这部分直接不要就好了），修改后再次进行打分：<br><img src="/../img/second_round.png" alt="second_round.png"><br>呀，这下终于跑出了满意的结果！😄😄</p><div class="note note-success">            <p>在复现结果差距很大的时候，要学会找原因。我在第一次跑出66分的时候，其实在这次之前没有验证评测代码是否正确，但是其实官网上有一个小脚本只要执行就可以验证评测对不对。<br>虽然也是找到了原因，但是这次过程没有循序渐进，有可能换一个其他隐藏的小错误就发现不了了…😐😐</p><p>这种对大模型生成的代码进行评测的难点，有一个就是在于如何把代码格式化，可以直接执行，其实生成的代码很多不能执行其实不是逻辑问题仅仅是格式有误。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
      <category>Image2Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Benchmark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>September个人随想</title>
    <link href="/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="59db15d372323da0c2493ce706f97e644bff4e4249e2edee59c9e82f1ca19f06"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic Knowledge for Domain Generalization</title>
    <link href="/2024/09/04/Generalization/"/>
    <url>/2024/09/04/Generalization/</url>
    
    <content type="html"><![CDATA[<p>🌞🌞有幸接触到一个做域泛化的项目组，在准备期间看论文发现自己机器学习、深度学习的基础其实一点都不扎实🥹🥹，在这里记录一下跟进项目需要用到的知识点！</p><h3 id="域自适应-Domain-Adaptation-VS-域泛化-Domain-Generalization"><a href="#域自适应-Domain-Adaptation-VS-域泛化-Domain-Generalization" class="headerlink" title="域自适应[Domain Adaptation] VS 域泛化[Domain Generalization]"></a><strong>域自适应[Domain Adaptation]</strong> VS <strong>域泛化[Domain Generalization]</strong></h3><p>以一个具体的场景为例： 假设我在开发一个自动驾驶系统，它需要识别街道上的行人。我在A城市收集了大量的行人图像（源领域），我的目标是把这个系统应用到B城市，但是B城市的街道布局、行人穿着、天气条件等可能与A有所不同，这就是所谓的“领域偏移”（domain shift）。</p><ul><li><strong>Domain Adaptation:</strong> 在训练的过程中，就给模型提供B城市的图像，虽然这些图像可能没有标注过，但是我的目标是让模型利用这些未标注的目标领域数据，调整自己对新环境的适应性。</li><li><strong>Domain Generalization:</strong> 在训练过程中，我并不提供B城市的图像，而模型在使用的过程中，也可以识别出B城市的行人。</li></ul><p>总结来说：<strong>域自适应</strong>是通过使用一些目标领域的数据来帮助模型适应新环境，而<strong>域泛化</strong>则要求模型在没有看到目标领域数据的情况下，依然能够应对新的环境。</p><h3 id="元学习-Meta-Learning"><a href="#元学习-Meta-Learning" class="headerlink" title="元学习[Meta Learning]"></a>元学习[Meta Learning]</h3><p>Meta-learning，也称为“学习如何学习”，是一种机器学习方法，旨在通过学习元知识（即关于学习过程本身的知识）来提高模型在新任务上的表现。Meta-learning的目标是使模型能够快速适应新任务，即使在只有少量训练数据的情况下，也能取得良好的效果。元学习的核心想法是学习一个先验知识 (prior)。</p><blockquote><p>(夹带点私货，下面这个elegant的图，是用mermaid绘制出来的，useful!🤩🤩欸，但是大小不好调整，而且多次尝试都失败了，😢sad)</p></blockquote><p><strong>元学习的内容细分</strong></p><pre><code class=" mermaid">%%&#123; init: &#123; &quot;theme&quot;: &quot;base&quot;, &quot;themeVariables&quot;: &#123; &quot;width&quot;: &quot;300px&quot;, &quot;height&quot;: &quot;300px&quot; &#125;&#125;&#125;%%graph LR    A[Meta-Learning] --&gt; B[Meta-Training Phase]    A --&gt; C[Meta-Testing Phase]    B --&gt; D[Meta-Training Data]    B --&gt; E[Meta-Validation Data]    D --&gt; F[Meta-Train Task 1]    D --&gt; G[Meta-Train Task 2]    D --&gt; H[Meta-Train Task N]    E --&gt; I[Meta-Validation Task 1]    E --&gt; J[Meta-Validation Task 2]    E --&gt; K[Meta-Validation Task N]    C --&gt; L[Meta-Testing Data]    L --&gt; M[Meta-Test Task]subgraph Task_StructureF --&gt; N[Support Set N-way K-shot]F --&gt; O[Query Set]G --&gt; NG --&gt; OH --&gt; NH --&gt; OM --&gt; NM --&gt; Oend</code></pre><h3 id="PACS-数据集"><a href="#PACS-数据集" class="headerlink" title="PACS 数据集"></a>PACS 数据集</h3><p><strong>PACS</strong> 是一个常用于域自适应和域泛化任务的数据集。它特别适用于评估模型在不同视觉风格下的泛化能力。PACS 的全称来自它所包含的四个不同的视觉风格类别：</p><ul><li>P: Photo（真实照片）</li><li>A: Art painting（艺术画）</li><li>C: Cartoon（卡通图像）</li><li>S: Sketch（素描）</li></ul><p>每种风格都包含相同的7个类别的物体：狗、象、长颈鹿、吉他、马、房子、人物。</p><p>PACS 的数据来自四种视觉风格，旨在研究模型如何在不同的视觉领域间进行泛化。例如，模型可能在“Photo”风格上进行训练，但要在“Art painting”或“Cartoon”风格上进行测试。</p><h3 id="图像的通道"><a href="#图像的通道" class="headerlink" title="图像的通道"></a>图像的通道</h3><p>图像的通道是指图像中每个像素点所包含的颜色或信息维度。不同类型的图像根据所使用的颜色模式可能有不同数量的通道。<br>RGB图像是最常见的彩色图像格式，有<strong>三个</strong>通道：红色 (Red)、绿色 (Green)、蓝色 (Blue)。<br>每个像素点通过三个通道的组合来表示颜色。每个通道的值通常范围在 0 到 255 之间，不同通道的组合可以生成不同的颜色。</p><p>在深度学习中，特别是计算机视觉任务中，通道数是图像张量结构的一部分。例如，对于一个 RGB 图像，张量通常表示为 (C, H, W)，其中：</p><ul><li>C 代表通道数（对于 RGB 图像为 3）；</li><li>H 代表图像的高度；</li><li>W 代表图像的宽度。</li></ul><p>神经网络会分别处理每个通道的数据，并通过卷积、池化等操作来提取和处理图像的特征。</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useful code</title>
    <link href="/2024/08/22/code/"/>
    <url>/2024/08/22/code/</url>
    
    <content type="html"><![CDATA[<p>在这里记录下有用的代码，有来自实验常用的，也有oj需要用的，oj是小白水平🥺</p><h2 id="Python-mainly-for-Research"><a href="#Python-mainly-for-Research" class="headerlink" title="Python (mainly for Research)"></a>Python (mainly for Research)</h2><h3 id="设置可见GPU"><a href="#设置可见GPU" class="headerlink" title="设置可见GPU"></a>设置可见GPU</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = gpu_ids<br>gpu_ids = <span class="hljs-string">&#x27;0&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><strong>指定GPU</strong>：通过设置 <code>CUDA_VISIBLE_DEVICES</code> 环境变量，可以指定哪些GPU可供程序使用。例如，如果有4个GPU（编号为 0, 1, 2, 3），但只希望程序使用GPU 2和GPU 3，你可以设置<code>gpu_ids = &quot;2,3&quot;</code>，这样程序运行时只会看到这两个GPU。</li><li><strong>屏蔽GPU</strong>：如果不希望程序使用任何GPU，可以将<code>gpu_ids</code>设置为空字符串，即<code>gpu_ids = &quot;&quot;</code>。这会使得程序无法看到任何GPU，从而只使用CPU。</li></ul><p><strong>attention:</strong> 这行代码实际上只是告诉程序哪些GPU是可见的或可用的，但它并不保证程序一定会使用这些GPU中的所有GPU。</p><h2 id="C-mainly-for-Online-Judge"><a href="#C-mainly-for-Online-Judge" class="headerlink" title="C++ (mainly for Online Judge)"></a>C++ (mainly for Online Judge)</h2><h3 id="Digit-Separation"><a href="#Digit-Separation" class="headerlink" title="Digit Separation"></a>Digit Separation</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 来自快乐数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">square_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-type">int</span> digit = n % <span class="hljs-number">10</span>;<br>        n /= <span class="hljs-number">10</span>;<br>        sum += digit * digit;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Create-LinkedList"><a href="#Create-LinkedList" class="headerlink" title="Create LinkedList"></a>Create LinkedList</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> namesapce std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of elements: &quot;</span>;<br>    cin &gt;&gt; n;<br>    ListNode* head = <span class="hljs-literal">nullptr</span>;<br>    ListNode pnode = <span class="hljs-literal">nullptr</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the elements: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> val;<br>        cin &gt;&gt; val;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>            pnode = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>            pnode-&gt;next = newNode;<br>            pnode = newNode;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="BinarySearch"><a href="#BinarySearch" class="headerlink" title="BinarySearch"></a>BinarySearch</h3><p>如<a href="https://leetcode.cn/problems/sqrtx/?envType=problem-list-v2&envId=binary-search">Leetcode第69题:x的平方根</a>需要理解题目适当变形！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 防止溢出</span><br>    <br>    <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>        left = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="About-vector"><a href="#About-vector" class="headerlink" title="About vector"></a>About vector</h3><h4 id="dynamic-array-vs-static-array"><a href="#dynamic-array-vs-static-array" class="headerlink" title="dynamic array vs static array"></a>dynamic array vs static array</h4><p>在做题的时候一不小心把<code>vector&lt;string&gt; s(3)</code>打成了<code>vector&lt;string&gt; s[3]</code>，因为本人没有细学过C++，因此在这里记录一下~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;string&gt; s; <span class="hljs-comment">// 这是一个动态大小的向量，能够在运行时添加任意数量的 string 元素</span><br>vector&lt;string&gt; s[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 这是一个静态数组，包含 3 个 vector&lt;string&gt; 对象。</span><br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// 向量 s 会有 3 个元素，且这些元素都是空字符串。</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// 向量 v 会有 3 个元素，且这些元素都是 0。</span><br></code></pre></td></tr></table></figure><p>回过头来意识到我这个问题好幼稚，犯的错好傻呀…🫥🫥</p><h4 id="reverse-array"><a href="#reverse-array" class="headerlink" title="reverse array"></a>reverse array</h4><p>包含在<code>algorithm</code>头文件中，可以通过<code>reverse(begin, end)</code>函数实现数组的翻转。<br>注意，<code>begin()</code>和<code>end()</code>函数返回的迭代器是左闭右开的，也就是说，<code>begin()</code>指向第一个元素，而<code>end()</code>指向<strong>最后一个元素的下一个位置</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 翻转数组</span><br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">4</span>); <span class="hljs-comment">// 翻转转从第 0 个元素开始到第 3 个元素</span><br></code></pre></td></tr></table></figure><h3 id="About-Binary-Tree"><a href="#About-Binary-Tree" class="headerlink" title="About Binary Tree"></a>About Binary Tree</h3><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><ol><li>递归实现 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode* root,vector&lt;<span class="hljs-type">int</span>&gt;&amp; res)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">inorder</span>(root-&gt;left);<br>    res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>    <span class="hljs-built_in">inorder</span>(root-&gt;right);<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-built_in">inorder</span>(root, res);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>迭代实现 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br> vector&lt;<span class="hljs-type">int</span>&gt; res;<br> stack&lt;TreeNode*&gt; stk;<br> <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">nullptr</span> || !stk.<span class="hljs-built_in">empty</span>()) &#123;<br>     <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">nullptr</span>) &#123;<br>     stk.<span class="hljs-built_in">push</span>(root);<br>     root = root-&gt;left;<br>    &#125;<br>     root = stk.<span class="hljs-built_in">top</span>();<br>     stk.<span class="hljs-built_in">pop</span>();<br>     res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>     root = root-&gt;right;<br>  &#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="Calculate-the-depth-of-the-binary-tree"><a href="#Calculate-the-depth-of-the-binary-tree" class="headerlink" title="Calculate the depth of the binary tree"></a>Calculate the depth of the binary tree</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">maxDepth</span>(root-&gt;left), <span class="hljs-built_in">maxDepth</span>(root-&gt;right)) + <span class="hljs-number">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Traverse-the-hash-table"><a href="#Traverse-the-hash-table" class="headerlink" title="Traverse the hash table"></a>Traverse the hash table</h4><ol><li>HashMap<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = mp.<span class="hljs-built_in">begin</span>(); it != mp.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>   it-&gt;first; <span class="hljs-comment">// key</span><br>   it-&gt;second; <span class="hljs-comment">// value</span><br>   <span class="hljs-comment">// other code</span><br>   &#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [key, value] : mp) &#123;<br>   <span class="hljs-comment">// other code</span><br>   &#125;<br></code></pre></td></tr></table></figure></li><li>HashSet<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = st.<span class="hljs-built_in">begin</span>(); it != st.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>   *it; <span class="hljs-comment">// value</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; value : st) &#123;<br>   value;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="About-string"><a href="#About-string" class="headerlink" title="About string"></a>About string</h3><h4 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>string sub = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 从索引6开始，长度为5的子串</span><br>sub == <span class="hljs-string">&quot;World&quot;</span>; <span class="hljs-comment">// 判断字符串是否相等</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地主机连接远程服务器的几种方式</title>
    <link href="/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>从大二开始，我接触到远程服务器，在这里总结一下本地主机连接远程服务器的几种方式😎</p><ol><li><strong>使用密码和VPN（可选）连接</strong>：这是我接触最多的连接方式，但是这样连接有缺点：安全性差。<br> 这种方式有时需要使用VPN才能连接，因为VPN可以屏蔽一些网络设备，比如防火墙，所以可以避免一些安全风险。<br> 首先通过VPN连接到远程服务器所在的网络。VPN（虚拟专用网络）将本地网络流量加密，并通过远程服务器所在的网络进行路由，使我们能够像在同一局域网内一样访问服务器。</li><li><strong>使用公钥和私钥连接</strong>：有过一次使用公私钥连接的经历。这种方式可以避免密码的传输，安全性更高。连接流程如下：<ol><li>生成密钥对: 使用SSH工具（如ssh-keygen）在本地生成一对公钥和私钥。</li><li>配置公钥: 将生成的公钥 (~&#x2F;.ssh&#x2F;id_rsa.pub) 添加到远程服务器上的 ~&#x2F;.ssh&#x2F;authorized_keys 文件中。</li><li>SSH连接: 使用SSH客户端，通过私钥文件（~&#x2F;.ssh&#x2F;id_rsa）连接到远程服务器。SSH会自动使用私钥进行身份验证。<br>这样连接以后，无需输入密码即可快速登录服务器，提升了工作效率，而且具有较高的安全性。🙆🏻如下图所示，是使用MobaXterm进行连接的界面：<br><img src="/../img/Moba_ssh.png" alt="使用MobaXterm进行公私钥的SSH连接"></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>August💘个人随想</title>
    <link href="/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="16fb85d944de55ccffe20bdd0528c9fac8ea022e55481864ebfa237e32c50d7a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm如何连接远程服务器</title>
    <link href="/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在实习，旁边的小伙伴全都劝我用vscode，说连接简单不费力，我这样一个忠诚的pycharm用户，JetBrains全家桶爱好者，怎么能受得了这样的虎狼之词！😡😡<br>于是，写下一篇博文，记录一下如何使用pycharm连接远程服务器。</p><div class="note note-warning">            <p>该远程连接步骤没有参考任何网上教程；pycharm版本：PyCharm 2023.2.2<br>pycharm连接远程服务器有很多种方法，或者某一步骤错误了其实有很多补救措施，可以自行探索！☺️</p>          </div><h3 id="Step1：新建一个项目"><a href="#Step1：新建一个项目" class="headerlink" title="Step1：新建一个项目"></a>Step1：新建一个项目</h3><p>新建一个项目，选择Python解释器，选择<code>Previously configured interpreter</code>，然后点击<code>Add Interpreter</code>，选择<code>On SSh</code>，如下图所示：<br><img src="/../img/img_img1.png" alt="img.png"><br>在这儿，填写服务器的ip地址（Host），端口号（往往默认），用户名，如下图所示：<br><img src="/../img/img_1.png" alt="img_1.png"><br>之后能点击next的，一路点击next，直到下图，输入密码（这里我使用的是密码连接），之后还是点击next，如下图：<br><img src="/../img/img_2.png" alt="img_2.png"><br>还是next：<br><img src="/../img/img_3.png" alt="img_3.png"><br>ok，现在来到第四步：<br><img src="/../img/img_4.png" alt="img_4.png"><br>在这里，我想要使用服务器中已经存在的环境，于是我选择<code>existing</code>,选择虚拟环境中对应的<code>python.exe</code>,往往在<code>Anaconda3</code>中的<code>envs</code>的虚拟环境名字下的<code>bin</code>中，选好了点击ok，然后点击create，如下图：<br><img src="/../img/img_5.png" alt="img_5.png"><br>之后注意选一下相匹配的文件夹，也就是你的这个项目中的文件，应该上传到服务器中的文件夹中的什么位置：<br><img src="/../img/img_10.png" alt="img_10.png"><br>这样就创建项目成功啦！</p><h3 id="Step2：浏览服务器上的文件夹"><a href="#Step2：浏览服务器上的文件夹" class="headerlink" title="Step2：浏览服务器上的文件夹"></a>Step2：浏览服务器上的文件夹</h3><p>在项目创建成功后，点击<code>Main Menu</code>（就是左上角三条线的图标），之后点击同行的<code>tools</code>-&gt;<code>deployment</code>-&gt;<code>Browse Remote Host</code>，如下图：<br><img src="/../img/img_6.png" alt="img_6.png"><br>之后在pycharm最左侧就会出代表现服务器上的文件夹的标志，选择对应的远程主机，就可以看到展开的文件夹啦：<br><img src="/../img/img_8.png" alt="img_8.png"></p><h3 id="Step3：终端修改"><a href="#Step3：终端修改" class="headerlink" title="Step3：终端修改"></a>Step3：终端修改</h3><p>注意在使用远程服务器的时候，我们往往是在终端操作，点击终端，注意<code>+</code>号旁边的小箭头，点击这个小箭头，选择对应的虚拟环境即可，如下图：<br><img src="/../img/img_9.png" alt="img_9.png"><br>这样，终端也切换到远程服务器的虚拟环境啦！It’s done!</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Useful instructions in Linux</title>
    <link href="/2024/08/01/Useful-instructions-in-Linux/"/>
    <url>/2024/08/01/Useful-instructions-in-Linux/</url>
    
    <content type="html"><![CDATA[<p>这是第一次正经使用远程服务器跑数据，遂记录一下常用的命令，希望以后会越来越熟练！🤗</p><ul><li><p>查看显卡情况</p><ul><li>1️⃣ 简易版  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nvidia-smi<br></code></pre></td></tr></table></figure></li><li>2️⃣ 更详细更美观🤩  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install nvitop<br>nvitop<br></code></pre></td></tr></table></figure>  nvitop的效果确实更美观，包括进程也展示的更加清楚：<br><img src="/../img/nvitop.jpg" alt="nvitop效果图"></li></ul></li><li><p>查看虚拟环境列表</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env list<br></code></pre></td></tr></table></figure></li><li><p>多人共享一个服务器，GPU资源稀缺的时候，需要进行<strong>占卡</strong>操作，确保一个人在使用 GPU 时，其他人不会干扰或抢占该资源<br>  如何实现占卡？编写一个脚本，在脚本中执行一个死循环，这样就可以占用 GPU 资源了。例如：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvidia-smi<br><span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0  <span class="hljs-comment"># 选择 GPU 0</span><br>python your_script.py<br></code></pre></td></tr></table></figure></li><li><p>脱离自己的终端，继续运行脚本，我常常使用的指令是<code>nohup</code>，例如：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> python your_script.py &gt; stdout.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><p>这个指令用于在后台运行一个Python脚本，同时将输出重定向到日志文件中。具体来说：</p><ul><li><code>nohup</code>：表示“no hang up”，用于在你关闭终端后继续运行该命令。通常，如果没有使用<code>nohup</code>，关闭终端后，正在运行的进程也会被终止。使用nohup可以确保即使关闭了终端，脚本仍然会继续运行。</li><li><code>python your_script.py</code>：这是你要运行的Python脚本的命令。</li><li><code>&gt;</code>：重定向符号，表示将输出重定向到指定的文件。 </li><li><code>stdout.log</code>：用于存储脚本的标准输出（即通常在终端显示的输出信息）。所有标准输出会被写入这个文件中。</li><li><code>2&gt;&amp;1</code>：这是将标准错误输出（即错误信息）重定向到标准输出中，因此所有的错误信息也会被写入stdout.log中。这其中，2表示标准错误，1表示标准输出，&amp;表示引用相同的文件描述符。</li><li><code>&amp;</code>：将该命令放到后台运行，即使你关闭当前的终端会话，脚本仍然会继续运行。</li></ul></li><li><p>赋予自己的脚本权限，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x your_script.py<br></code></pre></td></tr></table></figure><p>使用<code>chmod</code>命令，你可以给文件赋予权限。<code>+x</code>表示增加执行权限，这样你就可以运行这个脚本了。同理，<code>-x</code>表示移除执行权限，移除之后，你无法运行这个脚本。</p></li><li><p>杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 pid # pid是进程的ID, kill -9 强制终止进程<br>kill pid<br></code></pre></td></tr></table></figure></li><li><p>退出状态码</p><ul><li><strong>Exit 1</strong> 通常是脚本内的问题，需要检查日志。<br>本小菜在分批次使用nohup执行脚本时，发现脚本总是自动退出，退出状态码为1。后来寻找发现是自己的bash文件多了一行空行，实际上是多了换行符，导致脚本无法执行🥲🥲。</li><li><strong>Exit 126</strong> 通常是权限或路径问题，需要检查脚本路径和权限。</li></ul></li><li><p>查看文件夹下有多少文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -1 /path/to/directory | wc -l<br></code></pre></td></tr></table></figure><ul><li><code>ls -1</code> 列出目录中的每个文件和文件夹，每行显示一个名称。</li><li><code>wc -l</code> 统计行数，即文件和文件夹的数量。</li></ul></li><li><p>从huggingface的镜像上下载文件到服务器，步骤如下图所示：<br><img src="https://krseoul.imgtbl.com/i/2024/08/22/66c6b5110cb2b.png" alt="huggingface-cli.png"></p><div class="note note-warning">            <p>注意，在每次执行下载命令的时候都要<code>export HF ENDPOINT=https://hf-mirror.com</code>，要不然下载速度会巨慢无比😑</p>          </div></li><li><p>查看当前的python进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep python <br>ps -aux | grep python<br></code></pre></td></tr></table></figure><ul><li><p><code>ps -ef</code> 显示的是更传统的 Unix 风格的输出，注重进程间的关系（如父子进程关系）以及命令的详细信息。例子如下所示：<br><img src="/../img/ef.png" alt="ef.png"></p></li><li><p><code>ps -aux</code> 提供了关于资源使用情况的更多信息，如 CPU 和内存占用率，且格式与 <code>ps -ef</code> 不同。 例子如下所示：<br><img src="/../img/aux_1.png" alt="aux.png"><br>其中，<code>STAT</code> 列显示了每个进程的状态，其中字母组合（如 Ssl、Sl、Rl 等）表示进程的状态和属性。以下是这些标记的含义：</p><ol><li>S: Interruptible Sleep (可中断的睡眠状态)</li><li>R: Running (运行中)</li><li>l: Multi-threaded (多线程)</li><li>s: Session Leader (会话领导)</li><li>S: Low-priority (低优先级)</li></ol><p>这些字母组合起来，就表示了进程的状态和属性。例如，<code>Ssl</code> 表示进程正在睡眠中，并且是低优先级的···</p></li></ul></li><li><p>查看当前机器的内存空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">free -h<br></code></pre></td></tr></table></figure><p>效果如下图所示：<br><a href="https://ice.frostsky.com/2024/10/08/282d1ad2026ea2c7daa86061b1ed73d9.png"><img src="https://ice.frostsky.com/2024/10/08/282d1ad2026ea2c7daa86061b1ed73d9.png" alt="free.png"></a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hot100_Twice</title>
    <link href="/2025/01/01/hot100-Twice/"/>
    <url>/2025/01/01/hot100-Twice/</url>
    
    <content type="html"><![CDATA[<h3 id="三数之和">15.三数之和</h3><blockquote><p>给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j],nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] +nums[k] == 0 。请你返回所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> left = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>                <span class="hljs-comment">// 先找到一组解</span><br>                <span class="hljs-type">int</span> sum = nums[i] + nums[left] + nums[right];<br>                <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) right--;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>) left++;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    result.<span class="hljs-built_in">push_back</span>(&#123;nums[i],nums[left],nums[right]&#125;);<br>                    <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="hljs-number">1</span>]) left++;<br>                    <span class="hljs-keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="hljs-number">1</span>]) right--;<br>                    left++;<br>                    right--;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="和为k的子数组">560.和为k的子数组</h3><blockquote><p>给你一个整数数组 nums 和一个整数 k ，请你统计并返回 该数组中和为 k的子数组的个数 。 子数组是数组中元素的连续非空序列。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">subarraySum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-comment">// 通过遍历数组，计算每个位置的前准和，用一个哈希表来存储每个前缀和出现的次数</span><br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; prefixSum;<br>    prefixSum[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 0表示前缀和为0的数组组合 这里是空的 是一种情况</span><br>    <span class="hljs-type">int</span> pre = <span class="hljs-number">0</span>,count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; num: nums) &#123;<br>        pre += num;<br>        <span class="hljs-keyword">if</span> (prefixSum.<span class="hljs-built_in">find</span>(pre - k) != prefixSum.<span class="hljs-built_in">end</span>()) <br>            count += prefixSum[pre - k]; <span class="hljs-comment">// 这里是对每一个新的pre都会有一堆 pre - k的情况 不会重复的</span><br>        prefixSum[pre]++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="螺旋矩阵">54.螺旋矩阵</h3><blockquote><p>给你一个<code>m</code>行<code>n</code>列的矩阵<code>matrix</code>，请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p></blockquote><p>这道题卡在几个地方：</p><ol type="1"><li>自己想用directions来处理，但是directions数组写的不对</li><li>按照这种思路需要处理一行或者是一列的特殊情况</li><li>循环中条件容易少考虑，例如<code>if (!condition1 || !condition2 || flag[next_i][next_j])</code></li><li>整体来说，按照自己的思路这个题目比较好接受，正解我觉得挺绕的</li></ol><p><strong>自己的做法</strong> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-comment">//时间复杂度可以 空间有点高 特殊情况需要处理</span><br>        <span class="hljs-keyword">if</span> (matrix.<span class="hljs-built_in">empty</span>() || matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> &#123;&#125;;<span class="hljs-comment">// 检查空的情况</span><br>        <span class="hljs-comment">// 只有一行</span><br>        <span class="hljs-keyword">if</span> (matrix.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> matrix[<span class="hljs-number">0</span>];<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        <span class="hljs-comment">// 只有一列</span><br>        <span class="hljs-keyword">if</span> (matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i  = <span class="hljs-number">0</span>; i &lt; matrix.<span class="hljs-built_in">size</span>();i++) &#123;<br>                result.<span class="hljs-built_in">push_back</span>(matrix[i][<span class="hljs-number">0</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-comment">// 轮转的顺序 啊这里错了</span><br>        <span class="hljs-comment">// 注意不要从 x y的角度考虑 代入矩阵想一想</span><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; directions = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;&#125;;<br>        <br>        vector&lt;vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">flag</span>(matrix.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(), <span class="hljs-literal">false</span>));<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> cur_dir = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (flag[i][j] == <span class="hljs-literal">false</span>) &#123;<br>            result.<span class="hljs-built_in">push_back</span>(matrix[i][j]);<br>            flag[i][j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-type">int</span> next_i = i + directions[cur_dir][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> next_j = j + directions[cur_dir][<span class="hljs-number">1</span>];<br>            <span class="hljs-comment">// 应该是</span><br>            <span class="hljs-type">bool</span> condition1 = (next_i &gt;= <span class="hljs-number">0</span>) &amp;&amp; (next_i &lt; matrix.<span class="hljs-built_in">size</span>());    <span class="hljs-comment">// i对应行数</span><br>            <span class="hljs-type">bool</span> condition2 = (next_j &gt;= <span class="hljs-number">0</span>) &amp;&amp; (next_j &lt; matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>()); <span class="hljs-comment">// j对应列数</span><br>            <span class="hljs-comment">// 注意这里！！ 如果访问过也不能再访问</span><br>            <span class="hljs-keyword">if</span> (!condition1 || !condition2 || flag[next_i][next_j]) &#123;<br>                cur_dir = (cur_dir + <span class="hljs-number">1</span>) % directions.<span class="hljs-built_in">size</span>();<br>                next_i = i + directions[cur_dir][<span class="hljs-number">0</span>];<br>                next_j = j + directions[cur_dir][<span class="hljs-number">1</span>];<br>                condition1 = (next_i &gt;= <span class="hljs-number">0</span>) &amp;&amp; (next_i &lt; matrix.<span class="hljs-built_in">size</span>()); <br>                condition2 = (next_j &gt;= <span class="hljs-number">0</span>) &amp;&amp; (next_j &lt; matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>());<br>            &#125;<br>            i = next_i;<br>            j = next_j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br></code></pre></td></tr></table></figure></p><p><strong>官方解法</strong> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>    <span class="hljs-comment">// 其实也就是使用上下左右四个变量控制 同时不用存储当前的位置了！</span><br>    <span class="hljs-comment">// 边界条件就是上下、左右都要满足小于关系</span><br>    <span class="hljs-keyword">if</span> (matrix.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> &#123;&#125;;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>,right = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>,top = <span class="hljs-number">0</span>,bottom = matrix.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; ans;<br><br>    <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;<br>        <span class="hljs-comment">// 从左到右</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = left; i &lt;= right; i++) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(matrix[top][i]);<br>        &#125;<br>        top++;<br>        <span class="hljs-comment">// 从上到下</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = top; i &lt;= bottom; i++) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(matrix[i][right]);<br>        &#125;<br>        right--;<br>        <br>        <span class="hljs-comment">// 从右到左</span><br>        <span class="hljs-keyword">if</span> (top &lt;= bottom) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = right; i &gt;= left; i--) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(matrix[bottom][i]);<br>            &#125;<br>            bottom--;<br>        &#125;<br>        <br><br>        <span class="hljs-comment">// 从下到上</span><br>        <span class="hljs-keyword">if</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = bottom; i &gt;= top; i--) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(matrix[i][left]);<br>            &#125;<br>            left++;<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="搜索二维矩阵-ii">240. 搜索二维矩阵 II</h3><blockquote><p>编写一个高效的算法来搜索<code>m</code>×<code>n</code>矩阵<code>matrix</code>中的一个目标值<code>target</code>。该矩阵具有以下特性：每行的元素从左到右升序排列。 每列的元素从上到下升序排列。</p></blockquote><p>这个题，自己再做的时候想当然写出了DFS，但这样肯定超时，要能够利用矩阵的规律。可以从右上角或者是左下角出发，这样如果是当前元素小于target或者是大于都只有一个固定的移动方向。<div class="note note-primary">            <p>记得还有类似的题，等做到再拿出来看一看，一时想不起来了💭💭</p>          </div> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">searchMatrix</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>       <span class="hljs-comment">// 从矩阵的右上角开始搜索 这时候所有大于他的都在下面 所有小于他的都在左面</span><br>       <span class="hljs-keyword">if</span> (matrix.<span class="hljs-built_in">empty</span>()|| matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 空的</span><br>       <br>       <span class="hljs-type">int</span> rows = matrix.<span class="hljs-built_in">size</span>();<br>       <span class="hljs-type">int</span> cols = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>       <span class="hljs-type">int</span> row = <span class="hljs-number">0</span>,col = cols - <span class="hljs-number">1</span>;<br><br>       <span class="hljs-keyword">while</span> (row &lt; rows &amp;&amp; col &gt;= <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">if</span> (matrix[row][col] == target) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>           <span class="hljs-keyword">if</span> (matrix[row][col] &gt; target) col--;<br>           <span class="hljs-keyword">else</span> row++;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></p><h3 id="反转链表">206. 反转链表</h3><blockquote><p>给你单链表的头节点<code>head</code>，请你反转链表，并返回反转后的链表。</p></blockquote><p>哦莫，链表的题目总是容易出问题😭😭</p><p>这次没AC的原因是，我想让prev指向head，这样第一次prev指针没有处理好，导致指针混乱，其实可以从prev为空的时候开始处理<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">nullptr</span> || head-&gt;next == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> head;<br>    ListNode* prev = <span class="hljs-literal">nullptr</span>; <span class="hljs-comment">// 前一个节点</span><br>    ListNode* curr = head; <span class="hljs-comment">// 头节点</span><br>    <br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">nullptr</span>) &#123; <span class="hljs-comment">// 处理到最后 curr正好变为空</span><br>        ListNode* temp = curr-&gt;next; <span class="hljs-comment">// 记录当前的下一个节点</span><br>        curr-&gt;next = prev;<br>        prev = curr;<br>        curr = temp;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> prev; <span class="hljs-comment">// 这是prev指向最后一个节点</span><br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="环形链表ⅱ">142.环形链表Ⅱ</h3><blockquote><p>给定一个链表的头节点 head ，返回链表开始入环的第一个节点。如果链表无环，则返回 null。</p></blockquote><p>还是使用<strong>Floyd判圈算法</strong>，快慢指针都从head出发，快指针一次走两步，慢指针一次走一步，那么快慢指针第一次相遇，快指针在圈内比慢指针多走了一圈。</p><p><img src="https://www.helloimg.com/i/2025/01/09/677f47578b8d1.png"alt="图解示意" />之后，让快指针回到起点，每次走一步，再和慢指针相遇，相遇的地方就是入口点！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>    <span class="hljs-comment">// 先处理特殊情况</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span> || head-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (head- &gt;next == head) <span class="hljs-keyword">return</span> head;<br>    <br>    <span class="hljs-comment">// 从起点出发</span><br>    ListNode* fast = head;<br>    ListNode* slow = head;<br>    <br>    <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">if</span> (fast-&gt;next == <span class="hljs-literal">NULL</span> || fast-&gt;next-&gt;next == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-keyword">else</span> fast = fast-&gt;next-&gt;next;<br>            slow = slow-&gt;next;<br>        &#125; <span class="hljs-keyword">while</span> (fast != slow);<br>        <br>        fast = head;<br>        <br>        <span class="hljs-keyword">while</span> (fast != slow) &#123;<br>            fast = fast-&gt;next;<br>            slow = slow-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fast;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二叉树的直径">543.二叉树的直径</h3><blockquote><p>给你一棵二叉树的根节点，返回该树的直径。二叉树的直径是指树中任意两个节点之间最长路径的长度。这条路径可能经过也可能不经过根节点<code>root</code>。两节点之间路径的长度由它们之间边数表示。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 在求最大值的时候 顺便不断更新结果ans</span><br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">diameterOfBinaryTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-built_in">maxDepth</span>(root);<br>    <span class="hljs-keyword">return</span> ans - <span class="hljs-number">1</span>; <span class="hljs-comment">// 深度是节点减一</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> L = <span class="hljs-built_in">maxDepth</span>(root-&gt;left);<br>    <span class="hljs-type">int</span> R = <span class="hljs-built_in">maxDepth</span>(root-&gt;right);<br>    ans = <span class="hljs-built_in">max</span>(ans,L + R + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(L,R) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="将有序数组转换为二叉搜索树">108. 将有序数组转换为二叉搜索树</h3><blockquote><p>给你一个整数数组<code>nums</code>，其中元素已经按升序排列，请你将其转换为一棵平衡二叉搜索树。</p></blockquote><p>思路其实还是从中间的节点出发，然后放置好左右节点，还是使用递归的方法。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">TreeNode* <span class="hljs-title">sortedArrayToBST</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sortedArrayToBSTHelper</span>(nums,<span class="hljs-number">0</span>,nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function">TreeNode* <span class="hljs-title">sortedArrayToBSTHelper</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (left &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>    <br>    TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(mid);<br>    root-&gt;left = <span class="hljs-built_in">sortedArrayToBSTHelper</span>(nums,left,mid - <span class="hljs-number">1</span>);<br>    root-&gt;right = <span class="hljs-built_in">sortedArrayToBSTHelper</span>(nums,mid + <span class="hljs-number">1</span>,right);<br>    <br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="从前序与中序遍历序列构造二叉树">105.从前序与中序遍历序列构造二叉树</h3><blockquote><p>给定两个整数数组<code>preorder</code>和<code>inorder</code>，其中<code>preorder</code>是二叉树的先序遍历，<code>inorder</code>是同一棵树的中序遍历，请构造二叉树并返回其根节点。</p></blockquote><div class="note note-warning">            <p>二叉树的题目，卡壳的几率会比较大一些！递归经常想到但是实现困难🤨🤨</p>          </div><p>这题其实就是利用前序中序遍历的规律，结合哈希表存储来解答，实现逻辑和<ahref="https://august6676.github.io/2025/01/01/hot100-Twice/#%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">108.将有序数组转换为二叉搜索树</a>其实类似，中间有一个<code>preIndex</code>需要使用引用传递，有点小绕。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span>&#123;<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; inMap;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; inorder.<span class="hljs-built_in">size</span>();i++) <br>        inMap[inorder[i]] = i;<br>    <span class="hljs-type">int</span> preIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">build</span>(preorder,inorder,preIndex,<span class="hljs-number">0</span>,inorder.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>,inMap);<br>&#125;<br><br><span class="hljs-function">TreeNode* <span class="hljs-title">build</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder,vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder,<span class="hljs-type">int</span>&amp; preIndex,<span class="hljs-type">int</span> inStart,<span class="hljs-type">int</span> inEnd,unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp; inMap)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (inStart &gt; inEnd) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    <br>    <span class="hljs-type">int</span> rootValue = preorder[preIndex];<br>    preIndex++;<br>    <br>    TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(rootValue);<br>    <span class="hljs-type">int</span> inIndex = inMap[rootValue];<br>    <br>    root-&gt;left = <span class="hljs-built_in">build</span>(preorder,inorder,preInedx,inStart,inIndex - <span class="hljs-number">1</span>,inMap);<br>    root-&gt;right = <span class="hljs-built_in">build</span>(preorder,inorder,preIndex,inIndex + <span class="hljs-number">1</span>,inEnd,inMap);<br>    <br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="路径总和-iii">437. 路径总和 III</h3><blockquote><p>给定一个二叉树的根节点<code>root</code>，和一个整数<code>targetSum</code>，求该二叉树里节点值之和等于<code>targetSum</code>的路径的数目。路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p></blockquote><p>两个递归在，一个保证以任何节点为起点，一个从任何节点找到路径。</p><p>二叉树卡住不少了QAQ <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pathSum</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> targetSum)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(root,targetSum);<br>    <br>    <span class="hljs-built_in">pathSum</span>(root-&gt;left,targetSum);<br>    <span class="hljs-built_in">pathSum</span>(root-&gt;right,targetSum);<br>    <br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* root,<span class="hljs-type">int</span> targetSum)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (root-&gt;val == targetSum) count++;<br>    <br>    <span class="hljs-built_in">dfs</span>(root-&gt;left,targetSum - root-&gt;val);<br>    <span class="hljs-built_in">dfs</span>(root-&gt;right,targetSum - root-&gt;val);<br>&#125;<br></code></pre></td></tr></table></figure></p><div class="note note-warning">            <p>2025年2月12日元宵节☺️，今天整理一下过年期间做的几道题，明显好久不做手感下降了，以后每日保持做题要有良好手感！</p>          </div><h3 id="二叉树的最近公共祖先">236. 二叉树的最近公共祖先</h3><blockquote><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x的深度尽可能大（一个节点也可以是它自己的祖先）。”</p></blockquote><p>像本人对于递归类的题目，往往不太能得心应手，只要稍微难一下就想不到，但是这一题可以使用哈希表记录父节点的方式解决。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp">unordered_map&lt;<span class="hljs-type">int</span>,TreeNode*&gt; fathers; <span class="hljs-comment">// 记录下自己的祖先</span><br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">bool</span>&gt; record;<br><span class="hljs-function">TreeNode* <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;<br>    fathers[root-&gt;val] = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-built_in">dfs</span>(root);<br>    <br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        record[p-&gt;val] = <span class="hljs-literal">true</span>;<br>        p = fathers[p-&gt;val];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (q != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (record[q-&gt;val] == <span class="hljs-literal">true</span>) <span class="hljs-keyword">return</span> q;<br>        <span class="hljs-keyword">else</span> q = fathers[q-&gt;val];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (root-&gt;left) &#123;<br>        fathers[root-&gt;left-&gt;val] = root;<br>        <span class="hljs-built_in">dfs</span>(root-&gt;left);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (root-&gt;right) &#123;<br>        fathers[root-&gt;right-&gt;val] = root;<br>        <span class="hljs-built_in">dfs</span>(root-&gt;right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="腐烂的橘子">994. 腐烂的橘子</h3><blockquote><p>在给定的 m x n 网格 grid 中，每个单元格可以有以下三个值之一： 值 0代表空单元格； 值 1 代表新鲜橘子； 值 2 代表腐烂的橘子。每分钟，腐烂的橘子 周围 4 个方向上相邻 的新鲜橘子都会腐烂。 返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。</p></blockquote><p>像这道题，使用四个方向的directions数组把条件合并就会比较合适，同时涉及到前后都要取出元素，用<code>queue</code>也会比较方便。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp">   <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">orangesRotting</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>    <span class="hljs-type">int</span> m = grid.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> n = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>    <br>    <span class="hljs-type">int</span> clean = <span class="hljs-number">0</span>;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-number">1</span>) clean++;<br>            <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-number">2</span>) q.<span class="hljs-built_in">push</span>(&#123;i,j&#125;);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (clean == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (q.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <br>    <br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; directions = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;&#125;;<br>    <span class="hljs-type">int</span> time = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> newRot = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> size = q.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size;i++) &#123;<br>            <span class="hljs-keyword">auto</span>[x,y] = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; dir: directions) &#123;<br>                <span class="hljs-type">int</span> nx = x + dir[<span class="hljs-number">0</span>];<br>                <span class="hljs-type">int</span> ny = y + dir[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (nx &gt;= <span class="hljs-number">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class="hljs-number">0</span> &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] == <span class="hljs-number">1</span>) &#123;<br>                    grid[nx][ny] = <span class="hljs-number">2</span>;<br>                    newRot++;<br>                    clean--;<br>                    q.<span class="hljs-built_in">push</span>(&#123;nx,ny&#125;);<br>            &#125;<br>        &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (newRot) time++; <span class="hljs-comment">// 这里 只有有新的橘子腐烂的时候 time才增加 否则其实已经结束不需要++</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> clean == <span class="hljs-number">0</span> ? time : <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="课程表">207. 课程表</h3><blockquote><p>你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须先学习课程 bi 。 例如，先修课程对 [0, 1] 表示：想要学习课程 0，你需要先完成课程 1 。请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回false 。</p></blockquote><p>题目其实是拓扑排序，使用的算法<strong>是基于入度的算法（Kahn算法）</strong>：</p><ul><li>初始化一个入度为0的顶点队列。</li><li>依次从队列中取出顶点，将它们添加到拓扑排序序列中。</li><li>对于每个被处理的顶点，将其所有邻接点的入度减1。如果某个邻接点的入度变为0，将其加入队列。</li><li>重复此过程，直到所有顶点被处理。</li><li>如果队列为空，但图中还有顶点未被处理，说明图中有环，无法进行拓扑排序。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-type">int</span> numCourses, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;<br>    <span class="hljs-comment">// 判断图中是否存在环 拓扑排序</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">adj</span>(numCourses); <span class="hljs-comment">// 存储边</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inDegree</span><span class="hljs-params">(numCourses,<span class="hljs-number">0</span>)</span></span>; <span class="hljs-comment">// 入度数组</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; pre: prerequisites) &#123;<br>        adj[pre[<span class="hljs-number">1</span>]].<span class="hljs-built_in">push_back</span>(pre[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 每个节点存储从该节点开始的边</span><br>        inDegree[pre[<span class="hljs-number">0</span>]]++;<br>    &#125;<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-comment">// 将所有入度为0的节点加入队列 代表起始节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses;i++) &#123;<br>        <span class="hljs-keyword">if</span> (inDegree[i] == <span class="hljs-number">0</span>) q.<span class="hljs-built_in">push</span>(i);<br>    &#125;<br><br>    <span class="hljs-type">int</span> visited = <span class="hljs-number">0</span>; <span class="hljs-comment">// 已经访问的节点数</span><br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> curr = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        visited++;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> next: adj[curr]) &#123;<br>            inDegree[next]--;<br>            <span class="hljs-keyword">if</span> (inDegree[next] == <span class="hljs-number">0</span>) q.<span class="hljs-built_in">push</span>(next);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> visited == numCourses; <span class="hljs-comment">// 访问的节点数等于总课程数 说明无环</span><br>&#125; <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OJ相似题型总结</title>
    <link href="/2024/12/20/OJ%E7%9B%B8%E4%BC%BC%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2024/12/20/OJ%E7%9B%B8%E4%BC%BC%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="dynamic-programming">Dynamic Programming</h2><p>对于hot100中的多维动态规划一类，有这么几道题，先处理最上面一行和最左一列，之后不断更新其他项，最后得到右下角为最终结果</p><ul><li><ahref="https://leetcode.cn/problems/unique-paths/description/?envType=study-plan-v2&amp;envId=top-100-liked">62.不同路径</a></li><li><ahref="https://leetcode.cn/problems/minimum-path-sum/description/?envType=study-plan-v2&amp;envId=top-100-liked">64.最小路径和</a></li><li><ahref="https://leetcode.cn/problems/edit-distance/?envType=study-plan-v2&amp;envId=top-100-liked">72.编辑距离</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chronicles</title>
    <link href="/2024/11/29/Chronicles/"/>
    <url>/2024/11/29/Chronicles/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="efca681e25359c31e3986d17ae9458a21c7629b7d106e762585a2d1db2915430"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
      <tag>Future</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>November个人随想</title>
    <link href="/2024/11/06/November%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/11/06/November%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2c18f76f6afac5a8250d9ebdf9512e66ade7d4278e396d09d1bcfadc033f8036">4630436162ade97ba2718b7d0c4b3b63b02032df7585013dea9d3f1a7eb2ecc08444dabdcb2a97058273743e0de8b54e93023f8c1f8086f7b46c7dec5266cf39f0016c84f5d86647a3b800b1501064611aae052e0cb8bb894295d69cdb3a60cf574266b6424d1e320214302e3ad623c9555ede33bc93d38fa1bea5d8a134c9334e3bea8801fcb13006d776f83daf6c41aa00987650ba8bb7f8e698dfb5571a5fadad69d1fabb6f395dbc53f1b9669e715e654b0bda2528caabc81db7a141c64d6ae068f021f1b21c89da5b80574aeea529683d6d2cbd5b4b25f1d34c5945d4dfd14128e02e8c2dba1f051caddbdc028d145955cad111bb44d9b499124ce609895dd9537146798602c9f4c52bee5dddb9ceceb205668b64afb43cfe80f501788c6830969c8f899c24b15ca655956b3b0c7b62ea157d034011a840fdc2ade09be63524217e01d60d4da46ecaf79f3d386bc79007532132ca4619b5041333aff98b98ecf43e38ecbc0a67b201c672b633515a93eed153bb6a5c1af0c5f9500330c29b02afef443af8c32ed31fa652740429ecc97b1974a79af2716a6c8789e16f55d660c383d986d9f4ac667857c1f7c7036345f34721fdd0c9f965fd586957c013bd258d1e17158e6aab887b274db432f06befa85b373fea0a4f6b824638cfbb318991b474a5a1cab173f5d064c360a77bc9e91bf6f0541178bfb7d0e03eca015818b76994b18245f4ce0d672c63fb69267c8ffecae37b342cd6c398ff598fdabff79df6352f01df29e1bbafab18bf4c23d83b9397f74236bc24d27c3db95c76b542fd6ab75e77fc10e68ff4cce3e89f802ec7588936d1dcf1805d82ce58cf6852566b223ad0e5e4a72581b88aab7d440c0a12dda7959f2c4e58dbac6d14a2b9587fbb90e26b9e3f110b9da4512226d1638df9ea2c530af33f2cef87f56cdea03b5f76628bf7b8210089587aa1b6fe29ab03b76eb8d70097cefacf6f27eebc8805e323a907aae3a9eb3dcb7f61846c88f51e493d8d82978177a6ebe2a506c314bad708d9041305f4e0ba6f6bc2a9c53eb9c963934b380013345db05d012ecb093a0682d4d2ac8ee25a58799b6e10c438f5be1af959cb603c915f6644a0aa512d8bc1f10f36b60a39d8cd37e43db86e497100dd5c9b6ede0d1b4645aaa4419fd7aeb57aa2dfa27fa51f722543c1f493d2371d074ba61c65bd0aa975281dc9542fad96daac60893acdf7768a70d5d7852c21bd85d90bc2d8f9c82bc49916c0e382b7b9f442e4340459abeacb2a2241703f2490dc8931cbfc40bd1f7732bbeb4bd8f2d892618ce632b9680cb6ed5261662b8fb67fa24cefa46c7380531382ba1fb78400be8f886358ec2887f8d5a164411b308bbfc8640c8cef3c9ba36839f036caa5ec0153655b6c8783e53b2a04d0f4ec4975bf95c0288c7d8a0d58a1c6c83ed53f015affb65fec30453b5a5d3851010e23ac17e8d9ba6dfeb3e3a51bb22cdf941f320001e4c8eb76cbbc903102900276de8811f0dad8333373f6d80a60a8a6c1b9978f2bd19bf62a4d02a46f3f53d24cbacea99abad5a4e5d3f7598eb229a904c3b4321860ed66b54013b7272c0332bac5c7b757f93ac9397d9896fcd9569a087e0a08016cd5ce9fef116e9cdac546ebea5bf46c6bfe49783fa5c149c57352f4750dcd3c4385ddabb6503039814cec55694a453c42e5b69e86aa2fbd52d6ed8e90db91d30238776e339c2a58871d42de948064f45c22c47cb8fffe787b39b976a0a18037cb6b2a4556cdc4228a75c5f4dc0fdd045aaf2ac2f0e15587462705f4c0a6504cd70e8686fdae618aba308b07cf600b341927f29338c268c56e6ba69a77d8cd460de338d2e15fa442a613515319ac76d258de9c5440dff172c145560c9169430071f74a96d63c71f68f0c3af27470b33c7fd97fa78b485dc97d4ff21c65da7bc8b94dbb89d8f5e715bcb9542e5c3dd3f0416618f1124c2032b4a5b48c193beb089da00d56f630e9c2bee1de109cabe1ba03660a9957121788ec78a6d82b6acb3dbcd4a1366c38f5d9b933eced0e00a10a96c8daf719a6b9a7af1b04558e0d593b97c2a8758abbd8346d228afe15d404e8350ecb9454aa8f38ae05ea974f26067621184a9d321b2e1afcd6d889e28b80ed94c14f26886658242757948ce2f29bf591cc325d4b634b4db1035d5a85b865948c41234d637755806a7563cd1bdf5ce1d739f7b28777172ca3af402dd98e3fece7f0f14100159a147b313354273d8137c4d92206fb8a527794e12f28176e8b8f4d202520b8cfc3bbb7918089419863d056c6ad7124c0e12e2e4876b8feb1e051a47a9b1fd9ce97c573cab7a59de4fd00291a9cacc36526c4cf14492fd797517de96524aa8812cec4c40631d1e6b9450d1141ff5bee837e473038c1c9039f4595550e2e5f6857493cdad254cea6bb9780322b291d9e585e328bb784809e863445e87e71f434425a33eaf9fd2c30d99e3804c7f6bc9f2aebf3bb19cacb9593ae2362fd8155c847e3a0ffa873e35ce3b3879da4c3fee3831857cf8bb2e51fbf43b70d4492cd9eaf70a6a5661e793f3bbee80aafb234c0490bc213236bc93d32e862e147461fb4586fe97544fb0d527a148c43500fbafafcc71011ac6de08f4b997b2d29881d6f47ac0d842b8102060839283e2552172dde6c8017dbd42a3a95c1de776fd15be80c78a9e5b0da555d5c5fa8104c960f8aa387ef2b3673cb4b3013316201642f7114a78cbca944eb50206d16508d57fdf663040e22ecd25f9db368aec38cc5ff59b4bcf9f98eda05494c7cf2c0fea42799a9ec059e1ba56d83db3df0e3e158fe1cbb205cd24e87125292f3a0b76c5711d58bf20bb687f4b2dd118370e38ca4dce2d4467099ab49c6c67d862c9bf645dd99ba48cc77abf9594b76bad338fe1ce61aa1e84b2af65836d51d69a18f8238c9a9cca4ed18defa8de47cd4b9dc87ac5a64ac1e984d96e962110da7637ca31390e124c131ebbe2a028c9585a1b32622e781ce9ffd4df424e2c185dba6a34f07eb5046ac141a5159168d5ef4dfaad1d5517332e43afd0f30b4d8b362097c8b2c21dfaadb63558b5c23fe69abc66180305e36e1bbe06acb74034650714efbe9ba9a219c186f4836808d8537d4a9a544959366bb014f532b94fc428321969fca6f155371470edf8fd20977e7ac2009640ec1b5943b565966ec34b4d1582dada45792024c20ccf579e461e0addf69c6226d45be9e0ad0a00bbdc0c3be0c289546c8a323110ddba5cf4492057fe9da349e2be5925155485e138b7e638cd91fb22437445286912b73abae1b343dc78f9fcd3976bb92b073729be5b6e305a07e706c02c7dbe5d6af4f482fa154</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.env文件和.gitignore</title>
    <link href="/2024/10/26/env%E6%96%87%E4%BB%B6%E5%92%8C-gitignore/"/>
    <url>/2024/10/26/env%E6%96%87%E4%BB%B6%E5%92%8C-gitignore/</url>
    
    <content type="html"><![CDATA[<p>当我们在使用<code>API_KEY</code>、数据库密码，或者是在设置<code>http_proxy</code>的时候，往往不希望把这样的隐私信息上传到github中，那么怎么忽视这些信息呢？</p><p>有一个办法是使用<strong>.env文件</strong>来存储这些敏感信息。具体步骤如下所示：</p><ol type="1"><li>创建一个<code>.env</code>文件，并添加内容： <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile">API_KEY=your_api_key_here<br>PASSWORD = PASSWWWW<br></code></pre></td></tr></table></figure></li><li>安装<code>python-dotenv</code>库： <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">pip install python-dotenv<br></code></pre></td></tr></table></figure></li><li>在代码中加载<code>.env</code>文件： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv<br><span class="hljs-keyword">import</span> os<br><br>load_dotenv()  <span class="hljs-comment"># 加载.env文件</span><br>api_key = os.getenv(<span class="hljs-string">&quot;API_KEY&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>确保<code>.env</code>文件不被上传到代码仓库。可以在<code>.gitignore</code>中添加：<code>.env</code></li></ol><p>这样，你随便push、pull也不要担心隐私泄露啦☺️~</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微调策略对比</title>
    <link href="/2024/10/19/%E5%BE%AE%E8%B0%83%E7%AD%96%E7%95%A5%E5%AF%B9%E6%AF%94/"/>
    <url>/2024/10/19/%E5%BE%AE%E8%B0%83%E7%AD%96%E7%95%A5%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>NLP大作业，选择了一个关于模型微调的题目，浅学了一下模型的微调策略，在这里介绍两种策略：<strong>全量微调</strong>和<strong>LoRA</strong>。</p><h2 id="why-fine-tuing">why fine-tuing?</h2><p>当大模型完成pretrain之后，它在各个方面都具备了一定的能力。但是比方说我想要提升模型在某一个方面的能力，例如代码能力，我就需要对模型进行<strong>微调</strong>，让模型的代码能力更加优秀。</p><p>LLM的背后是海量的参数，这些参数以矩阵的形式存储，我们在微调的时候，其实就是在改变<strong>某些参数</strong>。</p><p>为什么是“微调”，因为我们想要改变一小部分的参数，把模型的某些性能提上去，但不想要那些已经做的满意的性能变差，也就是不宜改变大量的参数。</p><h2 id="全量微调">全量微调</h2><p>比方说有矩阵W： <span class="math display">\[W = \begin{pmatrix}W_{11} &amp; W_{12} &amp; \cdots &amp; W_{1m} \\W_{21} &amp; W_{22} &amp; \cdots &amp; W_{2m} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\W_{n1} &amp; W_{n2} &amp; \cdots &amp; W_{nm}\end{pmatrix}\]</span></p><p>假设微调之后的结果是： <span class="math display">\[W&#39; = \begin{pmatrix}W_{11} &amp; W_{12} &amp; \cdots &amp; W_{1m} \\W_{21} &amp; W_{22} &amp; \cdots &amp; W_{2m} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\W_{n1} &amp; W&#39;_{n2} &amp; \cdots &amp; W&#39;_{nm}\end{pmatrix}\]</span>也就是说，只有两个参数有变动，其他的参数其实都没变化。即使是这样，我们也可以理解成，这整个矩阵加上了一个新的稀疏矩阵（很多0）：<span class="math display">\[\Delta W = \begin{pmatrix}0 &amp; 0 &amp; \cdots &amp; 0 \\0 &amp; 0 &amp; \cdots &amp; 0 \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\0 &amp; ∆W&#39;_{n2} &amp; \cdots &amp; ∆W&#39;_{nm}\end{pmatrix}\]</span></p><p><span class="math display">\[W&#39; = W + \Delta W\]</span></p><p>这就是<strong>全量微调</strong>，我们在该过程中其实对所有参数都进行了更新。很明显，该方法存在冗余计算问题，带来了大量的不必要的浪费。</p><h2 id="lora微调策略">LoRA微调策略</h2><p>所以，未为了解决全量微调不必要的弊端，<strong>LoRA微调策略</strong>诞生了，它引入了<strong>低秩分解技术</strong>（其实就素线性代数哇）。</p><p>要求使用包含行间数学公式：线代及格的小伙伴们都知道，一个矩阵 $ A^{100 × k} $ 和一个矩阵 $ B ^{k × 100}$ 相乘得到的矩阵是 $ W ^{100 ×100} $。</p><p>那么我们在全量微调中使用的增量矩阵 $ ∆ W $也可以用同样的方式表示：<br /><span class="math display">\[\Delta W = A_{\Delta} B_{\Delta}\]</span> 也就是说： <span class="math display">\[W = W_0 + \Delta W = W_0 + A_{\Delta} B_{\Delta}\]</span></p><p>基于这个思路，如果我们要更新的参数矩阵$ W ^{m × n}$非常大，但我们也使用两个小矩阵相乘，这样需要调整的参数量就降下来了。</p><p><span class="math display">\[m \cdot n \gg m \cdot k + k \cdot n \quad (\text{where} \quad m, n \ggk)\]</span></p><p>这样大大减少了需要调整的参数量，并有效减少了计算复杂度，但是，这样的微调效果和全量微调的效果相比，会怎么样呢？(To be continued...)</p><h2id="记一次llamafactory微调失败的学习过程">记一次LlamaFactory微调失败的学习过程</h2><p>我在使用LlamaFactory框架对<code>deepseek-coder-6.7b-instruct</code>进行sft指令微调的时候，我所使用的数据集一个80k一个260k，但是，我只跑了36分钟就跑完了。why？</p><p>经过查找，是在<code>yaml</code>文件中的配置出了问题： <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">### dataset</span><br><span class="hljs-attr">dataset:</span> <span class="hljs-string">Magicoder-OSS-Instruct-75K,ULtraInteract_sft</span><br><span class="hljs-attr">template:</span> <span class="hljs-string">deepseekcoder</span><br><span class="hljs-attr">cutoff_len:</span> <span class="hljs-number">1024</span><br><span class="hljs-attr">max_samples:</span> <span class="hljs-number">1000</span><br><span class="hljs-attr">overwrite_cache:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">preprocessing_num_workers:</span> <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure>在这里，我使用了默认配置，<code>max_samples</code>设置成了1000，也就是对我所使用的每一个数据集，都仅仅使用了1000条数据，那么一共就使用了2000条数据而已，这速度当然没得说😂😂</p><p>理解下这些小项的意思：</p><ul><li><code>template</code>:指代数据处理时一种特殊的格式，决定了如何把原始数据转换为模型可以接受的输入格式，包括一些specialtokens等，根据<ahref="https://github.com/hiyouga/LLaMA-Factory#supported-models">supported-models</a>找到自己模型对应的template，当然也可以在<code>template.py</code>中定义自己的template。</li><li><code>cutoff_len</code>:定义文本最大长度是多少<strong>token</strong>，如果超过这个长度将会被截断（切记是token而不是词语数量）</li><li><code>max_samples</code>:指在训练过程中最多使用的样本数（但在实际操作中发现其实是对每一个数据集所摘取的最大样本数）</li><li><code>overwrite_cache</code>: 是否覆盖之前的数据处理缓存。如果设置为<code>true</code>，则在处理数据时会重新生成缓存，不使用之前生成的缓存。</li><li><code>preprocessing_num_workers</code>:数据预处理时使用的工作线程数，默认指定为 16 个并行的处理线程。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">### output</span><br><span class="hljs-attr">output_dir:</span> <span class="hljs-string">/data1/magicoder_ultraInteract_sft</span><br><span class="hljs-attr">logging_steps:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">save_steps:</span> <span class="hljs-number">500</span><br><span class="hljs-attr">plot_loss:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">overwrite_output_dir:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li><code>logging_steps</code>:每隔10步记录一次日志信息，在log中体现如下： <imgsrc="https://ice.frostsky.com/2024/10/19/1ce14a4e366bae0bdc8678e731e0a863.png"alt="每十条挤在一起的日志" /></li><li><code>save_steps</code>:每隔500步保存一下模型的checkpoint，那如果你的总共的step大于500，就会生成<code>checkpoint-500</code>,<code>checkpoint-1000</code>这样的文件夹，如果小于500，也会成成一个<code>checkpoint-步数</code>的文件夹，其实最终结果会保存两次。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">### train</span><br><span class="hljs-attr">per_device_train_batch_size:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">gradient_accumulation_steps:</span> <span class="hljs-number">8</span><br><span class="hljs-attr">learning_rate:</span> <span class="hljs-number">1.0e-4</span><br><span class="hljs-attr">num_train_epochs:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">lr_scheduler_type:</span> <span class="hljs-string">cosine</span><br><span class="hljs-attr">warmup_ratio:</span> <span class="hljs-number">0.1</span><br><span class="hljs-attr">bf16:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">ddp_timeout:</span> <span class="hljs-number">180000000</span><br></code></pre></td></tr></table></figure><ul><li><code>per_device_train_batch_size</code>:每个设备上一次处理的样本数量，称为<strong>批量大小</strong>。它决定了每次训练时每个设备上处理多少条数据。</li><li><code>gradient_accumulation_steps</code>:模型在进行权重值的更新之前会累计8次的梯度。也就是说，经过8个批次的数据后模型才会更新模型的权重。</li><li><code>num_train_epochs</code>:表示数据集被完整训练一次。每个<code>epoch</code>代表模型对整个训练数据集的完整处理。更多的<code>epoch</code>通常意味着更充分的训练，但过多的<code>epoch</code>可能导致<strong>过拟合</strong></li><li><code>lr_scheduler_type</code>:学习率调度器类型，在这里指定使用<strong>余弦退火调度（cosine learningratescheduler）</strong>，当然也有其他的学习率调度方式。在整个训练过程中，学习率会先快速下降，然后以更平缓的速度逐渐减少（类似于余弦函数1/4的下降趋势）。</li><li><code>warmup_ratio</code>:学习率的预热比例，表示在训练开始时，前10%的训练步骤用于从0逐渐增大学习率到设定的值。学习率预热有助于稳定训练的早期阶段，避免学习率太大使得模型更新过快。<ahref="https://www.baeldung.com/cs/learning-rate-warm-up">这篇文章</a>讲的不错~<imgsrc="https://www.baeldung.com/wp-content/uploads/sites/4/2023/03/lr-schedule.png"alt="lr-schedule.png" /></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">### eval</span><br><span class="hljs-attr">val_size:</span> <span class="hljs-number">0.1</span><br><span class="hljs-attr">per_device_eval_batch_size:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">eval_strategy:</span> <span class="hljs-string">steps</span><br><span class="hljs-attr">eval_steps:</span> <span class="hljs-number">500</span><br></code></pre></td></tr></table></figure><ul><li><code>val_size</code>: 验证集的比例，表示从整个数据集中抽取 10%作为验证集（validation set）。</li><li><code>per_device_eval_batch_size</code>:每个设备用于评估时处理的样本数量。</li><li><code>eval_strategy</code>:评估策略，表示评估是在训练过程中的<strong>固定步数</strong>之后进行（而不是每个epoch结束时）。</li><li><code>eval_steps</code>:如果选择了按步评估策略(<code>eval_strategy: steps</code>)，eval_steps决定了评估的频率。这个数值可以调节评估频次，较小的数值会更频繁地评估模型，但也会占用更多的时间，在本例中，如果总步数未达到500步，那么就在训练结束之后评估。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fine-tuning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再学机器学习和深度学习</title>
    <link href="/2024/10/11/DL/"/>
    <url>/2024/10/11/DL/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2a0c814ce1413a4b4061a47d5386f93b77898125893847cc704196556e9c1f4a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>October个人随想</title>
    <link href="/2024/10/08/October%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/10/08/October%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="3313a88a1eee04e256f02d12b0050599a33752abdbc4f4dd6802a3dc0f190962"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习</title>
    <link href="/2024/09/30/Docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/09/30/Docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>很久之前就下载了Docker，但是因为种种原因一直搁置，也没有学习，今天一起来学一学吧~😄😄## Docker介绍<strong>Docker</strong>是一个开源平台，允许开发者打包、分发和运行应用程序<strong>容器</strong>，使用<strong>容器</strong>来隔离应用程序和以来项，使得应用能够在不同环境中一致运行。</p><p>在和Skyee聊天的时候，她说她用的是<strong>DockerCompose</strong>，这是一个工具，使得用户可以一次性启动、停止和管理多个Docker容器，而不需要单独管理每个容器，具体内容没有详细看，在这里先以Docker为主！</p><h2 id="重要概念">重要概念</h2><ul><li><strong>镜像(Image)</strong>:镜像是一个只读的模板，用于创建<strong>容器</strong>，可以从<strong>DockerHub</strong>等公共库中下载，也可以通过<strong>Dockerfile</strong>自定义构建。比方说我从DockerHub下载的Centos、Ubuntu等都称为镜像。</li><li><strong>容器(Container)</strong>:容器是<strong>镜像</strong>的运行实例，可以启动、停止、删除，是一个轻量级的、独立的可执行环境。</li><li><strong>仓库(Repository)</strong>:仓库是<strong>镜像</strong>的存储库，可以上传、下载镜像，也可以自定义镜像。可以是本地的，也可以是<strong>DockerHub</strong>等公共库。</li><li><strong>Dockerfile</strong>:Dockerfile是一个文本文件，用于定义如何构建镜像，用户使用dockerfile自定义镜像。</li></ul><p>模仿着画了一张图，展示容器和镜像的关系： <imgsrc="https://ice.frostsky.com/2024/09/30/67cf83690f2e153549870e881e07aab9.png"alt="Docker学习-容器和镜像的关系" />在这个图中，更细致地指出了Docker镜像是由多个只读层组成的，容器是在镜像之上启动的，会在镜像之上创建一个可读写层，容器的更改都发生在这一层，不会影响下面的只读层。</p><h2 id="常用命令">常用命令</h2><h3 id="设置镜像">设置镜像</h3><p>在国内使用Docker时，需要设置镜像源，不然会很慢，但是我配置了镜像源之后还是偶尔出现超时错误，或许和我开启了VPN有关，不过总而言之还是需要设置镜像源。我使用的Docker Desktop，在settings -&gt; Docker Engine中添加如下内容：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure> ### 下载镜像 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull &lt;image&gt;<br>docker pull &lt;image&gt;:&lt;tag&gt;<br><span class="hljs-comment"># 示例</span><br>docker pull ubuntu:18.04<br></code></pre></td></tr></table></figure> <imgsrc="https://ice.frostsky.com/2024/09/30/6cf6b6e18898c032c49d347f65fe5f7b.png"alt="Docker学习-下载报错示例" /> <imgsrc="https://ice.frostsky.com/2024/09/30/3b4db79d0d03ef2c4deb7352b5b15ba9.png"alt="Docker学习-正常下载示例" /></p><h3 id="查看镜像信息">查看镜像信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br>docker images &lt;image&gt;<br><span class="hljs-comment"># 示例</span><br>docker images ubuntu<br></code></pre></td></tr></table></figure><p><imgsrc="https://ice.frostsky.com/2024/09/30/0cb47e0f38d7ed863c932ae8acad4ecf.png"alt="Docker学习-查看镜像信息" /> - <strong>REPOSITORY</strong>:镜像的名称，表示该镜像所属的仓库。 - <strong>TAG</strong>:镜像的标签，表示该镜像的版本。 - <strong>IMAGE ID</strong>:镜像的ID，表示该镜像的唯一标识。 - <strong>CREATED</strong>:镜像的创建时间。 - <strong>SIZE</strong>: 镜像的大小，以字节为单位。</p><h3 id="删除镜像">删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi &lt;image&gt;<br><span class="hljs-comment"># 示例</span><br>docker rmi ubuntu:18.04<br></code></pre></td></tr></table></figure><p><code>docker rmi</code>命令用于删除一个或多个镜像，image参数可以是镜像的ID或者名称，多个镜像之间用空格隔开。</p><h3 id="新建启动容器">新建启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --it --<span class="hljs-built_in">rm</span> &lt;image&gt; &lt;<span class="hljs-built_in">command</span>&gt;<br><span class="hljs-comment"># 示例</span><br>docker run --it --<span class="hljs-built_in">rm</span> ubuntu:18.04 /bin/bash<br>docker run --it --<span class="hljs-built_in">rm</span> ubuntu:18.04 /bin/bash -c <span class="hljs-string">&quot;echo hello world&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>--it</strong>: 启动容器并进入交互式shell。</li><li><strong>--rm</strong>:退出后删除这个容器，当然没有这句话就不删除。</li></ul><figure><imgsrc="https://ice.frostsky.com/2024/09/30/fcd20a18d1030093004d3560d6bb601d.png"alt="Docker学习-新建容器" /><figcaption aria-hidden="true">Docker学习-新建容器</figcaption></figure><h3 id="启动和停止容器">启动和停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start &lt;container&gt;<br>docker stop &lt;container&gt;<br></code></pre></td></tr></table></figure><p>这里的container指容器的ID或者名称，可以通过<code>docker ps</code>命令查看。<imgsrc="https://ice.frostsky.com/2024/09/30/be53fdd6929408c7e6c704ed60c3cca4.png"alt="Docker学习-启动容器" /> - <strong>Container ID</strong>:容器的ID，唯一标识符。 - <strong>Image</strong>: 容器使用的镜像。 -<strong>Command</strong>: 容器启动时执行的命令。 -<strong>Status</strong>: 容器的运行状态。 - <strong>Ports</strong>:容器映射的端口。 - <strong>Names</strong>: 容器的名称。</p><h3 id="删除容器">删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> &lt;container&gt;<br></code></pre></td></tr></table></figure><p><code>docker rm</code>命令用于删除一个或多个容器。container参数可以是容器的ID或者名称，多个容器之间用空格隔开。<imgsrc="https://ice.frostsky.com/2024/09/30/d878a86dc0823c56123d2811bf3afb47.png"alt="Docker学习-删除容器" /></p><h3 id="根据dockerfile创建镜像">根据dockerfile创建镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t &lt;image&gt;:&lt;tag&gt; &lt;path&gt;<br></code></pre></td></tr></table></figure><ul><li><code>-t image</code>:<code>-t</code>选项用来为新创建的镜像指定一个名称<code>&lt;image_name&gt;</code></li><li><code>path</code>: 表示Dockerfile所在的路径</li></ul><p>不过该方法还没有实现过，dockerfile也很有讲究，那就To becontinued~</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git几步曲</title>
    <link href="/2024/09/30/git%E5%87%A0%E6%AD%A5%E6%9B%B2/"/>
    <url>/2024/09/30/git%E5%87%A0%E6%AD%A5%E6%9B%B2/</url>
    
    <content type="html"><![CDATA[<p>这里记录一些git的非常基本基本的操作，主要用于管理个人的小项目。没错非常简单，但我就是记不住然后每次左向箭头找到历史。。</p><h2 id="git上传基本操作">Git上传基本操作</h2><h3 id="初始化git仓库">初始化git仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><p>这个命令会在当前目录下创建一个git仓库，并初始化一个空的提交记录，只需要在最初始的时候使用该命令。</p><h3 id="检查git状态">检查git状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>这个命令会显示工作目录和暂存区的状态，包括哪些文件已更改、哪些文件在暂存区中等信息。</p><h3 id="添加文件到暂存区">添加文件到暂存区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add &lt;file&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把指定的文件添加到暂存区，等待下一次提交。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure>这个命令会把当前目录下的所有文件添加到暂存区，等待下一次提交。</p><h3 id="提交更改">提交更改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;commit message&quot;<br></code></pre></td></tr></table></figure><p>这个命令会把暂存区的更改提交到本地仓库，并添加提交信息。</p><h3 id="推送到远程仓库">推送到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin &lt;分支名&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把本地仓库中的更改推送到远程仓库，并指定分支名。</p><h2 id="git切换新分支">Git切换新分支</h2><h3 id="创建新分支">创建新分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b &lt;branch name&gt;<br></code></pre></td></tr></table></figure><p>这个命令会创建一个新的分支，并切换到该分支。</p><h3 id="查看当前分支">查看当前分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br></code></pre></td></tr></table></figure><p>带有<code>*</code>的分支是当前所在分支。</p><h3 id="添加更改到暂存区提交更改">添加更改到暂存区&amp;提交更改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add &lt;file&gt;<br>git add .<br>git commit -m &quot;commit message&quot;<br></code></pre></td></tr></table></figure><h3 id="将新分支推送到远程仓库">将新分支推送到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u origin &lt;branch name&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把本地仓库中的更改推送到远程仓库，<code>-u</code>参数会设置默认的远程分支，以便下次推送时省略分支名。</p><p>最后，可以点击推送之后的git链接，看看提交记录，确定是否成功提交😌</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>learn_about_humanEval</title>
    <link href="/2024/09/18/learn-about-humanEval/"/>
    <url>/2024/09/18/learn-about-humanEval/</url>
    
    <content type="html"><![CDATA[<p>在这里记录一下评估模型代码生成能力常用的Benchmark：<strong>humanEval</strong></p><p>HumanEval 数据集是 OpenAI为评估代码生成模型而创建的一个数据集，专门用于测试模型的编程能力。该数据集中一共有164条数据，均以python书写。</p><h3 id="数据格式">数据格式</h3><p>举例一条数据如下： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;task_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HumanEval/163&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;prompt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\ndef generate_integers(a, b):\n    \&quot;\&quot;\&quot;\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) =&gt; [2, 4, 6, 8]\n    generate_integers(8, 2) =&gt; [2, 4, 6, 8]\n    generate_integers(10, 14) =&gt; []\n    \&quot;\&quot;\&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;entry_point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;generate_integers&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;canonical_solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \&quot;Test 1\&quot;\n    assert candidate(10, 2) == [2, 4, 6, 8], \&quot;Test 2\&quot;\n    assert candidate(132, 2) == [2, 4, 6, 8], \&quot;Test 3\&quot;\n    assert candidate(17,89) == [], \&quot;Test 4\&quot;\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \&quot;This prints if this assert fails 2 (also good for debugging!)\&quot;\n\n&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>在<code>prompt</code>中，告诉了模型函数名、函数定义和预期输出，<code>entry_point</code>为函数名，<code>canonical_solution</code>提供了示例函数，<code>test</code>为测试用例。</p><h3 id="humaneval如何评测代码正确性">HumanEval如何评测代码正确性？</h3><p>在HumanEval中，评测的代码位于<code>execution.py</code>中，拼接程序如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Construct the check program and run it.</span><br>check_program = (<br>    problem[<span class="hljs-string">&quot;prompt&quot;</span>] + completion + <span class="hljs-string">&quot;\n&quot;</span> +<br>    problem[<span class="hljs-string">&quot;test&quot;</span>] + <span class="hljs-string">&quot;\n&quot;</span> +<br>    <span class="hljs-string">f&quot;check(<span class="hljs-subst">&#123;problem[<span class="hljs-string">&#x27;entry_point&#x27;</span>]&#125;</span>)&quot;</span><br>    )<br></code></pre></td></tr></table></figure>之后运行这个拼接之后的代码，<code>test</code>中包含了很多测试用例，模型需要判断是否通过所有测试用例，全部通过才代表<code>passed</code>。但是模型生成的代码并不完全是符合要求的格式：仅包含代码块，实际也会生成函数头，但经过检查发现这样没有影响评测的结果，why？如果函数头重复，那么生成的代码类似以下格式： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-comment"># 这个函数头重复了一遍</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has_close_elements</span>(<span class="hljs-params">numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>], threshold: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Check if in given list of numbers, are any two numbers closer to each other than</span><br><span class="hljs-string">    given threshold.</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.0, 3.0], 0.5)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has_close_elements</span>(<span class="hljs-params">numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>], threshold: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Check if in given list of numbers, are any two numbers closer to each other than</span><br><span class="hljs-string">    given threshold.</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.0, 3.0], 0.5)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> idx, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numbers):<br>        <span class="hljs-keyword">for</span> idx2, elem2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numbers):<br>            <span class="hljs-keyword">if</span> idx != idx2:<br>                distance = <span class="hljs-built_in">abs</span>(elem - elem2)<br>                <span class="hljs-keyword">if</span> distance &lt; threshold:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>METADATA = &#123;<br>    <span class="hljs-string">&#x27;author&#x27;</span>: <span class="hljs-string">&#x27;jt&#x27;</span>,<br>    <span class="hljs-string">&#x27;dataset&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">candidate</span>):<br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.2</span>], <span class="hljs-number">0.3</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.2</span>], <span class="hljs-number">0.05</span>) == <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>], <span class="hljs-number">0.95</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>], <span class="hljs-number">0.8</span>) == <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.0</span>], <span class="hljs-number">0.1</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">4.1</span>, <span class="hljs-number">5.1</span>], <span class="hljs-number">1.0</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">4.1</span>, <span class="hljs-number">5.1</span>], <span class="hljs-number">0.5</span>) == <span class="hljs-literal">False</span><br><br><br></code></pre></td></tr></table></figure>这是一个有趣的现象，说明即使模型生成的代码中包含了函数头，拼接后的代码仍然可以通过评测。这是因为Python的<strong>函数定义覆盖特性</strong>以及<strong>代码执行顺序</strong>允许这种情况下的正确执行。实际上，最终的有效定义是<code>completion</code>中的那个函数，因为它会覆盖掉<code>prompt</code>中的不完整定义。这个机制确保了模型生成的完整代码可以正确执行。</p><h3 id="评价指标-passk">评价指标 'Pass@k'</h3><p>HumanEval 使用 pass@k作为主要评估指标，它衡量的是模型生成代码在多次尝试中成功解决问题的概率。具体计算方式如下：- k = 1：模型只生成一个代码解决方案，评估该方案是否通过所有测试用例。 -k &gt; 1：模型可以生成多个候选代码，评估在这 k个候选方案中，至少有一个通过所有测试用例的情况。</p><h3 id="record-两天复现deepseek-on-humaneval-python">[Record]两天复现<code>DeepSeek on HumanEval-python</code>🤩</h3><p>在这里记录一下，由于项目需要，所以复现了一下DeepSeek在HumanEval上的测评。</p><p>复现使用的大模型是<code>DeepSeek-V2.5</code>，在这里并没有从Huggingface上下载开源大模型，只是使用API调用的方法进行评测。</p><p>首先clone下来<ahref="https://github.com/deepseek-ai/deepseek-coder">DeepSeek-Coder</a>的系列代码，阅读代码发现，他们在评测humanEval的时候，并不是单纯把prompt输入进去，而是对prompt进行了修改，增加了一段约束输出的提示：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_deepseekcoder_instruction</span>(<span class="hljs-params">languge: <span class="hljs-built_in">str</span>, question: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">return</span> <br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Please continue to complete the function. You are not allowed to modify the given code and do the completion only. Please return all completed function in a codeblock. Here is the given code to do completion:</span><br><span class="hljs-string">    ```&#123;&#125;</span><br><span class="hljs-string">        &#123;&#125;```</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>.strip().<span class="hljs-built_in">format</span>(languge.lower(), question.strip())<br></code></pre></td></tr></table></figure></p><p>下面需要面对的问题就是，在调用API接口的时候，两个关键的参数<code>temperature</code>和<code>top_p</code>怎么设定？<div class="note note-primary">            <ol type="1"><li>temperature控制模型生成的随机性或创造性。<ul><li>范围：通常在0到1之间（可以取大于1的值，但不常见）。</li><li>作用：<ul><li>当temperature值接近0时，模型的输出会变得更加<strong>确定</strong>，它会倾向于选择概率最高的单词，这样生成的内容会更保守，更接近训练数据中的常见模式。</li><li>当temperature值较高时，模型生成的单词选择会更加<strong>随机</strong>，输出的内容会更具创造性，但也可能会变得不太连贯或不合逻辑。</li></ul></li></ul></li><li>top_p(NucleusSampling)控制模型生成时使用的<strong>概率累积阈值</strong>，用于确定在候选单词中的选择范围，主要控制<strong>多样性</strong>。<ul><li>范围：在0到1之间。</li><li>作用：<ul><li>top_p会影响生成时候选单词的集合。当top_p=1时，模型会从所有可能的单词中进行采样；当top_p的值越低，模型会在一个概率累积较高的候选词集合中选择，即只考虑那些占总概率最高的词汇。</li></ul></li></ul></li></ol>          </div>在这里，由于在deepseek的官方代码中没有找到他们的参数，因此我选择和<ahref="https://huggingface.co/spaces/bigcode/bigcode-models-leaderboard">bigcode-models-leaderboard</a>的参数对齐。也就是<code>temperature=0.2，top_p=0.95</code></p><p>调用代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_response</span>(<span class="hljs-params">prompt</span>):<br>    prompt = build_deepseekcoder_instruction(<span class="hljs-string">&#x27;Python&#x27;</span>, prompt)<br>    response = client.chat.completions.create(<br>        model=<span class="hljs-string">&quot;deepseek-coder&quot;</span>,<br>        messages=[<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;<br>        ],<br>        temperature=<span class="hljs-number">0.2</span>,<br>        top_p=<span class="hljs-number">0.95</span>,<br>        max_tokens=<span class="hljs-number">1024</span>,<br>        stream=<span class="hljs-literal">False</span><br>    )<br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message.content<br></code></pre></td></tr></table></figure></p><p>主要的两个问题考虑了之后，我首先跑出了第一轮结果： <imgsrc="../img/first_round.png" alt="first_round.png" />官网给出的分数高达89，但我只复现出了约66分，说明复现的过程还是有问题。思考思考，检查结果很容易发现，生成的代码报错原因非常集中： <imgsrc="../img/mistake.png" alt="mistake.png" /> 都是缩进的错···🙄🙄于是阅读了deepseek处理代码缩进的逻辑，并且对他们的逻辑进行稍微修改（很奇怪，他们的逻辑会把prompt中代码def之前的部分补上，又会导致缩进问题，这部分直接不要就好了），修改后再次进行打分：<img src="../img/second_round.png" alt="second_round.png" />呀，这下终于跑出了满意的结果！😄😄</p><div class="note note-success">            <p>在复现结果差距很大的时候，要学会找原因。我在第一次跑出66分的时候，其实在这次之前没有验证评测代码是否正确，但是其实官网上有一个小脚本只要执行就可以验证评测对不对。虽然也是找到了原因，但是这次过程没有循序渐进，有可能换一个其他隐藏的小错误就发现不了了...😐😐</p><p>这种对大模型生成的代码进行评测的难点，有一个就是在于如何把代码格式化，可以直接执行，其实生成的代码很多不能执行其实不是逻辑问题仅仅是格式有误。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
      <category>Image2Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Benchmark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>September个人随想</title>
    <link href="/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e6311c21eae4965407644fcfca4467ed36c53d1dd2230bdfe38e7085b21998e0">4630436162ade97ba2718b7d0c4b3b63caa37d9e5c507f985848ba1a722b9d67914249ab68dbc3420dc2245905c5b8244d38c8e5362034260c2cdb29a1ba13174b96b70a3c311046837a15b88834e9231f47ce58daba746bf1b404379a4bc8655e5b231f30c13ce75a0b7a04b112d8e6ef2146b52d44abf8b96098700df74a51acccceb8039967960d009309fb7d80f78eee4159d6b8a32c90a849de34e65a4cde1417cf48beb1940232fc4a8228ab404215c7e775fb6e09b490a07bd9635725ca26823e50975df1c7fb4d1b26f6c92c61cdcd92987de69e2f3757a4c2b9bdef09063114ff14ec173565e72eeca33c9b93d702b1f8dffdaaf0267d4ecfcfb7b56671c0dd8e5af6184fda8ca391ba15c096d2480cb596b5b1f5bf37525c6efe10ef78f5a0812bb0898921c5b21454ee66043e5729474ef598bc6e490e11449e8fcd964459472483ae07ebc01cea79bb9312ada44f7147c16d906af153baa3639f17918b549090a117974caa23546e656af67590843091162c1d115b4ff73cf57e15acb6b16fce6c62535d9a04afd92f41630f75d6d8ee1da9f3b1a9f8a3deb9d4beade70c0c579e4f2cfc943d670d09cc766b18cccf50c656c0a4d4aeaa1c0c51a4adf02cd202a67c507b9b06fba0650cc9f6ddc258f1c5c96bf03e4156ed4c9d20db587fe11b532cb41bf4dbdf38f8823771bdda89aca9d365ac7dd2af2719e522a0e2c163e183946cd882a90ef480f27b01721d12d6611e326dea097e20020447f24508b961629ba551b53b482745c6106ae24a5aaeeace87e12dbcc2f8ccb08b8ba46d0b7e87e388b2633dd4e85c4dfe6c7c789df9698732eaa75df49dfc1467d40f794a0cf2ab35e2712ac9001c98bcb01cbeab1fb124f05810a64d46f09a3e7df9e8b6a61f1aaf4c20c6aa0dcb28777efcbe33d2ee67bd859f88c485256304efe1015766b2f38f5bf29054b1d1700b9b6819695bac262a19c8c548a6504a0314ae64b1b7c0789b3ee8ec3ec035536544f9a0d9032ecf5a8726501d482a89210c55a0c12c00f0456ec5270a9d164d72bd566f396e6021096f4959dd87301da78e120b0e7a9a7f10a7831c37abd42ddc0bc1e615b240cd2864ae0b1bdf9f7aa2414a7bd4333b69ff279e646378ef97d65ec6f41ada4af95b85298cbce22f0f3210c7a4d1ef5153162600d992772556b0af12793756d2d2291810537dae3d8aa1d5cd0ce301e26e0444a83d5ddf7bb5f379140daed1cf46af4cd751c71ca33e2cbd5081695e6ccc5b2062e2a81f6f6249fb733952c98604977501d7cdffa75ae55e1036335a9fb36b5fd9245e50635b95ee752e879c56f94b78282ad6ce70f42730a39d79f173c8843bbb88453be5f353620213e83fd140a73c14288e71d730bd131299b71afe7df9826b65acbe3a8848d3ae4e57114bc44bca092429569a8ac96eefc59c4314e7a1f65147c650d676b9ea24efa9971dfcba3ac6f84ec278b9b75ea2705fbe476258f0d8978de7866151544719bca5c1d587d7e651feb93d34ecd991e413d936271515dd81aaae5dad6b55bf2ca5ea325891beee1d237d2775bbff9fd72a0be63fdc4a65446d63145b72dbf5ab286b524510b4cac48874d43f5b8b1d2d772a6ac31fdf03e9e1af01a13fe6e8ef9d5d95092f46ecbf9e75d4a1eff0d7d7cfe6ebc113b387b39713301d2edb0feddc01db4fa0393ed6465386216e9515211dbbeab3ac31b5c098de449c49e3b10edfd46fcc4ee2305f39d547ed7bf2f094093b7e94982f5f960328a1d04a583cadde669a5b972558baa7fe4e366b590dd3c51874d9ee94f2abb0791693375733b900c6643416c4186291081ecd6f39570122c2f53ce50d0068b3b0558bdc2613fd1b3aa0370c19035149c447370f503065fb1e3c248be13310049ef45f84dde6962660da3088a4e5f78199ce2259379891bf99a382381752162fb725a840130609e5b84e31cf9cea2eb0f0e4b3a2dc4d4988f8416c5970a6459cf0e29434b94c2ac4779967b0155db4aadba28518b853105cede01f688acb04ae4a5d9eba94e185bca6ee6862efef46c77b0d39bb9af6f81ac15392db031699fa3ebde32ea23637f52861a4651178c8d2c37f084dfd0d772b4838a9ca011b1f598a77761b742b0d95f52428d0d5f9375cf0db43ee5cf6e9057fce89e71a97f8e2fe54d096e587de92dd0393bc7d1c53bf2b6872cc5e5bb778f7488f9adad978e51ba353e6998ac2e7ae9db887e6141dea8e8ff08d67382287fb8f5a1cd342a42d7adca34f4abe17dd7df62795dcf420c187ce0f1fc1c4ff8239c1587111dc42a865b2408d1e4b5ba982ea17f81ec62c0a6bf26b99c58ae9a28e23e346c7a70cb021c2292259498100a85cb50320d29ceccafb69f9a26837ad0bef20ed6a312b85c15e898151e924dbbc09fce193e527c94571100e3a28385841735077d5f641deada94ba655134e0bd804eef57dd29461b471b16dab67a527863d7a3dff2c8549bd490c80d465c4ed591524c83a7f74c86ba03cafde7b4248d44bfe69824dd0811935bdff7cf6b5cae0bf57bc3683f85e33fd1bacc87390e3855f6c610fcb9e4f92ec6e7fe0314889a73d65628f0caa116e175faf3bb4a3956a8b0bec3f9393969e81c38c85899e8641d023f28b90c21f96f5917ad70e9eab49a56c7c57a1edd566d121fda64873f3a643b02d38e2acf61f1a238a1f82ca492feeaea728cc01d43fc6e1e762c2c898b6e4e7472d65d45bcbdd2184f5d210531758858d295df59ab193f6b956b5986b81895161f4ba6a9b0e4e5b9d586ae025931d87fd716c1396d4b67115760d66eebc932004edd520418f4d3149d2a1b35feec04495a464a2bfb7c4db9269aaee80b19972eb46a2f9235e3a27e60a3a5bb25890e10b6c74ebe5248bc0a39b3eb5cc2a3d18025c3b6287877aee968119adba638e2b18ea6be83d20051ad6d3e4b830c1fc5c2c45f5da59a35b4e44bae4dae51a5447e94951226702ed8c5aa1583fe6dd61752947ed4b897861b995b70338e487012da0d57725e71d4989d5c179eb044a5aa24c625d03b74e1dce9ca663c4687c9cc077f469b0e875a893666b4797a5599d965c36e003d74377222bb2159c955fce21a266edad48d8ec2eff812e6d9d106fb8afff30762a475a1858957eb2d06a719d02371f2672c06773b0136ed483aad2018865906abe7a6b9c5b6ad8c885c3a9d2fdb6cc6e1e034c26003cef785adff4535b28c607371968c9b3a914c64d589cb30b67c81189e7a968aa63405f7e5c227be4494640c8b9f50bfd9b7c5ce8b89c95fe2da7d5ff833c9ab4954a1989f5d72e77389ac2aec9659db145e3f7e68d244df06bdb2dfcf0b279d923b404e8f68c0b1ee08fd4444d749e0111a5d8f596d5c200b97856f06313a0be0498f2228460a3f324f1ca3621fafdbdd4c7bfd016af0cd0783e4ca4bc75c2302e2766df881130030af7b3bd0ccaff787deabeb9290750cb8a4f529994fd48d215f9c1bdb1062af2ca62e2c38e21eaf2072d63088bf09bdff1e39ae7a82d7fc93e5c753761ec0e3c8ed36c61bed5babb69b703a898b1fadc65fcf1d64fae07484c9b15193eb7f3a7ba1e100d9ae29f71a50ec13ddd86315fe673653444ba37f2bf8eacd34f5f591a723f5e406f1d99794f06d4a995aa64391c636b3748a0b9d1018b314d83b159a734febbe77bcc5b7af304b9322f55495f81f1702eeeecfe2eb0f98821b29b105d8fb7b1765d126786c62f0e4adebda525c96a169db74927a3fe4ff37471654c6a527a1106e9c3ebebed66886a702297a970e1669093fa5c0ce61325ad84bd5d02a31c62cf4fb0c512e330637f91e76e5189fe0d5375192078ea9f419bf17e04ad6ccb7e2b3e0b0032d82707fd149cad04de533251b3e55189a48988f1d9cd46957ba2cb74472e6e4f7c96863ae0fbac9fcc4f2ee69e51fab26e15d44532597b0a40a86773b9b2075a50ec7689377def3632fab91badfd68ba46717e8738662b1a5b9179762348ea86e176df096dbc17087d6f7deb563af7e2f9d0d150168f4f9b7fe3a3732e648472247c698fa779ef16428fff996013c39f09bcd25afec42ed3e511dc943e6289958c09dd35ddece61240758816009d7d0f6de04e26175c60d77676b9f13ad39c94a94cda2b74c6024ec54f2439b55c055b92eed09d1731d58ee9fa373814699163bdb2c6e3709eeba15299054270eb2df85e2d24dd0c9467c9a8c601408645e3affcc31e45e37c8dc770b3f3a976b9fda5641e37dd5e6a275eface556448791a12d8d2774a1362afecc43b8275683350f360188ae5c4e3c072cd81c8739e9a54a8e97a9c6ca6e77d2a56aae6dc649bd2f09500d624a8c8512ff773a6d3676968712460ccdc03a5c94d136f41d8133917e79a24a4dfd846421d7faea1b5710ceb77bb8ff7da14c411ead956d80120574fdb06b38c7d6a1dfce0a2bbd76ba5a56ce108c09b0093878e430ee3f4284ca7bc1cf2137a85de71a8a662a9cde22fe7c22eef6276aec2a29ea36e532a87d00f6084692b8720595ee154dd17089674752bdb35dc21814fea90b4cc6361a72e8f0d25df8df31b1728eef8257a799e79673dfbd08e8a22fe001d165a3a1006cd9be69f902b5d50f10f19c1544918b252757e229f3fbf5fabd9830f1b729aa9f0d6ef2a9fb28e1b3ce4d66f28d9ddbe04afd90210b2c31b020a0f5c59dfc640dfbd6cf3318e471d8c8b65c3564c31d6733c04c0909b966f5b2726dc97d7737860a13af2842281a1b0b4f2a151ff18aa66182d45d90b598d2f3556ea99d5c86057927cec50015997ea6964d26449fa553d4aac388eee1c64267686271a5c72748ce2338693300e0e79381ecd55c9f61682575cec6b984f821b3d96fb047cda2d26749140c1f26683660f44a2eca0456af185b4e16d055c875166c7a56cdeaac9bb123e6ee3d5a6f11a1ca57675eacc391f392eabfbf55a16eae6e282bb577097feebad3075be940c99aa7273c2065b23f326de45f12490a26bfed408561b6a6e3fa1974bb7c6a8a4d771296af17becc4f866726579dbcbe4333893fcb5ea77100f30af89945107df1e6b7a3d297297f02689562c00060681a5b5d40de379ddc6878d33cff7ce6a0a83996597040497e3767d7e0710e3168b86e1a176eb5cb8e546012f280476055607429e028c861946b22d99b3c2201dea52fde89502bc7127bade6ea3250f22be647d4dab5c7b4899313892804ca1c7a716d3482ec1cb7f60f8b9dd16f76b8319106fc3762104481ef10ee957bb430e2108ea61ee815bd663a2b03d91f7155851883c8c65850131ce752a1e2e6c987635909e778a7047944f3629c9eb85097003445ac6e7611baba1b89c797f30ee1f39f26528a641d9f590ab0aaa4e237b5244fca88bc01fd70b9e0183918a6c0646a1f1a57836a48c1c53fe74b0431c369e71074b08877edfe408163277af83a8cd7166ab450bbce2fd13b74648cde94fe3209cbab475cab863a1fbe47107102842c3706518c95e9640e5ae6e35b45a2f45a48f3fe7db612b19438e73d112706e5f4aef99715d446e28dbc9a81fd5b9f2efe4e4cbe6dea97c8176c63d89d16fc8106e23f164ed9b5156bd2ebfca464cbd9c28252166a818ef4cb1f24becc41949ebe74d04c427899041865cfd47fc964434f04730948ff88e37cfea25d3b26723d8843a302a7e2b1849d234e063c0877ae6b9d3ef6513fb66d973b5aad23d6c41a39df386424c729f370d959b1ee589ef812b4a5366722f621266c468ecac12a5de59922529673927a62a69772bae1a12c57ea6a24b049137022b06057f3eaeb2f7d266aaecdf1871b0b3a92503465c84852dc72722482444f54faff0aa6f61683913507c4f3c01fccf2a80cbbd433f8f08d1b4c7033e65b097201e4d78f75f6dc60dc994effc7d43cf668cc1ae8229606dd84ab561c096b07bb89c82669dd98f24247c81c7ce97112c142c952af324f0cec738e3f0507ab843fefe66b2a26cfe4230d5bc221d951212ec52786d4adb8288a5168973f77116c6fc400eec13aa6116579d86f811917f549883839227789f83be68c2a7735731c9154c296336f4c0cc0e9f20d76540ee94eb823b68580c2b2bf8994b256af2d336a1034903a18e03cfc3578884ce3b4eb26f077d4090215d23307d103a827b1a32f382f313fb347f29e2b50c6463be4431a0bee567c7942cf1e1f684110b53a2e2ba870126432ac012a3d1fc060b5a3e9e087a720288e0e6b4c34380875854845da1bec85ee72c7d3c2e893b7838076f65014af8b61b020abad3b62951e1c1c6f8a660ce03e875b45d32de17b296f441a4c721c6bf234a99cea58c14c87c506456395d7de97973e3473a6304e24f4154878ae4782f3587b2293fbee596a0a6213e60a081000c8c1ee146d248015fa45df27e471bc9ebb3de65da452a554fd6c421abd2d2cc7297f8bf73fbbdfc20eccaa1f534f2db489c1d4ae78e422ca95bf427069f1dc733334e0afc451c610968f292822c3176de3ac199228b960f736baa15286ff94b4f02044f30ad06f91f95a36a4656f7dee1f174677eaf6ba833df4b924c9b16cf31bee4a0b684e8fc09e174882c36abd5af9cf1e9bbce30e967b154f1ae60292fdcb28847388644fbe4d50c87a34c0e4c484018b602bc4b3698cb1d7b5ef960b4c8609551930d94668dca3757185a5c01d1e1937d6991cfe5ce4477f7d4ba1dbe5f8ec251ffd4352e5a9aee636477a92530aaecc607711cd6d59a6d5da2efa429be8475c245993f579b7215ba5124441dd655a89f20b2c94a29ee787ca7e9ca9bcf716324f7f4f619f26374bd6dd063320aa83fe7a2b67c450bd2980dfec8bec78e1be3bdf699e4bf11ac5eca8267006e0c3e24b098247cc05646a5e690a58fb6dc14166c364968c7511121f4acefdcbb7d0612328667fa5b9e1ff6f99edd76bf8a5bee50bf097a676952da6c9ca26e891d7231f63548af80d48dc6ad9ff20e4d58cc5bfba2e4019217bd17a2c1846ab2e11d394f60d83fc49e747c2619d276b3a2a6878eb7d4582561262f8dd66d6ea0e93b9fe09bdff8aa8f6f0abed94f5e159f6360ef2c5ce5632f901dc4d66752bcae34dd13da066b6a3dd6c3b4b5848238b2239a4dfa131411b9069751708d39959c06bde9652e8b42c3998834fecca3fc0cfe42a395f0a18635d80be7642566ffc96d47192126c159e736d767f2fee93728922b0c730ab055ebcc1ba27b1bdf1fba1481c391e54871ca075f82f054e506ed071959e70b9f9ac8084050f493c57a77e5975fbc09ed7de1908c21c35a713f115846cfda42050f584e90e57ffb0d6dfe2c5eaac733181af39a2c034ad5043869a8b80deaa55249d602a8726fd7db07e67780fbd02baf9b41590620d3f5bcfa201be67fe4922bd0e071b56d66106ca52907d33af0d630760df87487762eb25d7445a5eb0158ca6acb91796d5d3256006140413278e31d21bdce0f1cc7ffb42f646806e438047b5dcc492af5f73d13dcc962b278db2f9a11daa04de50a1ba0a6acc1334c389f30a1b3a86fdb7ff0baa2f74408d21216ec2666c3b21bfc4e3b0fef71a9ee5516e83dea7ca805eca644cac4086096c82ee42a2fed0474cd14534799298abea206cd321e5325f8f71fb92221087bf6370b81c96b8f9db682f9739e87b89cfb3dcff32a42c007ee1ef5986606b20236cf5eaef8d07ee8a776edc14be56a5d2f32456af44be8e3d599c5e261bbcc43062723e6cf0410efa9cbaadbb49123098e677cbe11c4b0c5f3496bf6d7cd9d55a4843b84c21de6275cd9214558f22a1f02731fb6da9438010f05bab2a9f4cae4cfc7aaa02bfef7580b20414bcf874b78082f2e3d15c9a626a8f48b431be50914100229868b6237a233a5c6afee6e8253d3d397b3bd4f00d53fcc4d13e1bd23201eb481ac0e89065fdc0671ddb68bf72cec1206d66d04ee1eb3e7e397d1fe174bc382a1b91d64a6fe3ab1ff635bbbee9eb04cca863154d606bc04dc3125cb4846860b6d7f931161872f85ea21f261281fe1fc4074feede0feb705fae98d1dfefc6692c9b37f29fc1f8103fc9ebbfadb0d5d11639577f0be6500133ef73cde0854f8798f54873b786019ec21feee9c81cde509da07182a67459c705601ad0a2119a4769c7ba247dab81017e73870fb9a95170fea8ee99b39c7c2446b1c505faac5ae82df0351a1fbe1afbef82452311a4fb610699662b07d12eae94576f533f53b9937ec6822140643b6d605601976c468c12cd33553d4e93b2cdba01207c13d167f6b23c52843cb81181fa8c3d1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic Knowledge for Domain Generalization</title>
    <link href="/2024/09/04/Generalization/"/>
    <url>/2024/09/04/Generalization/</url>
    
    <content type="html"><![CDATA[<p>🌞🌞有幸接触到一个做域泛化的项目组，在准备期间看论文发现自己机器学习、深度学习的基础其实一点都不扎实🥹🥹，在这里记录一下跟进项目需要用到的知识点！### <strong>域自适应[Domain Adaptation]</strong> VS<strong>域泛化[Domain Generalization]</strong> 以一个具体的场景为例：假设我在开发一个自动驾驶系统，它需要识别街道上的行人。我在A城市收集了大量的行人图像（源领域），我的目标是把这个系统应用到B城市，但是B城市的街道布局、行人穿着、天气条件等可能与A有所不同，这就是所谓的“领域偏移”（domainshift）。</p><ul><li><strong>Domain Adaptation:</strong>在训练的过程中，就给模型提供B城市的图像，虽然这些图像可能没有标注过，但是我的目标是让模型利用这些未标注的目标领域数据，调整自己对新环境的适应性。</li><li><strong>Domain Generalization:</strong>在训练过程中，我并不提供B城市的图像，而模型在使用的过程中，也可以识别出B城市的行人。</li></ul><p>总结来说：<strong>域自适应</strong>是通过使用一些目标领域的数据来帮助模型适应新环境，而<strong>域泛化</strong>则要求模型在没有看到目标领域数据的情况下，依然能够应对新的环境。</p><h3 id="元学习meta-learning">元学习[Meta Learning]</h3><p>Meta-learning，也称为“学习如何学习”，是一种机器学习方法，旨在通过学习元知识（即关于学习过程本身的知识）来提高模型在新任务上的表现。Meta-learning的目标是使模型能够快速适应新任务，即使在只有少量训练数据的情况下，也能取得良好的效果。元学习的核心想法是学习一个先验知识(prior)。 &gt;(夹带点私货，下面这个elegant的图，是用mermaid绘制出来的，useful!🤩🤩欸，但是大小不好调整，而且多次尝试都失败了，😢sad)</p><p><strong>元学习的内容细分</strong></p><pre><code class=" mermaid">%%&#123; init: &#123; &quot;theme&quot;: &quot;base&quot;, &quot;themeVariables&quot;: &#123; &quot;width&quot;: &quot;300px&quot;, &quot;height&quot;: &quot;300px&quot; &#125;&#125;&#125;%%graph LR    A[Meta-Learning] --&gt; B[Meta-Training Phase]    A --&gt; C[Meta-Testing Phase]    B --&gt; D[Meta-Training Data]    B --&gt; E[Meta-Validation Data]    D --&gt; F[Meta-Train Task 1]    D --&gt; G[Meta-Train Task 2]    D --&gt; H[Meta-Train Task N]    E --&gt; I[Meta-Validation Task 1]    E --&gt; J[Meta-Validation Task 2]    E --&gt; K[Meta-Validation Task N]    C --&gt; L[Meta-Testing Data]    L --&gt; M[Meta-Test Task]subgraph Task_StructureF --&gt; N[Support Set N-way K-shot]F --&gt; O[Query Set]G --&gt; NG --&gt; OH --&gt; NH --&gt; OM --&gt; NM --&gt; Oend</code></pre><h3 id="pacs-数据集">PACS 数据集</h3><p><strong>PACS</strong>是一个常用于域自适应和域泛化任务的数据集。它特别适用于评估模型在不同视觉风格下的泛化能力。PACS的全称来自它所包含的四个不同的视觉风格类别： - P: Photo（真实照片） - A:Art painting（艺术画） - C: Cartoon（卡通图像） - S: Sketch（素描）</p><p>每种风格都包含相同的7个类别的物体：狗、象、长颈鹿、吉他、马、房子、人物。</p><p>PACS的数据来自四种视觉风格，旨在研究模型如何在不同的视觉领域间进行泛化。例如，模型可能在“Photo”风格上进行训练，但要在“Artpainting”或“Cartoon”风格上进行测试。</p><h3 id="图像的通道">图像的通道</h3><p>图像的通道是指图像中每个像素点所包含的颜色或信息维度。不同类型的图像根据所使用的颜色模式可能有不同数量的通道。RGB图像是最常见的彩色图像格式，有<strong>三个</strong>通道：红色(Red)、绿色 (Green)、蓝色 (Blue)。每个像素点通过三个通道的组合来表示颜色。每个通道的值通常范围在 0 到 255之间，不同通道的组合可以生成不同的颜色。</p><p>在深度学习中，特别是计算机视觉任务中，通道数是图像张量结构的一部分。例如，对于一个RGB 图像，张量通常表示为 (C, H, W)，其中： - C 代表通道数（对于 RGB图像为 3）； - H 代表图像的高度； - W 代表图像的宽度。</p><p>神经网络会分别处理每个通道的数据，并通过卷积、池化等操作来提取和处理图像的特征。</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useful code</title>
    <link href="/2024/08/22/code/"/>
    <url>/2024/08/22/code/</url>
    
    <content type="html"><![CDATA[<h2 id="c-mainly-for-online-judge">C++ (mainly for Online Judge)</h2><h3 id="using-scanf-and-printf-instead-of-cin-and-cout">Using<code>scanf</code> and <code>printf</code> Instead of <code>cin</code>and <code>cout</code></h3><p>没错，之前的习惯一直是<code>cin</code><code>cout</code>，直到有一天我遇见了————<ahref="https://www.acwing.com/problem/content/798/">796.子矩阵的和</a>。</p><p>将<code>cin</code>和<code>cout</code>替换为<code>scanf</code>和<code>printf</code>，它们的性能通常会更好。因为<code>scanf</code>和<code>printf</code>是C风格的I/O，不会和C++的<code>cin</code>和<code>cout</code>做同步，因此没有同步的开销，通常会更快。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n, m, q;<br>cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;<br><span class="hljs-built_in">sacnf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;q);<br><br>cout &gt;&gt; result &gt;&gt; endl;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, result);  <span class="hljs-comment">// 使用 printf 代替 cout</span><br></code></pre></td></tr></table></figure></p><h3 id="about-stl">About STL</h3><ol type="1"><li>来源于Acwing中，要求输出六位浮点数，需要使用<code>iomanip</code>库<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">double</span> n = <span class="hljs-number">10</span>;<br>   cout &lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">6</span>) &lt;&lt; n &lt;&lt; endl; <span class="hljs-comment">// fixed setprecision(x) 固定模板</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="type-casting">Type Casting</h3><ol type="1"><li><p><code>long</code> to <code>int</code> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">long</span> currentUgly = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)currentUgly;<br></code></pre></td></tr></table></figure></p></li><li><p><code>int</code>/<code>float</code> to <code>string</code></p><p><code>std::to_string</code> 是 C++11引入的函数，可以将整数或浮点数转换为字符串。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string index_s = <span class="hljs-built_in">to_string</span>(index);<br></code></pre></td></tr></table></figure></p></li><li><p><code>string</code> to <code>integer</code></p><ul><li>支持处理带符号的整数（如正数和负数）</li><li>如果字符串不是有效数字格式，则会抛出异常</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">stoi</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; str, <span class="hljs-type">size_t</span>* idx = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> base = <span class="hljs-number">10</span>)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>str</code>：待转换的字符串</li><li><code>idx</code>（可选）：表示转换停止的字符索引（用来标记多余字符起始位置）</li><li><code>base</code>（可选）：表示字符串的进制（默认为10，支持2、8、16等）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s1 = <span class="hljs-string">&quot;123&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;-456&quot;</span>;<br>string s3 = <span class="hljs-string">&quot;789abc&quot;</span>;<br><br><span class="hljs-comment">// 基本使用</span><br>cout &lt;&lt; <span class="hljs-built_in">stoi</span>(s1) &lt;&lt; endl;  <span class="hljs-comment">// 输出 123</span><br>cout &lt;&lt; <span class="hljs-built_in">stoi</span>(s2) &lt;&lt; endl;  <span class="hljs-comment">// 输出 -456</span><br><br><span class="hljs-comment">// 使用 idx 参数</span><br><span class="hljs-type">size_t</span> idx;<br><span class="hljs-type">int</span> num = <span class="hljs-built_in">stoi</span>(s3, &amp;idx);<br>cout &lt;&lt; num &lt;&lt; endl;       <span class="hljs-comment">// 输出 789</span><br>cout &lt;&lt; <span class="hljs-string">&quot;剩余字符串: &quot;</span> &lt;&lt; s<span class="hljs-number">3.</span><span class="hljs-built_in">substr</span>(idx) &lt;&lt; endl;  <span class="hljs-comment">// 输出 &quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="digit-separation">Digit Separation</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 来自快乐数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">square_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-type">int</span> digit = n % <span class="hljs-number">10</span>;<br>        n /= <span class="hljs-number">10</span>;<br>        sum += digit * digit;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="create-linkedlist">Create LinkedList</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> namesapce std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of elements: &quot;</span>;<br>    cin &gt;&gt; n;<br>    ListNode* head = <span class="hljs-literal">nullptr</span>;<br>    ListNode pnode = <span class="hljs-literal">nullptr</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the elements: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> val;<br>        cin &gt;&gt; val;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>            pnode = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>            pnode-&gt;next = newNode;<br>            pnode = newNode;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="binarysearch">BinarySearch</h3><p>需要理解题目适当变形！</p><ol type="1"><li><ahref="https://leetcode.cn/problems/sqrtx/?envType=problem-list-v2&amp;envId=binary-search">Leetcode第69题:x的平方根</a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>   <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br> <br>   <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>   <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 防止溢出</span><br> <br>   <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>      <span class="hljs-keyword">return</span> mid;<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>      left = mid + <span class="hljs-number">1</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>   &#125;<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><ahref="https://www.acwing.com/problem/content/description/792/">Acwing790.数的三次方根</a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cube_root</span><span class="hljs-params">(<span class="hljs-type">double</span> n)</span> </span>&#123;<br>   <span class="hljs-type">double</span> left = <span class="hljs-number">-1000</span>,right = <span class="hljs-number">1000</span>;<br>   <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-7</span>; <span class="hljs-comment">// 10的-6次方精度</span><br>   <br>   <span class="hljs-keyword">while</span> (right - left  &gt; eps) &#123;<br>      <span class="hljs-type">double</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (mid * mid * mid &lt; n) left = mid;<br>      <span class="hljs-keyword">else</span> right = mid;<br>   &#125;<br>   <span class="hljs-keyword">return</span> left; <span class="hljs-comment">// 返回一个边界</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="about-vector">About vector</h3><h4 id="basic-operations">basic operations</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>v.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">// 删除最后一个元素</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n,<span class="hljs-number">0</span>)); <span class="hljs-comment">// 建立一个固定大小的二维数组</span><br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">3</span>); <span class="hljs-comment">// 在第一个元素前面插入一个元素</span><br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>); <span class="hljs-comment">// 删除第二个元素</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 对数组进行原地排序</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="dynamic-array-vs-static-array">dynamic array vs staticarray</h4><p>在做题的时候一不小心把<code>vector&lt;string&gt; s(3)</code>打成了<code>vector&lt;string&gt; s[3]</code>，因为本人没有细学过C++，因此在这里记录一下~<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;string&gt; s; <span class="hljs-comment">// 这是一个动态大小的向量，能够在运行时添加任意数量的 string 元素</span><br>vector&lt;string&gt; s[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 这是一个静态数组，包含 3 个 vector&lt;string&gt; 对象。</span><br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// 向量 s 会有 3 个元素，且这些元素都是空字符串。</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// 向量 v 会有 3 个元素，且这些元素都是 0。</span><br></code></pre></td></tr></table></figure> 回过头来意识到我这个问题好幼稚，犯的错好傻呀...🫥🫥</p><h4 id="reverse-array">reverse array</h4><p>包含在<code>algorithm</code>头文件中，可以通过<code>reverse(begin, end)</code>函数实现数组的翻转。注意，<code>begin()</code>和<code>end()</code>函数返回的迭代器是左闭右开的，也就是说，<code>begin()</code>指向第一个元素，而<code>end()</code>指向<strong>最后一个元素的下一个位置</strong>。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 翻转数组</span><br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">4</span>); <span class="hljs-comment">// 翻转转从第 0 个元素开始到第 3 个元素</span><br></code></pre></td></tr></table></figure></p><h4 id="accumulate-vector">accumulate vector</h4><p><code>accumulate</code>是C++标准库中的一个函数，用于计算范围内所有元素的累计和。它通常用于容器（如vector、array等）中的元素累计。<code>accumulate</code>函数位于<code>&lt;numeric&gt;</code>头文件中。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIterator</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function">T <span class="hljs-title">accumulate</span><span class="hljs-params">(InputIterator first, InputIterator last, T init)</span></span>;<br></code></pre></td></tr></table></figure></p><ul><li><code>first</code>：输入序列的起始迭代器（指向序列的第一个元素）。</li><li><code>last</code>：输入序列的结束迭代器（指向序列的最后一个元素的后一个位置）。</li><li><code>init</code>：累加的初始值，这个值会作为累加计算的起点。累加后的结果将基于这个初始值。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span>  <span class="hljs-comment">// accumulate 所在的头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 使用 accumulate 计算 nums 中所有元素的和，初始值为 0</span><br><span class="hljs-type">int</span> total = <span class="hljs-built_in">accumulate</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h4 id="lower_bound">lower_bound()</h4><p>在一个有序数组（或容器）中找到第一个大于等于指定值的元素的位置<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">lower_bound</span>(sub.<span class="hljs-built_in">begin</span>(), sub.<span class="hljs-built_in">end</span>(), x);<br></code></pre></td></tr></table></figure>如果<code>it == sub.end()</code>，表示<code>x</code>比<code>sub</code>中的所有元素都大（即<code>x</code>可以直接追加到数组末尾）。</p><h4 id="max_elementmin_element">max_element()/min_element()</h4><p>用于找到在指定范围内最大、最小值的函数，它是<code>&lt;algorithm&gt;</code>头文件中的一个函数模板。参数：</p><ul><li><code>first</code>：容器或范围的起始迭代器</li><li><code>last</code>：容器或范围的结束迭代器（不包括最后一个元素）</li><li>（可选）<code>comp</code>：一个二元谓词，用于指定比较规则</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt; <span class="hljs-keyword">class</span> ForwardIterator &gt;</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">max_element</span><span class="hljs-params">( ForwardIterator first, ForwardIterator last )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt; <span class="hljs-keyword">class</span> ForwardIterator, <span class="hljs-keyword">class</span> Compare &gt;</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">max_element</span><span class="hljs-params">( ForwardIterator first, ForwardIterator last, Compare comp )</span></span>; <br></code></pre></td></tr></table></figure><p>注意，返回值是一个<strong>指向最大元素的迭代器</strong>，在取出具体值的时候，要使用<code>*</code>取出：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">auto</span> max_it = <span class="hljs-built_in">max_element</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>());<br>cout &lt;&lt; <span class="hljs-string">&quot;最大值是：&quot;</span> &lt;&lt; *max_it &lt;&lt; endl;<br></code></pre></td></tr></table></figure></p><h4 id="next_permutation">next_permutation()</h4><p>也是一个cpp的STL函数，返回该序列的下一个字典序，如果该字典序已经是最后一个了，那么返回第一个字典序。使用该函数，<ahref="https://leetcode.cn/problems/next-permutation/?envType=study-plan-v2&amp;envId=top-100-liked">hot100_31.下一个排列</a>这一题秒解</p><p>示例用法： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; nums = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">next_permutation</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<span class="hljs-comment">// 之后nums变为&#123;1,5,1&#125;</span><br><span class="hljs-comment">// 当然也可以自定义比较函数</span><br><span class="hljs-built_in">next_permutation</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),cmp);<br></code></pre></td></tr></table></figure></p><h3 id="about-binary-tree">About Binary Tree</h3><h4 id="中序遍历">中序遍历</h4><ol type="1"><li>递归实现 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode* root,vector&lt;<span class="hljs-type">int</span>&gt;&amp; res)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">inorder</span>(root-&gt;left);<br>    res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>    <span class="hljs-built_in">inorder</span>(root-&gt;right);<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-built_in">inorder</span>(root, res);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>迭代实现 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br> vector&lt;<span class="hljs-type">int</span>&gt; res;<br> stack&lt;TreeNode*&gt; stk;<br> <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">nullptr</span> || !stk.<span class="hljs-built_in">empty</span>()) &#123;<br>     <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">nullptr</span>) &#123;<br>     stk.<span class="hljs-built_in">push</span>(root);<br>     root = root-&gt;left;<br>    &#125;<br>     root = stk.<span class="hljs-built_in">top</span>();<br>     stk.<span class="hljs-built_in">pop</span>();<br>     res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>     root = root-&gt;right;<br>  &#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="calculate-the-depth-of-the-binary-tree">Calculate the depth ofthe binary tree</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">maxDepth</span>(root-&gt;left), <span class="hljs-built_in">maxDepth</span>(root-&gt;right)) + <span class="hljs-number">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="about-heap">About Heap</h3><h4 id="maxheap-minheap">maxHeap &amp; minHeap</h4><p>cpp中已经实现了最大堆和最小堆，没有必要自己手动实现，包含在<code>&lt;queue&gt;</code>中。</p><ul><li>默认情况下，C++ 的 <code>priority_queue</code> 是一个 最大堆。</li><li>想要使用最小堆，需要使用 <code>priority_queue</code> 并传递<code>std::greater</code> 比较器。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 默认最大堆</span><br>priority_queue&lt;<span class="hljs-type">int</span>&gt; maxHeap;<br><span class="hljs-comment">// 最小堆</span><br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt; minHeap;<br><span class="hljs-comment">// 基本操作：push pop top size和栈一样</span><br></code></pre></td></tr></table></figure><h4 id="custom-heap-sorting">Custom heap sorting</h4><p>举个例子： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 使用最小堆 按照频率从低到高排序 这里是一个lambda表达式</span><br><span class="hljs-comment">// 如果定义为 frequencyMap[a] &gt; frequencyMap[b]，堆会按照频率从小到大排序，变成了最小堆。</span><br><span class="hljs-comment">// 如果定义为 frequencyMap[a] &lt; frequencyMap[b]，堆会按照频率从大到小排序，保持为最大堆。</span><br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; frequencyMap;<br><span class="hljs-keyword">auto</span> cmp = [&amp;frequencyMap](<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b) &#123;<br>        <span class="hljs-keyword">return</span> frequencyMap[a] &gt; frequencyMap[b];<br>    &#125;;<br><span class="hljs-comment">// decltype(cmp)：用于指定比较器的类型，这里通过 decltype(cmp) 获取 cmp 的类型。</span><br><span class="hljs-comment">// cmp：将定义好的 lambda 表达式 cmp 作为堆的比较器传递。</span><br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,<span class="hljs-keyword">decltype</span>(cmp)&gt; <span class="hljs-built_in">minHeap</span>(cmp);<br><br></code></pre></td></tr></table></figure></p><h3 id="about-hash-table-hash-set">About Hash Table &amp; Hash Set</h3><h4 id="traverse-the-hash-table">Traverse the hash table</h4><ol type="1"><li>HashMap <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = mp.<span class="hljs-built_in">begin</span>(); it != mp.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>   it-&gt;first; <span class="hljs-comment">// key</span><br>   it-&gt;second; <span class="hljs-comment">// value</span><br>   <span class="hljs-comment">// other code</span><br>   &#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [key, value] : mp) &#123;<br>   <span class="hljs-comment">// other code</span><br>   &#125;<br></code></pre></td></tr></table></figure></li><li>HashSet <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = st.<span class="hljs-built_in">begin</span>(); it != st.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>   *it; <span class="hljs-comment">// value</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; value : st) &#123;<br>   value;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="about-char">About char</h3><h4 id="isdigit">isDigit()</h4><ul><li><p>用于检查一个字符是否是数字字符（0-9）</p></li><li><p>返回值为布尔值：true 表示该字符是数字，false表示不是数字</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> c1 = <span class="hljs-string">&#x27;5&#x27;</span>;<br><span class="hljs-type">char</span> c2 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>cout &lt;&lt; <span class="hljs-built_in">isdigit</span>(c1) &lt;&lt; endl;  <span class="hljs-comment">// 输出 1，因为 &#x27;5&#x27; 是数字</span><br>cout &lt;&lt; <span class="hljs-built_in">isdigit</span>(c2) &lt;&lt; endl;  <span class="hljs-comment">// 输出 0，因为 &#x27;a&#x27; 不是数字</span><br></code></pre></td></tr></table></figure><h3 id="about-string">About string</h3><h4 id="substring">substring</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>string sub = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 从索引6开始，长度为5的子串</span><br>sub == <span class="hljs-string">&quot;World&quot;</span>; <span class="hljs-comment">// 判断字符串是否相等</span><br></code></pre></td></tr></table></figure><h4 id="append-string">Append string</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s1 = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">int</span> num = <span class="hljs-number">3</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">append</span>(num, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// 将字母a重复3次，并追加到s1后面</span><br></code></pre></td></tr></table></figure><h4 id="reverse-string">Reverse string</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>().s.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 反转字符串顺序</span><br></code></pre></td></tr></table></figure><h4 id="spilt-string">Spilt string</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;/home/foo/&quot;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : s) &#123;<br>   <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      <span class="hljs-comment">// some work</span><br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// some work</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="clear-string">clear string</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;122344&quot;</span>;<br>s.<span class="hljs-built_in">clear</span>(); <span class="hljs-comment">// 置空字符串</span><br></code></pre></td></tr></table></figure><h3 id="about-matrix">About matrix</h3><h4 id="matrix-transpose">Matrix transpose</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; matrix = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;&#125;;<br><span class="hljs-type">int</span> n = matrix.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n;j++) &#123;<br>      <span class="hljs-built_in">swap</span>(matrix[i][j],matrix[j][i]);<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="matrix-flipped-horizontally">matrix flipped horizontally</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>   <span class="hljs-type">int</span> n = matrix.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; matrix.<span class="hljs-built_in">size</span>();i++) &#123;<br>      <span class="hljs-built_in">reverse</span>(matrix[i].<span class="hljs-built_in">begin</span>(),matrix[i].<span class="hljs-built_in">end</span>());<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="dfs-template">DFS template</h3><h4 id="trees-dfs">Tree's DFS</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFSTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>   <span class="hljs-comment">// 处理当前节点</span><br>   cout &lt;&lt; root-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>   <span class="hljs-comment">// 递归遍历左子树</span><br>   <span class="hljs-built_in">DFSTree</span>(root-&gt;left);<br>   <span class="hljs-comment">// 递归遍历右子树</span><br>   <span class="hljs-built_in">DFSTree</span>(root-&gt;right);<br>   <br>   <span class="hljs-comment">// 回溯</span><br>   <span class="hljs-comment">// pop_back();</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sort-methods">Sort Methods</h3><h4 id="custom-sorting">Custom Sorting</h4><p>来源于<ahref="https://leetcode.cn/problems/largest-number/?envType=problem-list-v2&amp;envId=greedy">Leetcode179.largestNumber</a>，这个题目中只要自定义排序几行代码就完事！<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),[](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">to_string</span>(x) + <span class="hljs-built_in">to_string</span>(y) &gt; <span class="hljs-built_in">to_string</span>(y) + <span class="hljs-built_in">to_string</span>(x);<br>     &#125;);<br></code></pre></td></tr></table></figure></p><ul><li>第三个参数是自定义的比较函数，用于定义排序的规则</li><li>这里使用匿名lambda表达式</li></ul><h4 id="mergesort">MergeSort</h4><p>2024/12/27，虽然需要临时数组，不过最好还是对数组进行原地修改，在这里更新一个版本<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span> </span>&#123;<br>    <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> i = left,j = mid + <span class="hljs-number">1</span>;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; temp;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt;= arr[j]) &#123;<br>            temp.<span class="hljs-built_in">push_back</span>(arr[i]);<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            temp.<span class="hljs-built_in">push_back</span>(arr[j]);<br>            j++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = i; k &lt;= mid;k++) temp.<span class="hljs-built_in">push_back</span>(arr[k]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j; k &lt;= right;k++) temp.<span class="hljs-built_in">push_back</span>(arr[k]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; temp.<span class="hljs-built_in">size</span>();k++)<br>        arr[left + k] = temp[k];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (left &gt;= right) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">sortArray</span>(arr,left,mid);<br>    <span class="hljs-built_in">sortArray</span>(arr,mid + <span class="hljs-number">1</span>,right);<br><br>    <span class="hljs-built_in">mergeSort</span>(arr,left,right);<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="quicksort">QuickSort</h4><p>2024/12/24，原来常用的QuickSort模板在Acwing中时间超限，更新一个新的模板<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (left &gt;= right) <span class="hljs-keyword">return</span>;<br>   <span class="hljs-type">int</span> i = left - <span class="hljs-number">1</span>,j = right + <span class="hljs-number">1</span>;<br>   <span class="hljs-type">int</span> mid = nums[(left + right) / <span class="hljs-number">2</span>]; <span class="hljs-comment">// 取最中间的数</span><br>   <span class="hljs-keyword">while</span>(i &lt; j) &#123;<br>      <span class="hljs-built_in">do</span>(i++); <span class="hljs-keyword">while</span> (nums[i] &lt; mid); <span class="hljs-comment">// 注意do while 循环要加`;`</span><br>      <span class="hljs-built_in">do</span>(j--); <span class="hljs-keyword">while</span> (nums[j] &gt; mid);<br>      <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(nums[i],nums[j]);<br>   &#125;<br>   <span class="hljs-built_in">quickSort</span>(nums,left,j);<br>   <span class="hljs-built_in">quickSort</span>(nums,j + <span class="hljs-number">1</span>,right);<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地主机连接远程服务器的几种方式</title>
    <link href="/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>从大二开始，我接触到远程服务器，在这里总结一下本地主机连接远程服务器的几种方式😎1.<strong>使用密码和VPN（可选）连接</strong>：这是我接触最多的连接方式，但是这样连接有缺点：安全性差。这种方式有时需要使用VPN才能连接，因为VPN可以屏蔽一些网络设备，比如防火墙，所以可以避免一些安全风险。首先通过VPN连接到远程服务器所在的网络。VPN（虚拟专用网络）将本地网络流量加密，并通过远程服务器所在的网络进行路由，使我们能够像在同一局域网内一样访问服务器。2.<strong>使用公钥和私钥连接</strong>：有过一次使用公私钥连接的经历。这种方式可以避免密码的传输，安全性更高。连接流程如下：1. 生成密钥对: 使用SSH工具（如ssh-keygen）在本地生成一对公钥和私钥。 2.配置公钥: 将生成的公钥 (~/.ssh/id_rsa.pub) 添加到远程服务器上的~/.ssh/authorized_keys 文件中。 3. SSH连接:使用SSH客户端，通过私钥文件（~/.ssh/id_rsa）连接到远程服务器。SSH会自动使用私钥进行身份验证。这样连接以后，无需输入密码即可快速登录服务器，提升了工作效率，而且具有较高的安全性。🙆🏻如下图所示，是使用MobaXterm进行连接的界面：<img src="../img/Moba_ssh.png"alt="使用MobaXterm进行公私钥的SSH连接" /></p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>August💘个人随想</title>
    <link href="/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0ae3b60543ee93c5060b9f898ad70188c63cf764197fb81c84b98694937135f1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm如何连接远程服务器</title>
    <link href="/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在实习，旁边的小伙伴全都劝我用vscode，说连接简单不费力，我这样一个忠诚的pycharm用户，JetBrains全家桶爱好者，怎么能受得了这样的虎狼之词！😡😡于是，写下一篇博文，记录一下如何使用pycharm连接远程服务器。<div class="note note-warning">            <p>该远程连接步骤没有参考任何网上教程；pycharm版本：PyCharm 2023.2.2pycharm连接远程服务器有很多种方法，或者某一步骤错误了其实有很多补救措施，可以自行探索！☺️</p>          </div> ### Step1：新建一个项目新建一个项目，选择Python解释器，选择<code>Previously configured interpreter</code>，然后点击<code>Add Interpreter</code>，选择<code>On SSh</code>，如下图所示：<img src="../img/img_img1.png" alt="img.png" />在这儿，填写服务器的ip地址（Host），端口号（往往默认），用户名，如下图所示：<img src="../img/img_1.png" alt="img_1.png" />之后能点击next的，一路点击next，直到下图，输入密码（这里我使用的是密码连接），之后还是点击next，如下图：<img src="../img/img_2.png" alt="img_2.png" /> 还是next： <imgsrc="../img/img_3.png" alt="img_3.png" /> ok，现在来到第四步： <imgsrc="../img/img_4.png" alt="img_4.png" />在这里，我想要使用服务器中已经存在的环境，于是我选择<code>existing</code>,选择虚拟环境中对应的<code>python.exe</code>,往往在<code>Anaconda3</code>中的<code>envs</code>的虚拟环境名字下的<code>bin</code>中，选好了点击ok，然后点击create，如下图：<img src="../img/img_5.png" alt="img_5.png" />之后注意选一下相匹配的文件夹，也就是你的这个项目中的文件，应该上传到服务器中的文件夹中的什么位置：<img src="../img/img_10.png" alt="img_10.png" />这样就创建项目成功啦！</p><h3 id="step2浏览服务器上的文件夹">Step2：浏览服务器上的文件夹</h3><p>在项目创建成功后，点击<code>Main Menu</code>（就是左上角三条线的图标），之后点击同行的<code>tools</code>-&gt;<code>deployment</code>-&gt;<code>Browse Remote Host</code>，如下图：<img src="../img/img_6.png" alt="img_6.png" />之后在pycharm最左侧就会出代表现服务器上的文件夹的标志，选择对应的远程主机，就可以看到展开的文件夹啦：<img src="../img/img_8.png" alt="img_8.png" /></p><h3 id="step3终端修改">Step3：终端修改</h3><p>注意在使用远程服务器的时候，我们往往是在终端操作，点击终端，注意<code>+</code>号旁边的小箭头，点击这个小箭头，选择对应的虚拟环境即可，如下图：<img src="../img/img_9.png" alt="img_9.png" />这样，终端也切换到远程服务器的虚拟环境啦！It's done!</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Useful instructions in Linux</title>
    <link href="/2024/08/01/Useful-instructions-in-Linux/"/>
    <url>/2024/08/01/Useful-instructions-in-Linux/</url>
    
    <content type="html"><![CDATA[<p>这是第一次正经使用远程服务器跑数据，遂记录一下常用的命令，希望以后会越来越熟练！🤗- 查看显卡情况 - 1️⃣ 简易版 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nvidia-smi<br></code></pre></td></tr></table></figure> - 2️⃣ 更详细更美观🤩<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install nvitop<br>nvitop<br></code></pre></td></tr></table></figure> nvitop的效果确实更美观，包括进程也展示的更加清楚： <imgsrc="../img/nvitop.jpg" alt="nvitop效果图" /></p><ul><li><p>查看虚拟环境列表 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env list<br></code></pre></td></tr></table></figure></p></li><li><p>多人共享一个服务器，GPU资源稀缺的时候，需要进行<strong>占卡</strong>操作，确保一个人在使用GPU 时，其他人不会干扰或抢占该资源如何实现占卡？编写一个脚本，在脚本中执行一个死循环，这样就可以占用 GPU资源了。例如： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvidia-smi<br><span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0  <span class="hljs-comment"># 选择 GPU 0</span><br>python your_script.py<br></code></pre></td></tr></table></figure></p></li><li><p>脱离自己的终端，继续运行脚本，我常常使用的指令是<code>nohup</code>，例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> python your_script.py &gt; stdout.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure>这个指令用于在后台运行一个Python脚本，同时将输出重定向到日志文件中。具体来说：</p><ul><li><code>nohup</code>：表示“no hangup”，用于在你关闭终端后继续运行该命令。通常，如果没有使用<code>nohup</code>，关闭终端后，正在运行的进程也会被终止。使用nohup可以确保即使关闭了终端，脚本仍然会继续运行。</li><li><code>python your_script.py</code>：这是你要运行的Python脚本的命令。</li><li><code>&gt;</code>：重定向符号，表示将输出重定向到指定的文件。</li><li><code>stdout.log</code>：用于存储脚本的标准输出（即通常在终端显示的输出信息）。所有标准输出会被写入这个文件中。</li><li><code>2&gt;&amp;1</code>：这是将标准错误输出（即错误信息）重定向到标准输出中，因此所有的错误信息也会被写入stdout.log中。这其中，2表示标准错误，1表示标准输出，&amp;表示引用相同的文件描述符。</li><li><code>&amp;</code>：将该命令放到后台运行，即使你关闭当前的终端会话，脚本仍然会继续运行。</li></ul></li><li><p>赋予自己的脚本权限，例如： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x your_script.py<br></code></pre></td></tr></table></figure>使用<code>chmod</code>命令，你可以给文件赋予权限。<code>+x</code>表示增加执行权限，这样你就可以运行这个脚本了。同理，<code>-x</code>表示移除执行权限，移除之后，你无法运行这个脚本。</p></li><li><p>杀死进程 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 pid # pid是进程的ID, kill -9 强制终止进程<br>kill pid<br></code></pre></td></tr></table></figure></p></li><li><p>退出状态码</p><ul><li><strong>Exit 1</strong> 通常是脚本内的问题，需要检查日志。本小菜在分批次使用nohup执行脚本时，发现脚本总是自动退出，退出状态码为1。后来寻找发现是自己的bash文件多了一行空行，实际上是多了换行符，导致脚本无法执行🥲🥲。</li><li><strong>Exit 126</strong>通常是权限或路径问题，需要检查脚本路径和权限。</li></ul></li><li><p>查看文件夹下有多少文件 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -1 /path/to/directory | wc -l<br></code></pre></td></tr></table></figure></p><ul><li><code>ls -1</code>列出目录中的每个文件和文件夹，每行显示一个名称。</li><li><code>wc -l</code> 统计行数，即文件和文件夹的数量。</li></ul></li><li><p>从huggingface的镜像上下载文件到服务器，步骤如下图所示： <imgsrc="https://krseoul.imgtbl.com/i/2024/08/22/66c6b5110cb2b.png"alt="huggingface-cli.png" /> <div class="note note-warning">            <p>注意，在每次执行下载命令的时候都要<code>export HF ENDPOINT=https://hf-mirror.com</code>，要不然下载速度会巨慢无比😑</p>          </div></p></li><li><p>查看当前的python进程 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep python <br>ps -aux | grep python<br></code></pre></td></tr></table></figure></p><ul><li><code>ps -ef</code> 显示的是更传统的 Unix风格的输出，注重进程间的关系（如父子进程关系）以及命令的详细信息。例子如下所示：<img src="../img/ef.png" alt="ef.png" /></li><li><code>ps -aux</code> 提供了关于资源使用情况的更多信息，如 CPU和内存占用率，且格式与 <code>ps -ef</code> 不同。 例子如下所示： <imgsrc="../img/aux_1.png" alt="aux.png" /> 其中，<code>STAT</code>列显示了每个进程的状态，其中字母组合（如 Ssl、Sl、Rl等）表示进程的状态和属性。以下是这些标记的含义：<ol type="1"><li>S: Interruptible Sleep (可中断的睡眠状态)</li><li>R: Running (运行中)</li><li>l: Multi-threaded (多线程)</li><li>s: Session Leader (会话领导)</li><li>S: Low-priority (低优先级)</li></ol>这些字母组合起来，就表示了进程的状态和属性。例如，<code>Ssl</code>表示进程正在睡眠中，并且是低优先级的···</li></ul></li><li><p>查看当前机器的内存空间 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">free -h<br></code></pre></td></tr></table></figure> 效果如下图所示： <ahref="https://ice.frostsky.com/2024/10/08/282d1ad2026ea2c7daa86061b1ed73d9.png"><imgsrc="https://ice.frostsky.com/2024/10/08/282d1ad2026ea2c7daa86061b1ed73d9.png"alt="free.png" /></a></p></li><li><p>解压zip文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip filename.zip -d /path/to/destination<br></code></pre></td></tr></table></figure>这将文件解压到<code>/path/to/destination</code>目录</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

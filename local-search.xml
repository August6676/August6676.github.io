<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>本地主机连接远程服务器的几种方式</title>
    <link href="/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>从大二开始，我接触到远程服务器，在这里总结一下本地主机连接远程服务器的几种方式😎</p><ol><li><strong>使用密码和VPN（可选）连接</strong>：这是我接触最多的连接方式，但是这样连接有缺点：安全性差。<br> 这种方式有时需要使用VPN才能连接，因为VPN可以屏蔽一些网络设备，比如防火墙，所以可以避免一些安全风险。<br> 首先通过VPN连接到远程服务器所在的网络。VPN（虚拟专用网络）将本地网络流量加密，并通过远程服务器所在的网络进行路由，使我们能够像在同一局域网内一样访问服务器。</li><li><strong>使用公钥和私钥连接</strong>：有过一次使用公私钥连接的经历。这种方式可以避免密码的传输，安全性更高。连接流程如下：<ol><li>生成密钥对: 使用SSH工具（如ssh-keygen）在本地生成一对公钥和私钥。</li><li>配置公钥: 将生成的公钥 (~&#x2F;.ssh&#x2F;id_rsa.pub) 添加到远程服务器上的 ~&#x2F;.ssh&#x2F;authorized_keys 文件中。</li><li>SSH连接: 使用SSH客户端，通过私钥文件（~&#x2F;.ssh&#x2F;id_rsa）连接到远程服务器。SSH会自动使用私钥进行身份验证。<br>这样连接以后，无需输入密码即可快速登录服务器，提升了工作效率，而且具有较高的安全性。🙆🏻如下图所示，是使用MobaXterm进行连接的界面：<br><img src="/../img/Moba_ssh.png" alt="使用MobaXterm进行公私钥的SSH连接"></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人随想</title>
    <link href="/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>2024年8月9日，本来想要感慨一下和父母教育理念的差异，但是突然实验室有活了，然后忙完一小会感觉不想记录了，那就在这里感慨一下：I am a bit lazy!🥹</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm如何连接远程服务器</title>
    <link href="/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在实习，旁边的小伙伴全都劝我用vscode，说连接简单不费力，我这样一个忠诚的pycharm用户，JetBrains全家桶爱好者，怎么能受得了这样的虎狼之词！😡😡<br>于是，写下一篇博文，记录一下如何使用pycharm连接远程服务器。</p><div class="note note-warning">            <p>该远程连接步骤没有参考任何网上教程；pycharm版本：PyCharm 2023.2.2<br>pycharm连接远程服务器有很多种方法，或者某一步骤错误了其实有很多补救措施，可以自行探索！☺️</p>          </div><h3 id="Step1：新建一个项目"><a href="#Step1：新建一个项目" class="headerlink" title="Step1：新建一个项目"></a>Step1：新建一个项目</h3><p>新建一个项目，选择Python解释器，选择<code>Previously configured interpreter</code>，然后点击<code>Add Interpreter</code>，选择<code>On SSh</code>，如下图所示：<br><img src="/../img/img_img1.png" alt="img.png"><br>在这儿，填写服务器的ip地址（Host），端口号（往往默认），用户名，如下图所示：<br><img src="/../img/img_1.png" alt="img_1.png"><br>之后能点击next的，一路点击next，直到下图，输入密码（这里我使用的是密码连接），之后还是点击next，如下图：<br><img src="/../img/img_2.png" alt="img_2.png"><br>还是next：<br><img src="/../img/img_3.png" alt="img_3.png"><br>ok，现在来到第四步：<br><img src="/../img/img_4.png" alt="img_4.png"><br>在这里，我想要使用服务器中已经存在的环境，于是我选择<code>existing</code>,选择虚拟环境中对应的<code>python.exe</code>,往往在<code>Anaconda3</code>中的<code>envs</code>的虚拟环境名字下的<code>bin</code>中，选好了点击ok，然后点击create，如下图：<br><img src="/../img/img_5.png" alt="img_5.png"><br>之后注意选一下相匹配的文件夹，也就是你的这个项目中的文件，应该上传到服务器中的文件夹中的什么位置：<br><img src="/../img/img_10.png" alt="img_10.png"><br>这样就创建项目成功啦！</p><h3 id="Step2：浏览服务器上的文件夹"><a href="#Step2：浏览服务器上的文件夹" class="headerlink" title="Step2：浏览服务器上的文件夹"></a>Step2：浏览服务器上的文件夹</h3><p>在项目创建成功后，点击<code>Main Menu</code>（就是左上角三条线的图标），之后点击同行的<code>tools</code>-&gt;<code>deployment</code>-&gt;<code>Browse Remote Host</code>，如下图：<br><img src="/../img/img_6.png" alt="img_6.png"><br>之后在pycharm最左侧就会出代表现服务器上的文件夹的标志，选择对应的远程主机，就可以看到展开的文件夹啦：<br><img src="/../img/img_8.png" alt="img_8.png"></p><h3 id="Step3：终端修改"><a href="#Step3：终端修改" class="headerlink" title="Step3：终端修改"></a>Step3：终端修改</h3><p>注意在使用远程服务器的时候，我们往往是在终端操作，点击终端，注意<code>+</code>号旁边的小箭头，点击这个小箭头，选择对应的虚拟环境即可，如下图：<br><img src="/../img/img_9.png" alt="img_9.png"><br>这样，终端也切换到远程服务器的虚拟环境啦！It’s done!</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Useful instructions in Linux</title>
    <link href="/2024/08/01/Useful-instructions-in-Linux/"/>
    <url>/2024/08/01/Useful-instructions-in-Linux/</url>
    
    <content type="html"><![CDATA[<p>这是第一次正经使用远程服务器跑数据，遂记录一下常用的命令，希望以后会越来越熟练！🤗</p><ul><li><p>查看显卡情况</p><ul><li>1️⃣ 简易版  <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li>2️⃣ 更详细更美观🤩  <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> nvitopnvitop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure>  nvitop的效果确实更美观，包括进程也展示的更加清楚：<br><img src="/../img/nvitop.jpg" alt="nvitop效果图"></li></ul></li><li><p>查看虚拟环境列表</p>  <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">env</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></li><li><p>多人共享一个服务器，GPU资源稀缺的时候，需要进行<strong>占卡</strong>操作，确保一个人在使用 GPU 时，其他人不会干扰或抢占该资源<br>  如何实现占卡？编写一个脚本，在脚本中执行一个死循环，这样就可以占用 GPU 资源了。例如：</p>  <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvidia-smi<span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token comment"># 选择 GPU 0</span>python your_script.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>脱离自己的终端，继续运行脚本，我常常使用的指令是<code>nohup</code>，例如：</p>  <figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> python your_script.py <span class="token operator">></span> stdout.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这个指令用于在后台运行一个Python脚本，同时将输出重定向到日志文件中。具体来说：</p><ul><li><code>nohup</code>：表示“no hang up”，用于在你关闭终端后继续运行该命令。通常，如果没有使用<code>nohup</code>，关闭终端后，正在运行的进程也会被终止。使用nohup可以确保即使关闭了终端，脚本仍然会继续运行。</li><li><code>python your_script.py</code>：这是你要运行的Python脚本的命令。</li><li><code>&gt;</code>：重定向符号，表示将输出重定向到指定的文件。 </li><li><code>stdout.log</code>：用于存储脚本的标准输出（即通常在终端显示的输出信息）。所有标准输出会被写入这个文件中。</li><li><code>2&gt;&amp;1</code>：这是将标准错误输出（即错误信息）重定向到标准输出中，因此所有的错误信息也会被写入stdout.log中。这其中，2表示标准错误，1表示标准输出，&amp;表示引用相同的文件描述符。</li><li><code>&amp;</code>：将该命令放到后台运行，即使你关闭当前的终端会话，脚本仍然会继续运行。</li></ul></li><li><p>赋予自己的脚本权限，例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x your_script.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>使用<code>chmod</code>命令，你可以给文件赋予权限。<code>+x</code>表示增加执行权限，这样你就可以运行这个脚本了。同理，<code>-x</code>表示移除执行权限，移除之后，你无法运行这个脚本。</p></li><li><p>杀死进程</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> <span class="token parameter variable">-9</span> pid <span class="token comment"># pid是进程的ID, kill -9 强制终止进程</span><span class="token function">kill</span> pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><p>退出状态码</p><ul><li><strong>Exit 1</strong> 通常是脚本内的问题，需要检查日志。<br>本小菜在分批次使用nohup执行脚本时，发现脚本总是自动退出，退出状态码为1。后来寻找发现是自己的bash文件多了一行空行，实际上是多了换行符，导致脚本无法执行🥲🥲。</li><li><strong>Exit 126</strong> 通常是权限或路径问题，需要检查脚本路径和权限。</li></ul></li><li><p>查看文件夹下有多少文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-1</span> /path/to/directory <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ul><li><code>ls -1</code> 列出目录中的每个文件和文件夹，每行显示一个名称。</li><li><code>wc -l</code> 统计行数，即文件和文件夹的数量。</li></ul></li><li><p>从huggingface的镜像上下载文件到服务器，步骤如下图所示：<br><img src="/../img/huggingface-cli.png" alt="img.png"></p><div class="note note-warning">            <p>注意，在每次执行下载命令的时候都要<code>export HF ENDPOINT=https://hf-mirror.com</code>，要不然下载速度会巨慢无比😑</p>          </div></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

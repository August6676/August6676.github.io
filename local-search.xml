<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>再学机器学习和深度学习</title>
    <link href="/2024/10/11/DL/"/>
    <url>/2024/10/11/DL/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="f0e2bf2c88ded9836ececa09140dec04e157a63e3cc1ef38d46f130631deba8d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>October个人随想</title>
    <link href="/2024/10/08/October%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/10/08/October%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e3d8e83d1bbeaccf4c38df2695b6b02b113b8d9a7292ca79ad944237f09e0111">4630436162ade97ba2718b7d0c4b3b63c46c676bbf2ab3c1085993e9507f3e5c8b83eb1bce80b723a0b87b36c6ab8665f69b65a8a429a644e017352bceeaa9a31a2d31845a95edf5ddd7b6f68977a1c800ca29c691e924f36c1e69682c59581181d858cafd1e02bd62f61af9660ff5de0d77603fd60921c4adf027815470dd4e2184dfe9442481862900ac66a9b0a9989ff09f2e92c17bb327cbf4117b9b3ba6af65b030edaadb04b8858547d2ca5eedff64b2452690e8c2614460a04721fe25e340cd720b54f3af445749a44da6101e79a5b0dab4d9865ee7393dbdc4848171a8a3aab7d301f47aa0b2f3215bf7e1c213f3fb62974b98ee63bd5dd56628ed9e394ab24f48b455dc264734bfaee5c8cb2d9b1a484862984cecb1f78c35704a3273d065ed501f1a1eef819a2b68e25266e766d270d8dd46ba3f68734608d830aec4772b9e36e71f0016af8f7d2e01272b0ad74656d42e89053f11c232136ba85bf4f89dc26ab6f65f3f6184f0b3915612b2a25516949fa9be64d52e6820e2016906a42626e06a6ed8f8ca817286cd64392bfe5ec38942ded64efe02822e6434f34a79eed5825a689f3b15bc1e396f552082a195033b493dbc6ee2bfd6c0fa95c3749a5def8e669130ce390af3f070619f2b6523535eec5067be51674fe10015275a8a9ae95b9c86822b8a2257db2f3e422feaf9eb77df4304f5f97b5e41431daa32cb38edfe427680a4e5aa18c91fbdcf4253b933ea92a8d749a1be25d76f4e5a2c9bfaf47e1fbb81af3aea1d733ad77b2d8245a2594274707ce3f7f47f607e5a3a38f7f15a34534651827727a9e2fa28b0586240da0c9954bb67f56ddc6b423d68615c7c60f90dc925974004f2f860d2f2088f992d9f098660d8a564fab9f185c09974ed9e1b6bf699e0308610d4b1f8cd5c0f85ff3d80f6fb78dba6693cf2a940625aa7d7cd71d26cdab4a756ada22014f390e1da85b2dd289c5db7911e0a285e9471c8e6a5d29c190b04aae39b12b977b17ff5c25d6965a6e912709dba74c2f03f295690c2c17c2671186b22582e7464a4482ea80adc5b036232d3b6f01feb9d98892ac41fbb16dea2424cc86701261ed5361f814c0983b1a4974006bb5d624e17ae6a00e3c8ae76d349a17eab8f8158587c6b408c9bf2c3319d37741bec51ecae72e1ce87742708fbacc09e3a1f43a7510baab8440189f7ea9b303a72dbe775c2c542a0f27a1bd08dd8e3a2b2b6ab7adadffdb0827f4e49751f9ebc1efab074e734dc97e596c670438cc61818697e90fb6656d7ffd34e26b56fcad6b454e91720280cfd076b22047c5226b895932df49a08c1d79ef01cd1952c35c28e6c7531fb661e8bd62e8cc5886b674134d68bc74442946b15352fd4570e96d13878cfe550c0d06a01d9bacbed2b2c12adf9a8dae45d5b0d783b846017d2e731e5cdd375541a17637ef5c15f358e9a6e072b9fdf3613b34c53c44d7894f4c015da4228a6f5ee9226d0aefca00ac6683437dcb9d6ac2adf4608af1d4ce65ee6fc168e7f1ad387689fe76b617933322ab26c722c46daa4194e2aea87e8a76650ac0f10128659fe8643a7df39cf5a1db38fbc76ec4a03767c5edb35cc091900494ba0adc781aefaff7bd212f32deae6e0af1de0a69788ffeb7ea18818e7360d4788fd14d4d0384efcb8aaa76dab416b6fd7af1e1701be2ab792edf46405e30e2d92ddad5da37b584490591cde0675708a33601d73db237dfbd846eb5102c3809368f8edd57a505197e9a6d7fc43437376b24cb4661e211e053495ea2f5901f22d765e95fe2f95129b273de7eb7ef2ac86256e2c37fd537802183142e38182d71e22b273443a63faab4d5e60d1514c0824c1f54f9cf7ce131626c2133c0907e57d6ccf1e797af3f98d837515cf86de9acf947d0962e951dca67fb55421fe2917c20016cc239635a1a922d1d60ad1c86105085405148856bee0bb7d5378d6bcdc98b2f5429e5c98403e83414356e402b1e2071380b8a7b1ce211f192504f82c9bca10dc4d4a42a7a645e36a333468fc11e14d691cf0351054243fcf51a46e2fb5b89393bc4888ed8cc7b32093c812599d79465c3eb0cc5278f867b8c492e94b5b213542049652630fc3af1534a2f55edd2d74366f9b082e1ee6362bd20430f6d5a506d55531c3d791c129abaca19c0ce4003ffa223fe90f612fc0185d3e02a01b9fb8268aa9501181e015da4b8ab77fa443e6d070cd8229c62ab6fef8476cb8002ba224a8674092ba01ab4c81d8b4a6e9a3af2bcbc9a9f83e5ea335c35aac3356cc9a4e9f8fa978050d369e5bf013c5fe8e672b36ab343f4383db8b262d42290c4ffdc14875a2b77b1475fab8e51890ffc58abf99133488ba8ea6e49940ad040d93d21906f9d8cd7163c5c11852b6e9b5edb08c391061885dab27f1f74c00ff59017ef1e27e8f390408bac936ebc2c57ec9886a5de8ad81d36b7cf26f843c9f2d567f688a6650ee6ffbc1cb3c1d865b210dd43f45a03eca5d66c2b2e42b8de13bc79667e392dd33579a7a99ef55ffad8f1829fe6a1bebd2f57239cd3154fe0c104f0b21422a01cda3d0601ff5f78407926a2ed4b4d98f60acf75305db99009f78afc4988935781ca632f3951cda19fb763848cba88014d06103ccfe0b87141be301705415f322261fc0b81620a18125bc6ab2fac04d332e5fd31bb3e1ad8a4d3a12c9d9121f39fccd7422190d56df575bf886a04a5794f1b8102add03db51eb323e651df069870a57e50febecb0b53ff94916fb91bf03a944d694a5d220b891998edf19627adf665efe29b6acd15261f145b5a3f4d79b69c946112081c4ae21e38036926109f27c9e84a757933447c2a56cf1a2cfc6ac6cb50682807bed1a7f2d0192090a8ec0fa59a4a3090fd90548fdf7a95129c020f101be68a6df95eac6fa48328af3dcf439faac224ac983518bf9c569de3ba74e63f123697fac86b80c284c81819e7eccb6d6055b8fcf6c5befe2daad83a4a0fb99dbcbe4bf1d58b186ec00a86502e4e46b01bac841d3b32d8816b6e457a41abcc27343b3b8aef8de67d7dfa02847faac16a2e8e35274f785cd34960e78ca515ee39228379ed7d8849b84990ada5532cba2142a83c89576d6017af0fc37bdd868a981268fdf807f2bfd543470a11f7ab809f05776c56a400cff0329df28a283d645bc1fb7e87d7d98fc1492140eaafb2cdcff1af6bea799c1af2e0cac5c6f9c6506610e7b8fae280213bb6c7d419df43041a58d9b27ff146c8e377a77d9f7cabe2131d4c609d07fc8de63189a15707827a3440a99e90cc75533fe979ee3ef564e0f1509ca6596ce139a9b39930d25069888e4a8ebfdd969a51a7984dece5098bbf50da2e6e5407e48a8bc81255928ca87ebbd3558585cb46eea8208ece0f262dff22738e3399e42b45326c0d6f1c39ff4dc325176f8d4c5d1a4dc51c6f42731dd0a4d2957fcdb389ac53d75cc3b6d8f5d1db416359c582948e90e7515d962a011b0b7e6e857f486d1a8a16aabad5f7cfbad5be22a8893d542e8eb9bd99bdf910b7c4f06f4a8ee4befe61d5188a35329e36209fd14cf6e09e8e33e2e604905b7b7d241d84ef76710e5b6fe960381da39bb3532b49a957cb50ed861d34f915703a7b7954b4014dd1d517fe27b6617a57a077dc4f241fe3f66ee806b7d0fec2a1c9773444f612a9b6645de0d69e199da0c660839b64c8353ed0cf378a9d35dca6f7e3f0da296bfe6c5004c6bb9c86fa1355ad4e6bd35500611faa6a7ef5503c9d32a56ec2d4c825283ef17d8b73d294e94a782aa0e5d9401ca08508056f06799fa2a7026802dd682c3f27aef8ef4ec5a59243b74f4dfc028f0762a1363b47ec6b09384770ff5ad9be5945349e7601e844d624a8d93543a3121ea8d3f5e059dc3ba578e727c6ee04e947c176c59d68ec536c34c72db679a8d739c923de2fc62ffe3e383561541332d7065a06ed473bac6769109acf4f47aec5c69911feb708e9d5f05371e03df223fb3189b55714f731547246e832c2bd80b28379f0b69a676b96723410eee0cddf6b121807f0ce96cfb8113507fc88b1ed864d3577ebbe10fcc62e0740296a186ecde2d194af1c6e74dffb28ca4e1676f13517acabca136b361ca9b642ab4b10003693b82233ca17cebd00708516d6527071d88ba5bed6c522c6ffbcf943987e39d0ac07b99cf721f26211763cd95673d569b5337e82323a63ed4037ba0d8923031141acdc0124f2880453f14ba97937c9140520f0b0b65f6fbe9a59280167dad83ee7962d2e8aa7c379dd995c187d8ae1c7005d9402f76812d8b188648de0b2aa2b874e7d936d2308c77b6f9fa04726cd4ae0f70765910b61270f175575782ab409f44ea997195ca9ff0152a97d389b10f1a87b406386b9eeecc00b4ac8fe9edc2d4aa2f240b61cd19c97cc7399f644d6139c0e2d3a28ace3344d96e99fb830f83c85243ffa6a3a08feae0cdde3de39653c203501b10b5d4b0126f1d82badc3b5637cc98c75b2ddde7a7fc2c9460bbdc5d6540ca5af73fcafadec8889be5e1bfce9abb51574a890dd6a749667ca90d62d6741f14663ebb3a96c96fb37dd0f4292f259be148dd3d25ffa8dbe55393daff457ad9c9022321ccbcb06f2aef4bcd9707110b0569512c09454af2813c37cebea5496af89c44a3d25cd059446d9db79a16aeda3df1b0f6956e307bf6c378d550351410479aeea6e5599018b2f347a49223d8ef5fc42d21b84cf63f1556e8403177ff6881a20a1e6fcff69133953624ff6711ded29c63a1878285f1aee0a51218913c5ac49dbca0658532c05040e902451616195efae0d643d841661b03cefae752b770ac19497265faa518088e879202847947f31d2c1890f5bf89657333652d1d054769d18f94409df4bf1ee932024e9a8342b0c7785a980cf258c4bb0e61c9b28ac1d2d1eef8db2c989b7244b663ad3ee13fcd9b80202f538f482ece0950574758d74507c8cdeace0ec53f497906c05f5016bfa3ad64711518793d46169bfe9c9d15749b97006062e14f3794bc50d70a6e7d027639dae818895f794d06ff7c0832e5088c5905e70a5fe529d477ad25b26894e79ed66012f20faddc22514e69883a62c3e4ef6711e412402b4ae9be2aca8657c8d06155c1ff4a793e78254c05f76630a3438530484c4527b1cb63f32ed3b8800476e4da9a205b54f8b2d6c46627ca18c9a143b9fbbb62afacfef9a136102bd9433cd712744d9c5bbe1938c726f7a2aa2915df9493b85619cee717493b4afa7097ace0d960dd87ad11aed63a5ba2b46f0a6d5b0ab008a81dd35171c45709c0c54dcc94f094f5ccb39c51fac40df70ec219a372085f38a6ce428a8e61591699aa8de0f78a4004bbe9a71f9cf29eff3bebf932bbd7e854d4c42f0d04cc7cad37ac917d8b431997e03e2a82304c3a487cd9ebd1fe3f23ae33e6f682ea270b90c6b104d0385385aefebb180fa5a7cf94247e244391d989cdd275c099459ac0d5d4bc614fdd2c3222a2f70bca8c1203920f61ae452c119407d4d9d90913c9cc919f9dff9c41f472475b9f7d57e99d85b5f42482430f73b47290aff8983914c3ee85cc8e2e200f64c336e7845b1e0d3b370323635cd8f36498428c4640b353bcf66be088b6ee4849b69480f3951840d511c8d1ff23e13474ad1492486be2fcae26c38d4b15bc5c5aa543cc86789f6c5e4c1e8e0ec68a1dad1ab649ec8fa871ea4496ff81652b0faa02e0431baa33e14102d7f2a934eb51fe20f13d916870a45301352f2e610461185edc356994dada1e2d3068a97f24d5d9268a61adb36a28efbc0ca8c9df202c7dd7087e804c1906d20f8d5d778087135dd190e1c929f8e772b3af52bf1f49b7824abf828f014c121b89f74eaab983c1016cf1786bd046918456dcfecd7becc1f83ea60c2bee7e993ceb0815dada02051891435c4dedd053d345d793c211685103b6e3310bff21871f2b5b84976ee4e2d842457bf6fa7df2ae8e9d88e4c72d83ad06244e8d8d9a25e77bd70431b5ba630608b25748ba94cbcaacb5556b5c1c9d0924d9bc926d984e03601877406a3fda88406a32d7f8badc6c56e375e002e2b0133668f0b624aa69ae20a4d1e0bf082f8f87d4d659defec6e99f389b08808df3c63221927304024165ea422798006327d2d7255197ccccaeb9032280f4c5afbdbf174dc625e08ebc81cea2e200798bad131ddebf8c2bb9f10b41a10d28adada029bb65136d504be10130886d26dd5455055d8373cd49a91c527bef113bc1b02a98b790b80facd12aaebd86a8b59157dc027513c9aec748557960baf29852de6f1307bc52a7642e47ae6781ec0da4f884404f8c25b8cd72e822969a67c0347de46284b1dadf475320e91c5587dd39b2245c81f2add68251fac2ee341b82993984aa9c695ebd42ecd4d4051695d7bd7e48d87b16808d53264846017ba7bb8f1e397fbabc8caffc96d11f277635f964acdc9d6dbc1e5f77f2c104f8b447af0e0f985a56c068443a5b28333b2fb8d7e6025a4ab05d74b018df27de380ad1f2ec5a32f504e9da944d93897c9cdc0145fb34fc04daa9d2bf7462a5db54819d927a076a795cfa3a0bd2999faaa9b196c635b862e5ad53a9366c878b919cd300107b0c206f373543c8f4fca7ada454c26e9f310122f1c1113d6616050d044c06d24cfe0a7e798db2cbdda46eaa222a0786f946f03454a59de4ed386156c412d41f4c5270f0564fe21a09e5ed0a8fa7fea7d41b5a8e82eccf6004252a71743ee31f0b43836067ac14dedf3ce2653180a681348cf79f8549e07c82c87854c8de4a1a4f200210be102772d08d78d5e1a30d5d7a21b63d36b4fdb1ffff83e49d27bcf82091e2f4de7a51053a9a13697bb87fd165c779340fffbe428edd514dbad002454f19986b95975715dabafbf74f57bc9d75662c527775e2e88b8d275a4b96b5d451cd359208c791d5bc53708b0d4fb524f715879813ccb7b57db37965f35632850c6aa49a514a860711a3c616812068e3c2dee54d0b6e0dccb7a73d3c18db167ec4b44c04321dae64225c2a19f59be8d16d67fad46401d8f29357f7e753d20cdf0abe2d6ebce61737af1ad1263046e95845fee28af6d42806388018e94b94f38a56d1413997cb42213516c4e29df3ef57ce53c65aef9b5a52f0d9d9c335620ac7695ef9a73788e4f500e7fd1a2835ad16e28d5737651e2b1858b541675ffb9c97f31252239605784e1e445ca55b61bee2c65310afa518c9db9e4f52ff6ec2fe62dc8cc9d17cac840f90d40cbf33a7b619b212f026c08959c7c19d2239f02036004fe2e09af17a0a19d477097c4c1f4de0e6f1a28f67c78c9eae71abc8bb835aadf432b2f7b3e7fa28fd37c7f687162fec94fd07ad53bdc5de76eb3d2fc6a5ee74180c4ab96fcec753a9790d157e7aa108c77ba4442fb9f6b720c67d9e26d14d9c61cf4e7405ae0f83ac9ebe54ff8e35abd10289088506aa0ad5701357c23f4584ef003cc535b931ab29ec1b4839a067ab01a0c53910e62cc5e64c2e0bd194f672249b2bd19f1b47e099540e714b9c41f1ece2b3c112c2e9efb23a3580efa26cb8d99d798a6c3d324f80f112857793177ec7be5ee7bc907084b9682bd9429d74015657fbbbc0d1719ae60c6e4609c820ad475d948d3ba2ccb958753452dcba60961dd6157669a238d9307f560f9bbd5eca981bf2b939d3a49ba885632caed0fb8e0bb5b974a9a0fc55736d13e83241eda2b204ba608f3e84ede38fa7fae6143adaa34b3edb247b6a803f74a7387ac901fb8c903a7eefb069da14db81a97bd5f034cef36b4be29ca4bf8c167186c4cc9d204f6276cf930b53bf5288c0fd55f862f6e8491e3d7472a7212debfc3a7811617557f8df0f6be70840f7d22296a44e4a3ab72d61b1f24c339f6179ffeaa174ff45d04f8f8177056231a2f8a13745daf32dd501adf2e04bb12a59bf712ab54cbfa777efc7341698ecd0b4aa37e1b0b844204dd1bbe0e252c795f58e0a180b3816616f2776b490b629e0f5533dc3dc4b87dd313236c246ded7903d77eebdb95e6808b3a1a74991d5bd1ee979819b64dbbad2cba6cbe1b5da8fd95a6dbfc3214406683ab057a0b89439fda8250d7a4be42df0d909279492d9d541c8a0e273aeae22a4e8261d9675185f0ce9fc8bf1663541cf4a6cd7cc90fd349f2be1b715e05cc34bdc51510dda0dc9221358776efaffefb844d661d8cdcfd696ae5b56589fc67c983d859ed0e31e0bf1b98e94539a239c6e5aa4e7a6ad4ff437ea72a2b67f782248d77a9e71297457c4b4cf173afb3b8bbd022bc311ff4d880a1352872cb02a460c7dc26f22ad68fac83fee64a9beeee3866241cb995474eb9be2235e94b33e0642d3819b968bac4b4d79403d5cca1eb4aac138b47f5ca42dc7f9c4dd4c5efc082fca8f9c4c184613750146a114b135fdf55f1f29d87e17237eddabcef9da79b46780c4ca1554f16f6138ddea214b45ecade0b8c1e0a135bd9f1f00cff68917efe438705047126d417ac1bc2eba630edae13f70d9d88491c3fd082263269608be209df0d8e4579f4189eeafd63e3492dc703897c0ed02d0a2aa81a48c2f99e1bb758a704ae940ff60a5da1285377598d0284bcf7ec38e6095ece72636adf5a17b0b33e893b8795d01efb2226da8cfb3447627fb263696cf200c0aad7601ee0dad3c4bc9bd5b9a6a3a75b32d1249631c9226ca47da0faf238a53a7e0da22abf29d009ba39bb8e3b47500d14f3e255a9aba8691bc3f3a6ec0ede30e075fc0ef6711f2afdbe67d1cc44b4e96b506c80d8595f098c23d7f5b7cb95b806eea4380bc398a92a854c65ed6b09821a5ba806111acdc4518a51f8125a656b2c4b49e8535291831e5aec5e03e15f2abf9659ef509ab090bcec1e9bdadc4dbfce2f43f75fc0dd9bda1b9334cd475415333ec2f72553b06fcbbbde048ed893a512f3595b5bb9f76ef0c731f18f8232b0fd0bfd76647f0a59b6c14d5563bdbfbda91f6e6f07aa8783a6db3122b3c38ac9b368a03acc840e571b474bbecb8d23d9d444b3ba488ae1facbc08b6f5c17f1143a327b91d64b1ea17b5c389c4f6f7f095a93a4c49b519446a5543bf752d9f95fc2ad94c21541cccbf3d213e74d8dfec4b79edbef2f620ca9ffe5b487515c9c4cbf547dd88c893529db11b6b27ff82258822d62585eab535f3e6bad7ea2b172b71514e4de59df12df5c83290e4f8e4b291aa72df3fdd69334cebc24762c084f92deb61d58df899f594f06513456dbc6507532efa08890c781f8cf71cee920c38bea331285386f5754e3d19effeb0d109c9bbb9372629aa5109aca18ecb7a35bef79747244f2d49db38103017fcd03bf44af30882697bdf83ded521f73f7e3b09a8e893208cca512f24df91ea8357ecf5c2128cfa142fb18d9e8b0f1411d3a10d901d211a9d0908a3ea1ffd5ec97dbe52320860f65d74fa743dfeb29f13b5561a6d87d3276514f26c77d5b424c5c2e5c456d0a81f1a1f91b33b46272d47b12221cb8f97c973dba21f0830079b3893a56afeed7668ed34856d7e4962cad28b527eb432c164efb2d9f7d6b42206ac251e0d40b59add7d57c5cb169a00695ac9325f080b1c5eb9327fef6ff45e4d17f3dced1d93095d30e9f010c5f5c60b70535aa4c7182dda8377a19aca88438a40d2325c79fd09b320947c50669d9a45bb6d37ccaa5b66423e372c4b7101cf4a888b944702774ce1a590527f3433be3e05222f3d7197459c2253881c373eb27623bf3d087167f08bf46572c5cec26fe1f03dfedaf111c626c122f00510941aba5134955ecca0af95bf43449d0383c36760e94eecf392279be7c067d4312bd72dfe2fed42582d6e78a5f618a51f6ab39d9c6ed9df4f0bff0fcbb19d98e2c05664c08380103ff70405f7f25fdf2f23425f8597c038023b073a191d33dc11c83d6d2333995d2e0b79c37499f278b0f5e3e59f0ad96b048a5d50f093d5d5e44bfb96979d103df516d9f79155eb963c6da7cc1fe89277be9249f3ee50d7c97eaab4ed5d8e8cc779ee0bd826fb5b293f926ea87f248d26e657a99b10d699b651c986a66a72f9a57dcabf836f69a3529041f4b8c73a7e558f6da6254bc34a4c0ff4d71a68268b87cd6824d66e18cdce79def9f7aa74c1fc23c969173fbabe28a1138fd18fa0e1c4c1b6484f54aee61284f736c5d72f69f8be4967b86e45b7996f6eac59789128221fb9e221d0ace6487203cfa2f4cc6da8b58c51088524345c399f3cd799b6c17b62ab12c11836fc015d18e07ca104198d642578c70e58c5c830c50c7b1664b1dd69611ac52c17ca27647704658def6a1cb7c53fbbcc18c2ede0584a8eccb934b5a21deb3bd686ac646277f0d48bbae3bd9070d79a946493777a9b4b2e385d2ec73ff40bd169dad0141e76ec316fc9fc0a249468edb9da3c6c402777748bb5edfebca0410b4a158d679ac00cd388a98904bab0460f56d7dab60ac9cd4da9d1c6e721dd82348fb44b1d1f6ac368bedb1cbdd71dc6ffeddf190c70608d7e72efdce034c687be5c5eedfefabb5118dc78f8e8543810da3e6dab6e69b844ecbf6b427b72c234fc8991a8d9393f02149147b18efd80ce2e05630f4504ad138ff1805eda15314af09bdf08a73c26528c7779b77b01276663613355fb826bc4ce4ad9a7476caf7c2021200f52448c789c4a84feada16e66f0abc99bf53adfd48bfab4c00de302b3318f9befc3f574dd740e78888ce27ab90881c7f6e12d9c5799d1ad3a93512def5f189fabfed956f0203d217f41ff233f5728fc789cfb20dfd274debfbf6a0b09acec73ca5c68e03a8013b5bdc5434af587236d5eaf4a6d17a765a78a28ea21b1d85de0d8a17d12c71be34b52dfe87c838f84eee9797f4b8ffad7e1e49b769824100eae15334a20f4de16b4016db87f48e84d721929c475f375cafd4f02cd3ac9657ae1c45c1efc45d05e72155371e0649a54b027e5e6e71b2bac140c6abe6ca1229b10afa37a34b2b00778b3fe99533a38889812733ee409ea130accff27f608524c984a7e2b3d2a27115c630f3dba3507a75307dfe6992d5fd9efbf8fd935c476a44238b56cd8454f69786247c9e0ce109a7157736d8fe6875085a17b06aa4701ecfee25226cd519e229d7693b92642da904195288256288dbc29835c7cd177cdd5b84e52467e09a604d815367d1be888534303f1aafb2d56cb58f40cdfa21e49346bb97b79c5cc0214e38531680ba337cea2b150d4f6cb3feb31374b2080abedb8c4a22aeab07630daada5e1d3bd134c953f88dd3503570757c6d8ef5201cdd1076d79d2a5f8086b8373e0afa4a8a93765e965aa9d2785641788e7b528ebc30036ba898b9897ba07d0c99bd30fcf2aa8d222278c0a1f27e5e98b1a553519c0f8b1b183065f4c7046c0856be53b5029bd8b4ef2cae87eec02c190f8a7761edf442e48d3d543d041269cb3d443470ae24b490e6aad450ffb4eed5a955573933e30eb2986ec55bcba1f63dc02b0e1882d642ad61b9000bcea385ec384dc2158680d69b0deb495c9a7c83a3131f60a16b866e35d1ac853f81d7ce6092fb3466cdb131c68a81f2d02cc2331f5ddd11aeb59ebac16be528f5f2f9d56c2164953dd12b6f22500399ad1e1c37fbc4fc3313b75c9822cdf02f4a47c96040d313ed290b2f3f3bd24a71df0974573efa6e0ac8f0ad3b1590b99454f6d76c087ef322e0c44901507a6b5ad410135a7a2f473b300aef871ecaa7b07426e58cafab8d88ef95e6ed101e848bfa736ea45d92bc3a66ef43e9ca3a01b75f7ff0db6176d87f6f20d311e1e6575422d314d8cd1c94991f10afaef949e6219e0bf99a248c46817f60210ff9f4105dc02c340fc5c8992273bcb32fcf72f4bcaf623ae1528b1f6ce9c014ecf989e0f348a6cec0c717e0522cae9e33a5d6c700de3a439f5d01e7211c5b39a277cdbbc5caf20acaf5e7232b5e0be4a53a86d531c39b935e4c15ed3b445e7f35a3ae5f6fa2f3b9f314356170719aa5f5a64ffbc023f48236b3977cd82e7a3cf018b66b3f3059351e95bf4d58b596d01ffbfe808f5dfcead5274f198b633877da57f430c74e37a41ab0f1713c8095badfcaed02b9526dcd77d571a2db4ec1cf2dd7cc6347775e825507c4d7b87f898affc97ba3a84291488c3e6e29bdf064407288c1dffb8b9206107eb040832e5020a7a547b09447be3e0793b02cc014569cd8a0c4650ce32e40855cd5f129be5440ac4787187f6d62d689fb9c13ebd6b7fbb12e0e507040f6e86f887f6699b92df6bef2a9fa9c2c0bf28549a04045d6f65e23dd4ce2ba9e5c066db46204cbffcc0ac114a4e3c470b74677ccb215b334cf64f001692d7b39ebdab7fef707613581eab66375c470b6c486ef27f026d391fe637dbd533fee3d9dd059a978daf6f36fa4b6891944f1798fb3c19e74515532c4823511785ab63b26f45b184fbdf417ade2069374d500d9320d72761f122e3c97e5dd0ecbcbae29cee4744b7b4c50095fa54c04b579c43ee0df79622245c40723f09b2834d107aca3c1dc4466b89e8b45d9a924aed18653e11d8929df01458beb41024d8ae88feb8473b665e420185c196a3ab35a6e66bcfd1a738abeec1ef2428dee03bc3dd6e2e835a77d3a2275bbf2bc7b3ab7a019114721bd465450cde0b3b2fb4773567e93df2efcf9914729c5cd4d59ce7bcadb77d43df3c1918f09ef0251f564c4be1cad495ccb5395db399df1861646fc230057aeb967613e2b108b1138aa807fadf2500d9acc5f4aa6367b07dfee3caff95b3439e5390246957fe758885318f3d1e93ec5618f012</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习</title>
    <link href="/2024/09/30/Docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/09/30/Docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>很久之前就下载了Docker，但是因为种种原因一直搁置，也没有学习，今天一起来学一学吧~😄😄## Docker介绍<strong>Docker</strong>是一个开源平台，允许开发者打包、分发和运行应用程序<strong>容器</strong>，使用<strong>容器</strong>来隔离应用程序和以来项，使得应用能够在不同环境中一致运行。</p><p>在和Skyee聊天的时候，她说她用的是<strong>DockerCompose</strong>，这是一个工具，使得用户可以一次性启动、停止和管理多个Docker容器，而不需要单独管理每个容器，具体内容没有详细看，在这里先以Docker为主！</p><h2 id="重要概念">重要概念</h2><ul><li><strong>镜像(Image)</strong>:镜像是一个只读的模板，用于创建<strong>容器</strong>，可以从<strong>DockerHub</strong>等公共库中下载，也可以通过<strong>Dockerfile</strong>自定义构建。比方说我从DockerHub下载的Centos、Ubuntu等都称为镜像。</li><li><strong>容器(Container)</strong>:容器是<strong>镜像</strong>的运行实例，可以启动、停止、删除，是一个轻量级的、独立的可执行环境。</li><li><strong>仓库(Repository)</strong>:仓库是<strong>镜像</strong>的存储库，可以上传、下载镜像，也可以自定义镜像。可以是本地的，也可以是<strong>DockerHub</strong>等公共库。</li><li><strong>Dockerfile</strong>:Dockerfile是一个文本文件，用于定义如何构建镜像，用户使用dockerfile自定义镜像。</li></ul><p>模仿着画了一张图，展示容器和镜像的关系： <imgsrc="https://ice.frostsky.com/2024/09/30/67cf83690f2e153549870e881e07aab9.png"alt="Docker学习-容器和镜像的关系" />在这个图中，更细致地指出了Docker镜像是由多个只读层组成的，容器是在镜像之上启动的，会在镜像之上创建一个可读写层，容器的更改都发生在这一层，不会影响下面的只读层。</p><h2 id="常用命令">常用命令</h2><h3 id="设置镜像">设置镜像</h3><p>在国内使用Docker时，需要设置镜像源，不然会很慢，但是我配置了镜像源之后还是偶尔出现超时错误，或许和我开启了VPN有关，不过总而言之还是需要设置镜像源。我使用的Docker Desktop，在settings -&gt; Docker Engine中添加如下内容：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure> ### 下载镜像 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull &lt;image&gt;<br>docker pull &lt;image&gt;:&lt;tag&gt;<br><span class="hljs-comment"># 示例</span><br>docker pull ubuntu:18.04<br></code></pre></td></tr></table></figure> <imgsrc="https://ice.frostsky.com/2024/09/30/6cf6b6e18898c032c49d347f65fe5f7b.png"alt="Docker学习-下载报错示例" /> <imgsrc="https://ice.frostsky.com/2024/09/30/3b4db79d0d03ef2c4deb7352b5b15ba9.png"alt="Docker学习-正常下载示例" /></p><h3 id="查看镜像信息">查看镜像信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br>docker images &lt;image&gt;<br><span class="hljs-comment"># 示例</span><br>docker images ubuntu<br></code></pre></td></tr></table></figure><p><imgsrc="https://ice.frostsky.com/2024/09/30/0cb47e0f38d7ed863c932ae8acad4ecf.png"alt="Docker学习-查看镜像信息" /> - <strong>REPOSITORY</strong>:镜像的名称，表示该镜像所属的仓库。 - <strong>TAG</strong>:镜像的标签，表示该镜像的版本。 - <strong>IMAGE ID</strong>:镜像的ID，表示该镜像的唯一标识。 - <strong>CREATED</strong>:镜像的创建时间。 - <strong>SIZE</strong>: 镜像的大小，以字节为单位。</p><h3 id="删除镜像">删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi &lt;image&gt;<br><span class="hljs-comment"># 示例</span><br>docker rmi ubuntu:18.04<br></code></pre></td></tr></table></figure><p><code>docker rmi</code>命令用于删除一个或多个镜像，image参数可以是镜像的ID或者名称，多个镜像之间用空格隔开。</p><h3 id="新建启动容器">新建启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --it --<span class="hljs-built_in">rm</span> &lt;image&gt; &lt;<span class="hljs-built_in">command</span>&gt;<br><span class="hljs-comment"># 示例</span><br>docker run --it --<span class="hljs-built_in">rm</span> ubuntu:18.04 /bin/bash<br>docker run --it --<span class="hljs-built_in">rm</span> ubuntu:18.04 /bin/bash -c <span class="hljs-string">&quot;echo hello world&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>--it</strong>: 启动容器并进入交互式shell。</li><li><strong>--rm</strong>:退出后删除这个容器，当然没有这句话就不删除。</li></ul><figure><imgsrc="https://ice.frostsky.com/2024/09/30/fcd20a18d1030093004d3560d6bb601d.png"alt="Docker学习-新建容器" /><figcaption aria-hidden="true">Docker学习-新建容器</figcaption></figure><h3 id="启动和停止容器">启动和停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start &lt;container&gt;<br>docker stop &lt;container&gt;<br></code></pre></td></tr></table></figure><p>这里的container指容器的ID或者名称，可以通过<code>docker ps</code>命令查看。<imgsrc="https://ice.frostsky.com/2024/09/30/be53fdd6929408c7e6c704ed60c3cca4.png"alt="Docker学习-启动容器" /> - <strong>Container ID</strong>:容器的ID，唯一标识符。 - <strong>Image</strong>: 容器使用的镜像。 -<strong>Command</strong>: 容器启动时执行的命令。 -<strong>Status</strong>: 容器的运行状态。 - <strong>Ports</strong>:容器映射的端口。 - <strong>Names</strong>: 容器的名称。</p><h3 id="删除容器">删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> &lt;container&gt;<br></code></pre></td></tr></table></figure><p><code>docker rm</code>命令用于删除一个或多个容器。container参数可以是容器的ID或者名称，多个容器之间用空格隔开。<imgsrc="https://ice.frostsky.com/2024/09/30/d878a86dc0823c56123d2811bf3afb47.png"alt="Docker学习-删除容器" /></p><h3 id="根据dockerfile创建镜像">根据dockerfile创建镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t &lt;image&gt;:&lt;tag&gt; &lt;path&gt;<br></code></pre></td></tr></table></figure><ul><li><code>-t image</code>:<code>-t</code>选项用来为新创建的镜像指定一个名称<code>&lt;image_name&gt;</code></li><li><code>path</code>: 表示Dockerfile所在的路径</li></ul><p>不过该方法还没有实现过，dockerfile也很有讲究，那就To becontinued~</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git几步曲</title>
    <link href="/2024/09/30/git%E5%87%A0%E6%AD%A5%E6%9B%B2/"/>
    <url>/2024/09/30/git%E5%87%A0%E6%AD%A5%E6%9B%B2/</url>
    
    <content type="html"><![CDATA[<p>这里记录一些git的非常基本基本的操作，主要用于管理个人的小项目。没错非常简单，但我就是记不住然后每次左向箭头找到历史。。</p><h3 id="初始化git仓库">初始化git仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><p>这个命令会在当前目录下创建一个git仓库，并初始化一个空的提交记录，只需要在最初始的时候使用该命令。</p><h3 id="检查git状态">检查git状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>这个命令会显示工作目录和暂存区的状态，包括哪些文件已更改、哪些文件在暂存区中等信息。</p><h3 id="添加文件到暂存区">添加文件到暂存区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add &lt;file&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把指定的文件添加到暂存区，等待下一次提交。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure>这个命令会把当前目录下的所有文件添加到暂存区，等待下一次提交。</p><h3 id="提交更改">提交更改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;commit message&quot;<br></code></pre></td></tr></table></figure><p>这个命令会把暂存区的更改提交到本地仓库，并添加提交信息。</p><h3 id="推送到远程仓库">推送到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin &lt;分支名&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把本地仓库中的更改推送到远程仓库，并指定分支名。</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>learn_about_humanEval</title>
    <link href="/2024/09/18/learn-about-humanEval/"/>
    <url>/2024/09/18/learn-about-humanEval/</url>
    
    <content type="html"><![CDATA[<p>在这里记录一下评估模型代码生成能力常用的Benchmark：<strong>humanEval</strong>HumanEval 数据集是 OpenAI为评估代码生成模型而创建的一个数据集，专门用于测试模型的编程能力。该数据集中一共有164条数据，均以python书写。</p><h3 id="数据格式">数据格式</h3><p>举例一条数据如下： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;task_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HumanEval/163&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;prompt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\ndef generate_integers(a, b):\n    \&quot;\&quot;\&quot;\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) =&gt; [2, 4, 6, 8]\n    generate_integers(8, 2) =&gt; [2, 4, 6, 8]\n    generate_integers(10, 14) =&gt; []\n    \&quot;\&quot;\&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;entry_point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;generate_integers&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;canonical_solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \&quot;Test 1\&quot;\n    assert candidate(10, 2) == [2, 4, 6, 8], \&quot;Test 2\&quot;\n    assert candidate(132, 2) == [2, 4, 6, 8], \&quot;Test 3\&quot;\n    assert candidate(17,89) == [], \&quot;Test 4\&quot;\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \&quot;This prints if this assert fails 2 (also good for debugging!)\&quot;\n\n&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>在<code>prompt</code>中，告诉了模型函数名、函数定义和预期输出，<code>entry_point</code>为函数名，<code>canonical_solution</code>提供了示例函数，<code>test</code>为测试用例。</p><h3 id="humaneval如何评测代码正确性">HumanEval如何评测代码正确性？</h3><p>在HumanEval中，评测的代码位于<code>execution.py</code>中，拼接程序如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Construct the check program and run it.</span><br>check_program = (<br>    problem[<span class="hljs-string">&quot;prompt&quot;</span>] + completion + <span class="hljs-string">&quot;\n&quot;</span> +<br>    problem[<span class="hljs-string">&quot;test&quot;</span>] + <span class="hljs-string">&quot;\n&quot;</span> +<br>    <span class="hljs-string">f&quot;check(<span class="hljs-subst">&#123;problem[<span class="hljs-string">&#x27;entry_point&#x27;</span>]&#125;</span>)&quot;</span><br>    )<br></code></pre></td></tr></table></figure>之后运行这个拼接之后的代码，<code>test</code>中包含了很多测试用例，模型需要判断是否通过所有测试用例，全部通过才代表<code>passed</code>。但是模型生成的代码并不完全是符合要求的格式：仅包含代码块，实际也会生成函数头，但经过检查发现这样没有影响评测的结果，why？如果函数头重复，那么生成的代码类似以下格式： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-comment"># 这个函数头重复了一遍</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has_close_elements</span>(<span class="hljs-params">numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>], threshold: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Check if in given list of numbers, are any two numbers closer to each other than</span><br><span class="hljs-string">    given threshold.</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.0, 3.0], 0.5)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has_close_elements</span>(<span class="hljs-params">numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>], threshold: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Check if in given list of numbers, are any two numbers closer to each other than</span><br><span class="hljs-string">    given threshold.</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.0, 3.0], 0.5)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> idx, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numbers):<br>        <span class="hljs-keyword">for</span> idx2, elem2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numbers):<br>            <span class="hljs-keyword">if</span> idx != idx2:<br>                distance = <span class="hljs-built_in">abs</span>(elem - elem2)<br>                <span class="hljs-keyword">if</span> distance &lt; threshold:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>METADATA = &#123;<br>    <span class="hljs-string">&#x27;author&#x27;</span>: <span class="hljs-string">&#x27;jt&#x27;</span>,<br>    <span class="hljs-string">&#x27;dataset&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">candidate</span>):<br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.2</span>], <span class="hljs-number">0.3</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.2</span>], <span class="hljs-number">0.05</span>) == <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>], <span class="hljs-number">0.95</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>], <span class="hljs-number">0.8</span>) == <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.0</span>], <span class="hljs-number">0.1</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">4.1</span>, <span class="hljs-number">5.1</span>], <span class="hljs-number">1.0</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">4.1</span>, <span class="hljs-number">5.1</span>], <span class="hljs-number">0.5</span>) == <span class="hljs-literal">False</span><br><br><br></code></pre></td></tr></table></figure>这是一个有趣的现象，说明即使模型生成的代码中包含了函数头，拼接后的代码仍然可以通过评测。这是因为Python的<strong>函数定义覆盖特性</strong>以及<strong>代码执行顺序</strong>允许这种情况下的正确执行。实际上，最终的有效定义是<code>completion</code>中的那个函数，因为它会覆盖掉<code>prompt</code>中的不完整定义。这个机制确保了模型生成的完整代码可以正确执行。</p><h3 id="评价指标-passk">评价指标 'Pass@k'</h3><p>HumanEval 使用 pass@k作为主要评估指标，它衡量的是模型生成代码在多次尝试中成功解决问题的概率。具体计算方式如下：- k = 1：模型只生成一个代码解决方案，评估该方案是否通过所有测试用例。 -k &gt; 1：模型可以生成多个候选代码，评估在这 k个候选方案中，至少有一个通过所有测试用例的情况。</p><h3 id="record-两天复现deepseek-on-humaneval-python">[Record]两天复现<code>DeepSeek on HumanEval-python</code>🤩</h3><p>在这里记录一下，由于项目需要，所以复现了一下DeepSeek在HumanEval上的测评。</p><p>复现使用的大模型是<code>DeepSeek-V2.5</code>，在这里并没有从Huggingface上下载开源大模型，只是使用API调用的方法进行评测。</p><p>首先clone下来<ahref="https://github.com/deepseek-ai/deepseek-coder">DeepSeek-Coder</a>的系列代码，阅读代码发现，他们在评测humanEval的时候，并不是单纯把prompt输入进去，而是对prompt进行了修改，增加了一段约束输出的提示：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_deepseekcoder_instruction</span>(<span class="hljs-params">languge: <span class="hljs-built_in">str</span>, question: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">return</span> <br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Please continue to complete the function. You are not allowed to modify the given code and do the completion only. Please return all completed function in a codeblock. Here is the given code to do completion:</span><br><span class="hljs-string">    ```&#123;&#125;</span><br><span class="hljs-string">        &#123;&#125;```</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>.strip().<span class="hljs-built_in">format</span>(languge.lower(), question.strip())<br></code></pre></td></tr></table></figure></p><p>下面需要面对的问题就是，在调用API接口的时候，两个关键的参数<code>temperature</code>和<code>top_p</code>怎么设定？<div class="note note-primary">            <ol type="1"><li>temperature控制模型生成的随机性或创造性。<ul><li>范围：通常在0到1之间（可以取大于1的值，但不常见）。</li><li>作用：<ul><li>当temperature值接近0时，模型的输出会变得更加<strong>确定</strong>，它会倾向于选择概率最高的单词，这样生成的内容会更保守，更接近训练数据中的常见模式。</li><li>当temperature值较高时，模型生成的单词选择会更加<strong>随机</strong>，输出的内容会更具创造性，但也可能会变得不太连贯或不合逻辑。</li></ul></li></ul></li><li>top_p(NucleusSampling)控制模型生成时使用的<strong>概率累积阈值</strong>，用于确定在候选单词中的选择范围，主要控制<strong>多样性</strong>。<ul><li>范围：在0到1之间。</li><li>作用：<ul><li>top_p会影响生成时候选单词的集合。当top_p=1时，模型会从所有可能的单词中进行采样；当top_p的值越低，模型会在一个概率累积较高的候选词集合中选择，即只考虑那些占总概率最高的词汇。</li></ul></li></ul></li></ol>          </div>在这里，由于在deepseek的官方代码中没有找到他们的参数，因此我选择和<ahref="https://huggingface.co/spaces/bigcode/bigcode-models-leaderboard">bigcode-models-leaderboard</a>的参数对齐。也就是<code>temperature=0.2，top_p=0.95</code></p><p>调用代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_response</span>(<span class="hljs-params">prompt</span>):<br>    prompt = build_deepseekcoder_instruction(<span class="hljs-string">&#x27;Python&#x27;</span>, prompt)<br>    response = client.chat.completions.create(<br>        model=<span class="hljs-string">&quot;deepseek-coder&quot;</span>,<br>        messages=[<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;<br>        ],<br>        temperature=<span class="hljs-number">0.2</span>,<br>        top_p=<span class="hljs-number">0.95</span>,<br>        max_tokens=<span class="hljs-number">1024</span>,<br>        stream=<span class="hljs-literal">False</span><br>    )<br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message.content<br></code></pre></td></tr></table></figure></p><p>主要的两个问题考虑了之后，我首先跑出了第一轮结果： <imgsrc="../img/first_round.png" alt="first_round.png" />官网给出的分数高达89，但我只复现出了约66分，说明复现的过程还是有问题。思考思考，检查结果很容易发现，生成的代码报错原因非常集中： <imgsrc="../img/mistake.png" alt="mistake.png" /> 都是缩进的错···🙄🙄于是阅读了deepseek处理代码缩进的逻辑，并且对他们的逻辑进行稍微修改（很奇怪，他们的逻辑会把prompt中代码def之前的部分补上，又会导致缩进问题，这部分直接不要就好了），修改后再次进行打分：<img src="../img/second_round.png" alt="second_round.png" />呀，这下终于跑出了满意的结果！😄😄</p><div class="note note-success">            <p>在复现结果差距很大的时候，要学会找原因。我在第一次跑出66分的时候，其实在这次之前没有验证评测代码是否正确，但是其实官网上有一个小脚本只要执行就可以验证评测对不对。虽然也是找到了原因，但是这次过程没有循序渐进，有可能换一个其他隐藏的小错误就发现不了了...😐😐</p><p>这种对大模型生成的代码进行评测的难点，有一个就是在于如何把代码格式化，可以直接执行，其实生成的代码很多不能执行其实不是逻辑问题仅仅是格式有误。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
      <category>Image2Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Benchmark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>September个人随想</title>
    <link href="/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b7c256aba6e0ff3043dfcc053254ad29d0c857a864d11f2c54aa5e6f206e3626"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic Knowledge for Domain Generalization</title>
    <link href="/2024/09/04/Generalization/"/>
    <url>/2024/09/04/Generalization/</url>
    
    <content type="html"><![CDATA[<p>🌞🌞有幸接触到一个做域泛化的项目组，在准备期间看论文发现自己机器学习、深度学习的基础其实一点都不扎实🥹🥹，在这里记录一下跟进项目需要用到的知识点！### <strong>域自适应[Domain Adaptation]</strong> VS<strong>域泛化[Domain Generalization]</strong> 以一个具体的场景为例：假设我在开发一个自动驾驶系统，它需要识别街道上的行人。我在A城市收集了大量的行人图像（源领域），我的目标是把这个系统应用到B城市，但是B城市的街道布局、行人穿着、天气条件等可能与A有所不同，这就是所谓的“领域偏移”（domainshift）。</p><ul><li><strong>Domain Adaptation:</strong>在训练的过程中，就给模型提供B城市的图像，虽然这些图像可能没有标注过，但是我的目标是让模型利用这些未标注的目标领域数据，调整自己对新环境的适应性。</li><li><strong>Domain Generalization:</strong>在训练过程中，我并不提供B城市的图像，而模型在使用的过程中，也可以识别出B城市的行人。</li></ul><p>总结来说：<strong>域自适应</strong>是通过使用一些目标领域的数据来帮助模型适应新环境，而<strong>域泛化</strong>则要求模型在没有看到目标领域数据的情况下，依然能够应对新的环境。</p><h3 id="元学习meta-learning">元学习[Meta Learning]</h3><p>Meta-learning，也称为“学习如何学习”，是一种机器学习方法，旨在通过学习元知识（即关于学习过程本身的知识）来提高模型在新任务上的表现。Meta-learning的目标是使模型能够快速适应新任务，即使在只有少量训练数据的情况下，也能取得良好的效果。元学习的核心想法是学习一个先验知识(prior)。 &gt;(夹带点私货，下面这个elegant的图，是用mermaid绘制出来的，useful!🤩🤩欸，但是大小不好调整，而且多次尝试都失败了，😢sad)</p><p><strong>元学习的内容细分</strong></p><pre><code class=" mermaid">%%&#123; init: &#123; &quot;theme&quot;: &quot;base&quot;, &quot;themeVariables&quot;: &#123; &quot;width&quot;: &quot;300px&quot;, &quot;height&quot;: &quot;300px&quot; &#125;&#125;&#125;%%graph LR    A[Meta-Learning] --&gt; B[Meta-Training Phase]    A --&gt; C[Meta-Testing Phase]    B --&gt; D[Meta-Training Data]    B --&gt; E[Meta-Validation Data]    D --&gt; F[Meta-Train Task 1]    D --&gt; G[Meta-Train Task 2]    D --&gt; H[Meta-Train Task N]    E --&gt; I[Meta-Validation Task 1]    E --&gt; J[Meta-Validation Task 2]    E --&gt; K[Meta-Validation Task N]    C --&gt; L[Meta-Testing Data]    L --&gt; M[Meta-Test Task]subgraph Task_StructureF --&gt; N[Support Set N-way K-shot]F --&gt; O[Query Set]G --&gt; NG --&gt; OH --&gt; NH --&gt; OM --&gt; NM --&gt; Oend</code></pre><h3 id="pacs-数据集">PACS 数据集</h3><p><strong>PACS</strong>是一个常用于域自适应和域泛化任务的数据集。它特别适用于评估模型在不同视觉风格下的泛化能力。PACS的全称来自它所包含的四个不同的视觉风格类别： - P: Photo（真实照片） - A:Art painting（艺术画） - C: Cartoon（卡通图像） - S: Sketch（素描）</p><p>每种风格都包含相同的7个类别的物体：狗、象、长颈鹿、吉他、马、房子、人物。</p><p>PACS的数据来自四种视觉风格，旨在研究模型如何在不同的视觉领域间进行泛化。例如，模型可能在“Photo”风格上进行训练，但要在“Artpainting”或“Cartoon”风格上进行测试。</p><h3 id="图像的通道">图像的通道</h3><p>图像的通道是指图像中每个像素点所包含的颜色或信息维度。不同类型的图像根据所使用的颜色模式可能有不同数量的通道。RGB图像是最常见的彩色图像格式，有<strong>三个</strong>通道：红色(Red)、绿色 (Green)、蓝色 (Blue)。每个像素点通过三个通道的组合来表示颜色。每个通道的值通常范围在 0 到 255之间，不同通道的组合可以生成不同的颜色。</p><p>在深度学习中，特别是计算机视觉任务中，通道数是图像张量结构的一部分。例如，对于一个RGB 图像，张量通常表示为 (C, H, W)，其中： - C 代表通道数（对于 RGB图像为 3）； - H 代表图像的高度； - W 代表图像的宽度。</p><p>神经网络会分别处理每个通道的数据，并通过卷积、池化等操作来提取和处理图像的特征。</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useful code</title>
    <link href="/2024/08/22/code/"/>
    <url>/2024/08/22/code/</url>
    
    <content type="html"><![CDATA[<p>在这里记录下有用的代码，有来自实验常用的，也有oj需要用的，oj是小白水平🥺## Python (mainly for Research) ### 设置可见GPU ### <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = gpu_ids<br>gpu_ids = <span class="hljs-string">&#x27;0&#x27;</span><br></code></pre></td></tr></table></figure> -<strong>指定GPU</strong>：通过设置 <code>CUDA_VISIBLE_DEVICES</code>环境变量，可以指定哪些GPU可供程序使用。例如，如果有4个GPU（编号为 0, 1,2, 3），但只希望程序使用GPU 2和GPU3，你可以设置<code>gpu_ids = "2,3"</code>，这样程序运行时只会看到这两个GPU。-<strong>屏蔽GPU</strong>：如果不希望程序使用任何GPU，可以将<code>gpu_ids</code>设置为空字符串，即<code>gpu_ids = ""</code>。这会使得程序无法看到任何GPU，从而只使用CPU。</p><p><strong>attention:</strong>这行代码实际上只是告诉程序哪些GPU是可见的或可用的，但它并不保证程序一定会使用这些GPU中的所有GPU。</p><h2 id="c-mainly-for-online-judge">C++ (mainly for Online Judge)</h2><h3 id="digit-separation">Digit Separation</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 来自快乐数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">square_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-type">int</span> digit = n % <span class="hljs-number">10</span>;<br>        n /= <span class="hljs-number">10</span>;<br>        sum += digit * digit;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="create-linkedlist">Create LinkedList</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> namesapce std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of elements: &quot;</span>;<br>    cin &gt;&gt; n;<br>    ListNode* head = <span class="hljs-literal">nullptr</span>;<br>    ListNode pnode = <span class="hljs-literal">nullptr</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the elements: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> val;<br>        cin &gt;&gt; val;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>            pnode = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>            pnode-&gt;next = newNode;<br>            pnode = newNode;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="binarysearch">BinarySearch</h3><p>如<ahref="https://leetcode.cn/problems/sqrtx/?envType=problem-list-v2&amp;envId=binary-search">Leetcode第69题:x的平方根</a>需要理解题目适当变形！<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 防止溢出</span><br>    <br>    <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>        left = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="about-vector">About vector</h3><h4 id="dynamic-array-vs-static-array">dynamic array vs staticarray</h4><p>在做题的时候一不小心把<code>vector&lt;string&gt; s(3)</code>打成了<code>vector&lt;string&gt; s[3]</code>，因为本人没有细学过C++，因此在这里记录一下~<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;string&gt; s; <span class="hljs-comment">// 这是一个动态大小的向量，能够在运行时添加任意数量的 string 元素</span><br>vector&lt;string&gt; s[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 这是一个静态数组，包含 3 个 vector&lt;string&gt; 对象。</span><br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// 向量 s 会有 3 个元素，且这些元素都是空字符串。</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// 向量 v 会有 3 个元素，且这些元素都是 0。</span><br></code></pre></td></tr></table></figure> 回过头来意识到我这个问题好幼稚，犯的错好傻呀...🫥🫥 ####reverse array ####包含在<code>algorithm</code>头文件中，可以通过<code>reverse(begin, end)</code>函数实现数组的翻转。注意，<code>begin()</code>和<code>end()</code>函数返回的迭代器是左闭右开的，也就是说，<code>begin()</code>指向第一个元素，而<code>end()</code>指向<strong>最后一个元素的下一个位置</strong>。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 翻转数组</span><br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">4</span>); <span class="hljs-comment">// 翻转转从第 0 个元素开始到第 3 个元素</span><br></code></pre></td></tr></table></figure> #### accumulate vector ####<code>accumulate</code>是C++标准库中的一个函数，用于计算范围内所有元素的累计和。它通常用于容器（如vector、array等）中的元素累计。<code>accumulate</code>函数位于<code>&lt;numeric&gt;</code>头文件中。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIterator</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function">T <span class="hljs-title">accumulate</span><span class="hljs-params">(InputIterator first, InputIterator last, T init)</span></span>;<br><br></code></pre></td></tr></table></figure> -<code>first</code>：输入序列的起始迭代器（指向序列的第一个元素）。 -<code>last</code>：输入序列的结束迭代器（指向序列的最后一个元素的后一个位置）。-<code>init</code>：累加的初始值，这个值会作为累加计算的起点。累加后的结果将基于这个初始值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span>  <span class="hljs-comment">// accumulate 所在的头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 使用 accumulate 计算 nums 中所有元素的和，初始值为 0</span><br><span class="hljs-type">int</span> total = <span class="hljs-built_in">accumulate</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h3 id="about-binary-tree">About Binary Tree</h3><h4 id="中序遍历">中序遍历</h4><ol type="1"><li>递归实现 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode* root,vector&lt;<span class="hljs-type">int</span>&gt;&amp; res)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">inorder</span>(root-&gt;left);<br>    res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>    <span class="hljs-built_in">inorder</span>(root-&gt;right);<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-built_in">inorder</span>(root, res);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>迭代实现 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br> vector&lt;<span class="hljs-type">int</span>&gt; res;<br> stack&lt;TreeNode*&gt; stk;<br> <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">nullptr</span> || !stk.<span class="hljs-built_in">empty</span>()) &#123;<br>     <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">nullptr</span>) &#123;<br>     stk.<span class="hljs-built_in">push</span>(root);<br>     root = root-&gt;left;<br>    &#125;<br>     root = stk.<span class="hljs-built_in">top</span>();<br>     stk.<span class="hljs-built_in">pop</span>();<br>     res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>     root = root-&gt;right;<br>  &#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="calculate-the-depth-of-the-binary-tree">Calculate the depth ofthe binary tree</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">maxDepth</span>(root-&gt;left), <span class="hljs-built_in">maxDepth</span>(root-&gt;right)) + <span class="hljs-number">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="traverse-the-hash-table">Traverse the hash table</h4><ol type="1"><li>HashMap <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = mp.<span class="hljs-built_in">begin</span>(); it != mp.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>   it-&gt;first; <span class="hljs-comment">// key</span><br>   it-&gt;second; <span class="hljs-comment">// value</span><br>   <span class="hljs-comment">// other code</span><br>   &#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [key, value] : mp) &#123;<br>   <span class="hljs-comment">// other code</span><br>   &#125;<br></code></pre></td></tr></table></figure></li><li>HashSet <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = st.<span class="hljs-built_in">begin</span>(); it != st.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>   *it; <span class="hljs-comment">// value</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; value : st) &#123;<br>   value;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="about-string">About string</h3><h4 id="substring">substring</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>string sub = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 从索引6开始，长度为5的子串</span><br>sub == <span class="hljs-string">&quot;World&quot;</span>; <span class="hljs-comment">// 判断字符串是否相等</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地主机连接远程服务器的几种方式</title>
    <link href="/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>从大二开始，我接触到远程服务器，在这里总结一下本地主机连接远程服务器的几种方式😎1.<strong>使用密码和VPN（可选）连接</strong>：这是我接触最多的连接方式，但是这样连接有缺点：安全性差。这种方式有时需要使用VPN才能连接，因为VPN可以屏蔽一些网络设备，比如防火墙，所以可以避免一些安全风险。首先通过VPN连接到远程服务器所在的网络。VPN（虚拟专用网络）将本地网络流量加密，并通过远程服务器所在的网络进行路由，使我们能够像在同一局域网内一样访问服务器。2.<strong>使用公钥和私钥连接</strong>：有过一次使用公私钥连接的经历。这种方式可以避免密码的传输，安全性更高。连接流程如下：1. 生成密钥对: 使用SSH工具（如ssh-keygen）在本地生成一对公钥和私钥。 2.配置公钥: 将生成的公钥 (~/.ssh/id_rsa.pub) 添加到远程服务器上的~/.ssh/authorized_keys 文件中。 3. SSH连接:使用SSH客户端，通过私钥文件（~/.ssh/id_rsa）连接到远程服务器。SSH会自动使用私钥进行身份验证。这样连接以后，无需输入密码即可快速登录服务器，提升了工作效率，而且具有较高的安全性。🙆🏻如下图所示，是使用MobaXterm进行连接的界面：<img src="../img/Moba_ssh.png"alt="使用MobaXterm进行公私钥的SSH连接" /></p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>August💘个人随想</title>
    <link href="/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0ae3b60543ee93c5060b9f898ad70188c63cf764197fb81c84b98694937135f1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm如何连接远程服务器</title>
    <link href="/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在实习，旁边的小伙伴全都劝我用vscode，说连接简单不费力，我这样一个忠诚的pycharm用户，JetBrains全家桶爱好者，怎么能受得了这样的虎狼之词！😡😡于是，写下一篇博文，记录一下如何使用pycharm连接远程服务器。<div class="note note-warning">            <p>该远程连接步骤没有参考任何网上教程；pycharm版本：PyCharm 2023.2.2pycharm连接远程服务器有很多种方法，或者某一步骤错误了其实有很多补救措施，可以自行探索！☺️</p>          </div> ### Step1：新建一个项目新建一个项目，选择Python解释器，选择<code>Previously configured interpreter</code>，然后点击<code>Add Interpreter</code>，选择<code>On SSh</code>，如下图所示：<img src="../img/img_img1.png" alt="img.png" />在这儿，填写服务器的ip地址（Host），端口号（往往默认），用户名，如下图所示：<img src="../img/img_1.png" alt="img_1.png" />之后能点击next的，一路点击next，直到下图，输入密码（这里我使用的是密码连接），之后还是点击next，如下图：<img src="../img/img_2.png" alt="img_2.png" /> 还是next： <imgsrc="../img/img_3.png" alt="img_3.png" /> ok，现在来到第四步： <imgsrc="../img/img_4.png" alt="img_4.png" />在这里，我想要使用服务器中已经存在的环境，于是我选择<code>existing</code>,选择虚拟环境中对应的<code>python.exe</code>,往往在<code>Anaconda3</code>中的<code>envs</code>的虚拟环境名字下的<code>bin</code>中，选好了点击ok，然后点击create，如下图：<img src="../img/img_5.png" alt="img_5.png" />之后注意选一下相匹配的文件夹，也就是你的这个项目中的文件，应该上传到服务器中的文件夹中的什么位置：<img src="../img/img_10.png" alt="img_10.png" />这样就创建项目成功啦！</p><h3 id="step2浏览服务器上的文件夹">Step2：浏览服务器上的文件夹</h3><p>在项目创建成功后，点击<code>Main Menu</code>（就是左上角三条线的图标），之后点击同行的<code>tools</code>-&gt;<code>deployment</code>-&gt;<code>Browse Remote Host</code>，如下图：<img src="../img/img_6.png" alt="img_6.png" />之后在pycharm最左侧就会出代表现服务器上的文件夹的标志，选择对应的远程主机，就可以看到展开的文件夹啦：<img src="../img/img_8.png" alt="img_8.png" /></p><h3 id="step3终端修改">Step3：终端修改</h3><p>注意在使用远程服务器的时候，我们往往是在终端操作，点击终端，注意<code>+</code>号旁边的小箭头，点击这个小箭头，选择对应的虚拟环境即可，如下图：<img src="../img/img_9.png" alt="img_9.png" />这样，终端也切换到远程服务器的虚拟环境啦！It's done!</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Useful instructions in Linux</title>
    <link href="/2024/08/01/Useful-instructions-in-Linux/"/>
    <url>/2024/08/01/Useful-instructions-in-Linux/</url>
    
    <content type="html"><![CDATA[<p>这是第一次正经使用远程服务器跑数据，遂记录一下常用的命令，希望以后会越来越熟练！🤗- 查看显卡情况 - 1️⃣ 简易版 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nvidia-smi<br></code></pre></td></tr></table></figure> - 2️⃣ 更详细更美观🤩<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install nvitop<br>nvitop<br></code></pre></td></tr></table></figure> nvitop的效果确实更美观，包括进程也展示的更加清楚： <imgsrc="../img/nvitop.jpg" alt="nvitop效果图" /></p><ul><li><p>查看虚拟环境列表 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env list<br></code></pre></td></tr></table></figure></p></li><li><p>多人共享一个服务器，GPU资源稀缺的时候，需要进行<strong>占卡</strong>操作，确保一个人在使用GPU 时，其他人不会干扰或抢占该资源如何实现占卡？编写一个脚本，在脚本中执行一个死循环，这样就可以占用 GPU资源了。例如： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvidia-smi<br><span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0  <span class="hljs-comment"># 选择 GPU 0</span><br>python your_script.py<br></code></pre></td></tr></table></figure></p></li><li><p>脱离自己的终端，继续运行脚本，我常常使用的指令是<code>nohup</code>，例如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> python your_script.py &gt; stdout.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure>这个指令用于在后台运行一个Python脚本，同时将输出重定向到日志文件中。具体来说：</p><ul><li><code>nohup</code>：表示“no hangup”，用于在你关闭终端后继续运行该命令。通常，如果没有使用<code>nohup</code>，关闭终端后，正在运行的进程也会被终止。使用nohup可以确保即使关闭了终端，脚本仍然会继续运行。</li><li><code>python your_script.py</code>：这是你要运行的Python脚本的命令。</li><li><code>&gt;</code>：重定向符号，表示将输出重定向到指定的文件。</li><li><code>stdout.log</code>：用于存储脚本的标准输出（即通常在终端显示的输出信息）。所有标准输出会被写入这个文件中。</li><li><code>2&gt;&amp;1</code>：这是将标准错误输出（即错误信息）重定向到标准输出中，因此所有的错误信息也会被写入stdout.log中。这其中，2表示标准错误，1表示标准输出，&amp;表示引用相同的文件描述符。</li><li><code>&amp;</code>：将该命令放到后台运行，即使你关闭当前的终端会话，脚本仍然会继续运行。</li></ul></li><li><p>赋予自己的脚本权限，例如： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x your_script.py<br></code></pre></td></tr></table></figure>使用<code>chmod</code>命令，你可以给文件赋予权限。<code>+x</code>表示增加执行权限，这样你就可以运行这个脚本了。同理，<code>-x</code>表示移除执行权限，移除之后，你无法运行这个脚本。</p></li><li><p>杀死进程 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 pid # pid是进程的ID, kill -9 强制终止进程<br>kill pid<br></code></pre></td></tr></table></figure></p></li><li><p>退出状态码</p><ul><li><strong>Exit 1</strong> 通常是脚本内的问题，需要检查日志。本小菜在分批次使用nohup执行脚本时，发现脚本总是自动退出，退出状态码为1。后来寻找发现是自己的bash文件多了一行空行，实际上是多了换行符，导致脚本无法执行🥲🥲。</li><li><strong>Exit 126</strong>通常是权限或路径问题，需要检查脚本路径和权限。</li></ul></li><li><p>查看文件夹下有多少文件 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -1 /path/to/directory | wc -l<br></code></pre></td></tr></table></figure></p><ul><li><code>ls -1</code>列出目录中的每个文件和文件夹，每行显示一个名称。</li><li><code>wc -l</code> 统计行数，即文件和文件夹的数量。</li></ul></li><li><p>从huggingface的镜像上下载文件到服务器，步骤如下图所示： <imgsrc="https://krseoul.imgtbl.com/i/2024/08/22/66c6b5110cb2b.png"alt="huggingface-cli.png" /> <div class="note note-warning">            <p>注意，在每次执行下载命令的时候都要<code>export HF ENDPOINT=https://hf-mirror.com</code>，要不然下载速度会巨慢无比😑</p>          </div></p></li><li><p>查看当前的python进程 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep python <br>ps -aux | grep python<br></code></pre></td></tr></table></figure></p><ul><li><code>ps -ef</code> 显示的是更传统的 Unix风格的输出，注重进程间的关系（如父子进程关系）以及命令的详细信息。例子如下所示：<img src="../img/ef.png" alt="ef.png" /></li><li><code>ps -aux</code> 提供了关于资源使用情况的更多信息，如 CPU和内存占用率，且格式与 <code>ps -ef</code> 不同。 例子如下所示： <imgsrc="../img/aux_1.png" alt="aux.png" /> 其中，<code>STAT</code>列显示了每个进程的状态，其中字母组合（如 Ssl、Sl、Rl等）表示进程的状态和属性。以下是这些标记的含义：<ol type="1"><li>S: Interruptible Sleep (可中断的睡眠状态)</li><li>R: Running (运行中)</li><li>l: Multi-threaded (多线程)</li><li>s: Session Leader (会话领导)</li><li>S: Low-priority (低优先级)</li></ol>这些字母组合起来，就表示了进程的状态和属性。例如，<code>Ssl</code>表示进程正在睡眠中，并且是低优先级的···</li></ul></li><li><p>查看当前机器的内存空间 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">free -h<br></code></pre></td></tr></table></figure> 效果如下图所示： <ahref="https://ice.frostsky.com/2024/10/08/282d1ad2026ea2c7daa86061b1ed73d9.png"><imgsrc="https://ice.frostsky.com/2024/10/08/282d1ad2026ea2c7daa86061b1ed73d9.png"alt="free.png" /></a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OJ相似题型总结</title>
    <link href="/2024/12/20/OJ%E7%9B%B8%E4%BC%BC%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
    <url>/2024/12/20/OJ%E7%9B%B8%E4%BC%BC%E9%A2%98%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="dynamic-programming">Dynamic Programming</h2><p>对于hot100中的多维动态规划一类，有这么几道题，先处理最上面一行和最左一列，之后不断更新其他项，最后得到右下角为最终结果</p><ul><li><a href="https://leetcode.cn/problems/unique-paths/description/?envType=study-plan-v2&amp;envId=top-100-liked">62.不同路径</a></li><li><a href="https://leetcode.cn/problems/minimum-path-sum/description/?envType=study-plan-v2&amp;envId=top-100-liked">64.最小路径和</a></li><li><a href="https://leetcode.cn/problems/edit-distance/?envType=study-plan-v2&amp;envId=top-100-liked">72.编辑距离</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chronicles</title>
    <link href="/2024/11/29/Chronicles/"/>
    <url>/2024/11/29/Chronicles/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="1d6aad6c45b886e3da4b4c0f5110ee6c0bde098df84ee9a6e3ee48fdce9da3cd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
      <tag>Future</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>November个人随想</title>
    <link href="/2024/11/06/November%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/11/06/November%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="cbe01235a8c211cd752ce748bbd029e359cea808630a55f0a46771e6f25f6783">4630436162ade97ba2718b7d0c4b3b63c46c676bbf2ab3c1085993e9507f3e5c1ab1d456971f4b177024278181252ccbbef800f4882f65d5632f453270ea81608ab38e3c8fa67ecfc6e4d25ea42d4d33467f4c91cafdb08114bdcaa1655e772fec8b521608a95745f794cc0990631de1a0c47a44799f141f160f4149da550e5aa47a6b7d0d6d957ef8918f596c63289d8a4785f8cbf59d82e0f8671faeb485b87383c47f73211acf5005609f6d9afc821da6d3a76c1489a40298ec567499ea92d5533008b7c87686a5384e4efd9eef2e62bb6313cce63aa32400bc2ae0b176109a96c08bccf1ea4c14fd0f4c2adf3fd09aa1a67e7b69fda1db645260c901572ab2545f83e2fa6ad212af970f915f9bf594e6748d45b0c546f64d7e95fb61b713defd36c26231453df0b895a8ef99b8b24cb70a7a60b3eefafc1e2e9318066c05c60fae5b2464e19e6bec04dbed5cce5065a1b9aad10d3b31af51b96beed2b78efeebff34096a9ff88fde3cf5f8cd320968ae56359ae86fb5af5dc947175afeafc01ef08ff55eae2fedde09c79411fcbe16fcb759082f3a92bd08de6b2cfeb6e2dd97cced62828db240d23251b1751fe767a2ccc25d31626d8bceea1aa428305299cb6b31cecf27a64b538065c761faa4edbdb8b65fa567a51687ec7a9de0ae00f87e9a56d225c7c082e1f628e240dfe3491371e5edba4efa644e81c6a0de0e7fd973ce370ab07004f1c4ab043310af5b5555ab39669eb8d7c290e6df518216aae4dbe4b62130cd8cbae88d31efe7bbb011efed034a2a55a18ccd11f26754b8be0c3d3a0437a00a60decc2c7fb2c7632dcb0f1a56cd3aac1bde5b9ad954596057bfaaa8d4bed49c7bab90d209d80b21184e88666161e21b29fe40bf87b77ccfbcf6ca23d58ce219a279cc5bdbbb049e077dd557a80bb35d6e0a34622161a139f6a7f95999fe5792938c298969e540f33dfbf907a81decc739bf9d6f2133476e139ead9e9d1a41b71d297ae7ddfbaa79dc61a138f58e97f12a04ccd3b876ee4a4c0f326aa535f7c2984a95d7b5e894a935df0c18fc9bfac2bd50eb4e4135e9e2faec65b1db585eafc1fe8680d0bd369b60ef0e7220f7e1ff6ed7045dd0afc6e03c21dd60a4a6e46691099b41c22faa306ee66215c3c5b5ea9be4da1746b879b77299246e204890257c1187be1a659186775ccc8495b8fcac2be1714186061a7aff5c758b32e406f92ba857bf22652d96c57290b8a58645eaf57daf5aafce3bf99cbb437e2f6646c2a91c1cb805cc1b545984b68d813cef2f5f7117ad68ac9a3801ffe74d35d8b90d1e93d1cc4f799373b60a314781df18dca4780edd13c7a37dae1a0ead489987823aa137fba0253f90b9710aa170f1985fc3bdb97eba430f0891f0c8c447da223ff27a6f11e08adceba12d199dbc1d135c47d8facf41147ba696d7b6d999368faa843540e6b3ada38ba7ff0249d585cff09342fec88eb8517fcd14ed48ed0ee77376cc0b2c209c68ab54e0018a1b2a6fe3d612bfe6001c319c01a9a78170cd50364ffef228b5937487b38ffc77c4b8dbbaa783da56980434fb60d38ea55348bb9f5af9c532778f09694364be07eac4f2bba98d8fe7b4dd48f573a8588e7599fe9f930b349b337a1801e7f465220ae8049d6df7ef0d280230ad23b5bd13fa99266fb2b283fb0223fea87bc89ccbb04e209c8b08d3b88b62169c9e380d4175d96ab43e150b03514f3faec30a2097ff81780cc4fd242c9867453b7d88aad6327b11cb66ad1186792d13af1bda441f73a69e4eff7e079b6dcee5b92cd1a6b79b0421414a1fc41351c86ec9063e2bb3381d4bd97acd1d2398d867a1a9a8cf0804ebf2bddb976d8e206bd56bc02ee5720bfd377eb4f2ed11a3d390e55664036bbba91c247ee9c7d1b8c2bd8ba06e8a9209e205bf865a8efa76d3bf3550a4bcc3e268768fb53284fa26c6eedec5de95d50496b4efaa06b06dfb7189a727df2b2bcbc60dac7ac2d3860e3eda227aa53f5e2191cf7fa6ddbc1c12a3897a66ecc65f07ce88b90c6b55e01105c6bb59f84bc749c1653b9ff3683b45130e16da2147ec7fbff0c3c5cfa192bbbdb851be11a3c7a5ecd4e46ec9757727630e7787a85aa83a57bfe21395edfa73ec62a71597017904f3a63b70c1c2de996dfed32b9e2c60602b1ea920a56b07cf1402e85050f3c070e9e532d3cbd2a80ee17ecab11b2c16d3d2fc8bd602367b8ba895badd8a864653cd088849bc257264e54ad1799fed2002c71a058aac77840df802c9a292c4582bb29fd8f707484676f4da6d1116333b38c36269ee5ae209c2ccd7d0476f3f9dea84da976640b860b27ab31c9d1e9de822fd9228faf1dd03b149ff537c80a4b2970749ba5f02f086bfd64ed1bf8fc2743b6b7112b9664e0c82e38da772e4de399160d5c4254ee3fbcd8ea4827c4ebad3be40898a68e76d8bea5ab07ab267e9f42ccce6e556d63d26cdca0145ddc55320e01947e7d046f150b531f9fb01ad8cbefb8a0206050b2b339105d571a67a534fddfd852df87efbef68e14c7adc44bc079c1bf6c6d04c96bfcc7e506a588591277036b5369f464e47908ac3353e5523ed8bbc8dddb8f5ef8b21f1b8ab9fc28a4a417fa9faf607b7545e59f9775dee386fd69a60abeb760e840aa36d8f29a8574b744725dbcebcf6fcd855dcfa7e18f5970297a44a57bae1c5cb1b6795ae65d06abd8c8fff515e64e880ffca34cde1fe36d0b27c08fa13661ceac92dd79c33740a4a60f5946094d69407275837d8ea1d946a535c2284212ec8bce2d087158af0f398eb6526178a56f2eec9bc90d39dc5c83a2c0c61ba0342fc54ac928803c193c65f379a67990044f7b6df77a881492cc5d618eb477d64dde0e34412f1dd0370375de877fa8287a9e2329cd444421b18081b9cd3717b588ae2bbaf122c8fa1ec0e93097392794c59fb944353fb2af28eeb48b7b17678b75993844b8026d54690536f7b3ee6445b3a208ad37b6727408a71c61e062ce31907b8ff63092f4a4f82e01ede4c7aab0ad10de5687a2548174b981f07cc4d4a44531aeaf5bbf2bfc07177bf533289028523c94cff77396c7863a51f8c09fc10e61a44029019804933eb8d6e1af9fd3bfdce4eb34734e61df7b453650466559317218f8f1bb052e05e3b512fd093d8f0cdd8f7d6a7b08aaa72192fa14a23a19aef856e4df2938982fd9cdd62c6b0faf375f8b4e360672e1b891f3e4e72e0babdbe98f0f70b69558fed50a55df2fd559275cd4e6fd6ccdca35a191f8ee6f6a6ec7f6821bb24a3cbd583883faecf2394d2388693d1dde69cde2ed89a16f26372e3636253342cf110f5a5485ca16627e24766206ed1969daece</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.env文件和.gitignore</title>
    <link href="/2024/10/26/env%E6%96%87%E4%BB%B6%E5%92%8C-gitignore/"/>
    <url>/2024/10/26/env%E6%96%87%E4%BB%B6%E5%92%8C-gitignore/</url>
    
    <content type="html"><![CDATA[<p>当我们在使用<code>API_KEY</code>、数据库密码，或者是在设置<code>http_proxy</code>的时候，往往不希望把这样的隐私信息上传到github中，那么怎么忽视这些信息呢？</p><p>有一个办法是使用 <strong>.env文件</strong>来存储这些敏感信息。具体步骤如下所示：</p><ol type="1"><li>创建一个<code>.env</code>文件，并添加内容： <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile">API_KEY=your_api_key_here<br>PASSWORD = PASSWWWW<br></code></pre></td></tr></table></figure></li><li>安装<code>python-dotenv</code>库： <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">pip install python-dotenv<br></code></pre></td></tr></table></figure></li><li>在代码中加载<code>.env</code>文件： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv<br><span class="hljs-keyword">import</span> os<br><br>load_dotenv()  <span class="hljs-comment"># 加载.env文件</span><br>api_key = os.getenv(<span class="hljs-string">&quot;API_KEY&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>确保<code>.env</code>文件不被上传到代码仓库。可以在<code>.gitignore</code>中添加：<code>.env</code></li></ol><p>这样，你随便push、pull也不要担心隐私泄露啦☺️~</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微调策略对比</title>
    <link href="/2024/10/19/%E5%BE%AE%E8%B0%83%E7%AD%96%E7%95%A5%E5%AF%B9%E6%AF%94/"/>
    <url>/2024/10/19/%E5%BE%AE%E8%B0%83%E7%AD%96%E7%95%A5%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>NLP大作业，选择了一个关于模型微调的题目，浅学了一下模型的微调策略，在这里介绍两种策略：<strong>全量微调</strong>和<strong>LoRA</strong>。</p><h2 id="why-fine-tuing">why fine-tuing?</h2><p>当大模型完成pretrain之后，它在各个方面都具备了一定的能力。但是比方说我想要提升模型在某一个方面的能力，例如代码能力，我就需要对模型进行<strong>微调</strong>，让模型的代码能力更加优秀。</p><p>LLM的背后是海量的参数，这些参数以矩阵的形式存储，我们在微调的时候，其实就是在改变<strong>某些参数</strong>。</p><p>为什么是“微调”，因为我们想要改变一小部分的参数，把模型的某些性能提上去，但不想要那些已经做的满意的性能变差，也就是不宜改变大量的参数。</p><h2 id="全量微调">全量微调</h2><p>比方说有矩阵W： <span class="math display">\[W = \begin{pmatrix}W_{11} &amp; W_{12} &amp; \cdots &amp; W_{1m} \\W_{21} &amp; W_{22} &amp; \cdots &amp; W_{2m} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\W_{n1} &amp; W_{n2} &amp; \cdots &amp; W_{nm}\end{pmatrix}\]</span></p><p>假设微调之后的结果是： <span class="math display">\[W&#39; = \begin{pmatrix}W_{11} &amp; W_{12} &amp; \cdots &amp; W_{1m} \\W_{21} &amp; W_{22} &amp; \cdots &amp; W_{2m} \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\W_{n1} &amp; W&#39;_{n2} &amp; \cdots &amp; W&#39;_{nm}\end{pmatrix}\]</span> 也就是说，只有两个参数有变动，其他的参数其实都没变化。即使是这样，我们也可以理解成，这整个矩阵加上了一个新的稀疏矩阵（很多0）： <span class="math display">\[\Delta W = \begin{pmatrix}0 &amp; 0 &amp; \cdots &amp; 0 \\0 &amp; 0 &amp; \cdots &amp; 0 \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\0 &amp; ∆W&#39;_{n2} &amp; \cdots &amp; ∆W&#39;_{nm}\end{pmatrix}\]</span></p><p><span class="math display">\[W&#39; = W + \Delta W\]</span></p><p>这就是<strong>全量微调</strong>，我们在该过程中其实对所有参数都进行了更新。很明显，该方法存在冗余计算问题，带来了大量的不必要的浪费。</p><h2 id="lora微调策略">LoRA微调策略</h2><p>所以，未为了解决全量微调不必要的弊端，<strong>LoRA微调策略</strong>诞生了，它引入了<strong>低秩分解技术</strong>（其实就素线性代数哇）。</p><p>要求使用包含行间数学公式：线代及格的小伙伴们都知道，一个矩阵 $ A ^{100 × k} $ 和一个矩阵 $ B ^{k × 100}$ 相乘得到的矩阵是 $ W ^{100 × 100} $。</p><p>那么我们在全量微调中使用的增量矩阵 $ ∆ W $ 也可以用同样的方式表示：<br /><span class="math display">\[\Delta W = A_{\Delta} B_{\Delta}\]</span> 也就是说： <span class="math display">\[W = W_0 + \Delta W = W_0 + A_{\Delta} B_{\Delta}\]</span></p><p>基于这个思路，如果我们要更新的参数矩阵$ W ^{m × n} $非常大，但我们也使用两个小矩阵相乘，这样需要调整的参数量就降下来了。</p><p><span class="math display">\[m \cdot n \gg m \cdot k + k \cdot n \quad (\text{where} \quad m, n \gg k)\]</span></p><p>这样大大减少了需要调整的参数量，并有效减少了计算复杂度，但是，这样的微调效果和全量微调的效果相比，会怎么样呢？ (To be continued...)</p><h2 id="记一次llamafactory微调失败的学习过程">记一次LlamaFactory微调失败的学习过程</h2><p>我在使用LlamaFactory框架对<code>deepseek-coder-6.7b-instruct</code>进行sft指令微调的时候，我所使用的数据集一个80k一个260k，但是，我只跑了36分钟就跑完了。why？</p><p>经过查找，是在<code>yaml</code>文件中的配置出了问题： <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">### dataset</span><br><span class="hljs-attr">dataset:</span> <span class="hljs-string">Magicoder-OSS-Instruct-75K,ULtraInteract_sft</span><br><span class="hljs-attr">template:</span> <span class="hljs-string">deepseekcoder</span><br><span class="hljs-attr">cutoff_len:</span> <span class="hljs-number">1024</span><br><span class="hljs-attr">max_samples:</span> <span class="hljs-number">1000</span><br><span class="hljs-attr">overwrite_cache:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">preprocessing_num_workers:</span> <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure> 在这里，我使用了默认配置，<code>max_samples</code>设置成了1000，也就是对我所使用的每一个数据集，都仅仅使用了1000条数据，那么一共就使用了2000条数据而已，这速度当然没得说😂😂</p><p>理解下这些小项的意思：</p><ul><li><code>template</code>: 指代数据处理时一种特殊的格式，决定了如何把原始数据转换为模型可以接受的输入格式，包括一些special tokens等，根据<a href="https://github.com/hiyouga/LLaMA-Factory#supported-models">supported-models</a>找到自己模型对应的template，当然也可以在<code>template.py</code>中定义自己的template。</li><li><code>cutoff_len</code>: 定义文本最大长度是多少<strong>token</strong>，如果超过这个长度将会被截断（切记是token而不是词语数量）</li><li><code>max_samples</code>: 指在训练过程中最多使用的样本数（但在实际操作中发现其实是对每一个数据集所摘取的最大样本数）</li><li><code>overwrite_cache</code>: 是否覆盖之前的数据处理缓存。如果设置为 <code>true</code>，则在处理数据时会重新生成缓存，不使用之前生成的缓存。</li><li><code>preprocessing_num_workers</code>: 数据预处理时使用的工作线程数，默认指定为 16 个并行的处理线程。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">### output</span><br><span class="hljs-attr">output_dir:</span> <span class="hljs-string">/data1/magicoder_ultraInteract_sft</span><br><span class="hljs-attr">logging_steps:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">save_steps:</span> <span class="hljs-number">500</span><br><span class="hljs-attr">plot_loss:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">overwrite_output_dir:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><ul><li><code>logging_steps</code>: 每隔10步记录一次日志信息，在log中体现如下： <img src="https://ice.frostsky.com/2024/10/19/1ce14a4e366bae0bdc8678e731e0a863.png" alt="每十条挤在一起的日志" /></li><li><code>save_steps</code>: 每隔500步保存一下模型的checkpoint，那如果你的总共的step大于500，就会生成<code>checkpoint-500</code>,<code>checkpoint-1000</code>这样的文件夹，如果小于500，也会成成一个<code>checkpoint-步数</code>的文件夹，其实最终结果会保存两次。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">### train</span><br><span class="hljs-attr">per_device_train_batch_size:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">gradient_accumulation_steps:</span> <span class="hljs-number">8</span><br><span class="hljs-attr">learning_rate:</span> <span class="hljs-number">1.0e-4</span><br><span class="hljs-attr">num_train_epochs:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">lr_scheduler_type:</span> <span class="hljs-string">cosine</span><br><span class="hljs-attr">warmup_ratio:</span> <span class="hljs-number">0.1</span><br><span class="hljs-attr">bf16:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">ddp_timeout:</span> <span class="hljs-number">180000000</span><br></code></pre></td></tr></table></figure><ul><li><code>per_device_train_batch_size</code>: 每个设备上一次处理的样本数量，称为<strong>批量大小</strong>。它决定了每次训练时每个设备上处理多少条数据。</li><li><code>gradient_accumulation_steps</code>: 模型在进行权重值的更新之前会累计8次的梯度。也就是说，经过8个批次的数据后模型才会更新模型的权重。</li><li><code>num_train_epochs</code>: 表示数据集被完整训练一次。每个<code>epoch</code>代表模型对整个训练数据集的完整处理。更多的<code>epoch</code>通常意味着更充分的训练，但过多的<code>epoch</code>可能导致<strong>过拟合</strong></li><li><code>lr_scheduler_type</code>: 学习率调度器类型，在这里指定使用<strong>余弦退火调度（cosine learning rate scheduler）</strong>，当然也有其他的学习率调度方式。在整个训练过程中，学习率会先快速下降，然后以更平缓的速度逐渐减少（类似于余弦函数1/4的下降趋势）。</li><li><code>warmup_ratio</code>: 学习率的预热比例，表示在训练开始时，前10%的训练步骤用于从0逐渐增大学习率到设定的值。学习率预热有助于稳定训练的早期阶段，避免学习率太大使得模型更新过快。<a href="https://www.baeldung.com/cs/learning-rate-warm-up">这篇文章</a>讲的不错~ <img src="https://www.baeldung.com/wp-content/uploads/sites/4/2023/03/lr-schedule.png" alt="lr-schedule.png" /></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">### eval</span><br><span class="hljs-attr">val_size:</span> <span class="hljs-number">0.1</span><br><span class="hljs-attr">per_device_eval_batch_size:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">eval_strategy:</span> <span class="hljs-string">steps</span><br><span class="hljs-attr">eval_steps:</span> <span class="hljs-number">500</span><br></code></pre></td></tr></table></figure><ul><li><code>val_size</code>: 验证集的比例，表示从整个数据集中抽取 10% 作为验证集（validation set）。</li><li><code>per_device_eval_batch_size</code>: 每个设备用于评估时处理的样本数量。</li><li><code>eval_strategy</code>: 评估策略，表示评估是在训练过程中的<strong>固定步数</strong>之后进行（而不是每个epoch结束时）。</li><li><code>eval_steps</code>: 如果选择了按步评估策略(<code>eval_strategy: steps</code>)，eval_steps决定了评估的频率。这个数值可以调节评估频次，较小的数值会更频繁地评估模型，但也会占用更多的时间，在本例中，如果总步数未达到500步，那么就在训练结束之后评估。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fine-tuning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再学机器学习和深度学习</title>
    <link href="/2024/10/11/DL/"/>
    <url>/2024/10/11/DL/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="f4fa1e9be66286b5eb7ed8c09ed0703606f22121409a5db6956b929422bc11bf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>October个人随想</title>
    <link href="/2024/10/08/October%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/10/08/October%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="504eff85c18a97aee6d0adec1b62c8a0db29b51beee84eb86d347d858975852c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习</title>
    <link href="/2024/09/30/Docker%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/09/30/Docker%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>很久之前就下载了Docker，但是因为种种原因一直搁置，也没有学习，今天一起来学一学吧~😄😄 ## Docker介绍 <strong>Docker</strong>是一个开源平台，允许开发者打包、分发和运行应用程序<strong>容器</strong>，使用<strong>容器</strong>来隔离应用程序和以来项，使得应用能够在不同环境中一致运行。</p><p>在和Skyee聊天的时候，她说她用的是<strong>Docker Compose</strong>，这是一个工具，使得用户可以一次性启动、停止和管理多个Docker容器，而不需要单独管理每个容器，具体内容没有详细看，在这里先以Docker为主！</p><h2 id="重要概念">重要概念</h2><ul><li><strong>镜像(Image)</strong>: 镜像是一个只读的模板，用于创建<strong>容器</strong>，可以从<strong>Docker Hub</strong>等公共库中下载，也可以通过<strong>Dockerfile</strong>自定义构建。比方说我从Docker Hub下载的Centos、Ubuntu等都称为镜像。</li><li><strong>容器(Container)</strong>: 容器是<strong>镜像</strong>的运行实例，可以启动、停止、删除，是一个轻量级的、独立的可执行环境。</li><li><strong>仓库(Repository)</strong>: 仓库是<strong>镜像</strong>的存储库，可以上传、下载镜像，也可以自定义镜像。可以是本地的，也可以是<strong>Docker Hub</strong>等公共库。</li><li><strong>Dockerfile</strong>: Dockerfile是一个文本文件，用于定义如何构建镜像，用户使用dockerfile自定义镜像。</li></ul><p>模仿着画了一张图，展示容器和镜像的关系： <img src="https://ice.frostsky.com/2024/09/30/67cf83690f2e153549870e881e07aab9.png" alt="Docker学习-容器和镜像的关系" /> 在这个图中，更细致地指出了Docker镜像是由多个只读层组成的，容器是在镜像之上启动的，会在镜像之上创建一个可读写层，容器的更改都发生在这一层，不会影响下面的只读层。</p><h2 id="常用命令">常用命令</h2><h3 id="设置镜像">设置镜像</h3><p>在国内使用Docker时，需要设置镜像源，不然会很慢，但是我配置了镜像源之后还是偶尔出现超时错误，或许和我开启了VPN有关，不过总而言之还是需要设置镜像源。 我使用的Docker Desktop，在settings -&gt; Docker Engine中添加如下内容： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure> ### 下载镜像 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull &lt;image&gt;<br>docker pull &lt;image&gt;:&lt;tag&gt;<br><span class="hljs-comment"># 示例</span><br>docker pull ubuntu:18.04<br></code></pre></td></tr></table></figure> <img src="https://ice.frostsky.com/2024/09/30/6cf6b6e18898c032c49d347f65fe5f7b.png" alt="Docker学习-下载报错示例" /> <img src="https://ice.frostsky.com/2024/09/30/3b4db79d0d03ef2c4deb7352b5b15ba9.png" alt="Docker学习-正常下载示例" /></p><h3 id="查看镜像信息">查看镜像信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br>docker images &lt;image&gt;<br><span class="hljs-comment"># 示例</span><br>docker images ubuntu<br></code></pre></td></tr></table></figure><p><img src="https://ice.frostsky.com/2024/09/30/0cb47e0f38d7ed863c932ae8acad4ecf.png" alt="Docker学习-查看镜像信息" /> - <strong>REPOSITORY</strong>: 镜像的名称，表示该镜像所属的仓库。 - <strong>TAG</strong>: 镜像的标签，表示该镜像的版本。 - <strong>IMAGE ID</strong>: 镜像的ID，表示该镜像的唯一标识。 - <strong>CREATED</strong>: 镜像的创建时间。 - <strong>SIZE</strong>: 镜像的大小，以字节为单位。</p><h3 id="删除镜像">删除镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi &lt;image&gt;<br><span class="hljs-comment"># 示例</span><br>docker rmi ubuntu:18.04<br></code></pre></td></tr></table></figure><p><code>docker rmi</code>命令用于删除一个或多个镜像，image参数可以是镜像的ID或者名称，多个镜像之间用空格隔开。</p><h3 id="新建启动容器">新建启动容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --it --<span class="hljs-built_in">rm</span> &lt;image&gt; &lt;<span class="hljs-built_in">command</span>&gt;<br><span class="hljs-comment"># 示例</span><br>docker run --it --<span class="hljs-built_in">rm</span> ubuntu:18.04 /bin/bash<br>docker run --it --<span class="hljs-built_in">rm</span> ubuntu:18.04 /bin/bash -c <span class="hljs-string">&quot;echo hello world&quot;</span><br></code></pre></td></tr></table></figure><ul><li><strong>--it</strong>: 启动容器并进入交互式shell。</li><li><strong>--rm</strong>: 退出后删除这个容器，当然没有这句话就不删除。</li></ul><figure><img src="https://ice.frostsky.com/2024/09/30/fcd20a18d1030093004d3560d6bb601d.png" alt="Docker学习-新建容器" /><figcaption aria-hidden="true">Docker学习-新建容器</figcaption></figure><h3 id="启动和停止容器">启动和停止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start &lt;container&gt;<br>docker stop &lt;container&gt;<br></code></pre></td></tr></table></figure><p>这里的container指容器的ID或者名称，可以通过<code>docker ps</code>命令查看。 <img src="https://ice.frostsky.com/2024/09/30/be53fdd6929408c7e6c704ed60c3cca4.png" alt="Docker学习-启动容器" /> - <strong>Container ID</strong>: 容器的ID，唯一标识符。 - <strong>Image</strong>: 容器使用的镜像。 - <strong>Command</strong>: 容器启动时执行的命令。 - <strong>Status</strong>: 容器的运行状态。 - <strong>Ports</strong>: 容器映射的端口。 - <strong>Names</strong>: 容器的名称。</p><h3 id="删除容器">删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> &lt;container&gt;<br></code></pre></td></tr></table></figure><p><code>docker rm</code>命令用于删除一个或多个容器。container参数可以是容器的ID或者名称，多个容器之间用空格隔开。 <img src="https://ice.frostsky.com/2024/09/30/d878a86dc0823c56123d2811bf3afb47.png" alt="Docker学习-删除容器" /></p><h3 id="根据dockerfile创建镜像">根据dockerfile创建镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t &lt;image&gt;:&lt;tag&gt; &lt;path&gt;<br></code></pre></td></tr></table></figure><ul><li><code>-t image</code>:<code>-t</code>选项用来为新创建的镜像指定一个名称<code>&lt;image_name&gt;</code></li><li><code>path</code>: 表示Dockerfile所在的路径</li></ul><p>不过该方法还没有实现过，dockerfile也很有讲究，那就To be continued~</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git几步曲</title>
    <link href="/2024/09/30/git%E5%87%A0%E6%AD%A5%E6%9B%B2/"/>
    <url>/2024/09/30/git%E5%87%A0%E6%AD%A5%E6%9B%B2/</url>
    
    <content type="html"><![CDATA[<p>这里记录一些git的非常基本基本的操作，主要用于管理个人的小项目。没错非常简单，但我就是记不住然后每次左向箭头找到历史。。</p><h2 id="git上传基本操作">Git上传基本操作</h2><h3 id="初始化git仓库">初始化git仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br></code></pre></td></tr></table></figure><p>这个命令会在当前目录下创建一个git仓库，并初始化一个空的提交记录，只需要在最初始的时候使用该命令。</p><h3 id="检查git状态">检查git状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git status<br></code></pre></td></tr></table></figure><p>这个命令会显示工作目录和暂存区的状态，包括哪些文件已更改、哪些文件在暂存区中等信息。</p><h3 id="添加文件到暂存区">添加文件到暂存区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add &lt;file&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把指定的文件添加到暂存区，等待下一次提交。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add .<br></code></pre></td></tr></table></figure> 这个命令会把当前目录下的所有文件添加到暂存区，等待下一次提交。</p><h3 id="提交更改">提交更改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;commit message&quot;<br></code></pre></td></tr></table></figure><p>这个命令会把暂存区的更改提交到本地仓库，并添加提交信息。</p><h3 id="推送到远程仓库">推送到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push origin &lt;分支名&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把本地仓库中的更改推送到远程仓库，并指定分支名。</p><h2 id="git切换新分支">Git切换新分支</h2><h3 id="创建新分支">创建新分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git checkout -b &lt;branch name&gt;<br></code></pre></td></tr></table></figure><p>这个命令会创建一个新的分支，并切换到该分支。</p><h3 id="查看当前分支">查看当前分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch<br></code></pre></td></tr></table></figure><p>带有<code>*</code>的分支是当前所在分支。</p><h3 id="添加更改到暂存区提交更改">添加更改到暂存区&amp;提交更改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add &lt;file&gt;<br>git add .<br>git commit -m &quot;commit message&quot;<br></code></pre></td></tr></table></figure><h3 id="将新分支推送到远程仓库">将新分支推送到远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push -u origin &lt;branch name&gt;<br></code></pre></td></tr></table></figure><p>这个命令会把本地仓库中的更改推送到远程仓库，<code>-u</code>参数会设置默认的远程分支，以便下次推送时省略分支名。</p><p>最后，可以点击推送之后的git链接，看看提交记录，确定是否成功提交😌</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>learn_about_humanEval</title>
    <link href="/2024/09/18/learn-about-humanEval/"/>
    <url>/2024/09/18/learn-about-humanEval/</url>
    
    <content type="html"><![CDATA[<p>在这里记录一下评估模型代码生成能力常用的Benchmark：<strong>humanEval</strong></p><p>HumanEval 数据集是 OpenAI 为评估代码生成模型而创建的一个数据集，专门用于测试模型的编程能力。该数据集中一共有164条数据，均以python书写。</p><h3 id="数据格式">数据格式</h3><p>举例一条数据如下： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;task_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HumanEval/163&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;prompt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\ndef generate_integers(a, b):\n    \&quot;\&quot;\&quot;\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) =&gt; [2, 4, 6, 8]\n    generate_integers(8, 2) =&gt; [2, 4, 6, 8]\n    generate_integers(10, 14) =&gt; []\n    \&quot;\&quot;\&quot;\n&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;entry_point&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;generate_integers&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;canonical_solution&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \&quot;Test 1\&quot;\n    assert candidate(10, 2) == [2, 4, 6, 8], \&quot;Test 2\&quot;\n    assert candidate(132, 2) == [2, 4, 6, 8], \&quot;Test 3\&quot;\n    assert candidate(17,89) == [], \&quot;Test 4\&quot;\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \&quot;This prints if this assert fails 2 (also good for debugging!)\&quot;\n\n&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure> 在<code>prompt</code>中，告诉了模型函数名、函数定义和预期输出，<code>entry_point</code>为函数名，<code>canonical_solution</code>提供了示例函数，<code>test</code>为测试用例。</p><h3 id="humaneval如何评测代码正确性">HumanEval如何评测代码正确性？</h3><p>在HumanEval中，评测的代码位于<code>execution.py</code>中，拼接程序如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Construct the check program and run it.</span><br>check_program = (<br>    problem[<span class="hljs-string">&quot;prompt&quot;</span>] + completion + <span class="hljs-string">&quot;\n&quot;</span> +<br>    problem[<span class="hljs-string">&quot;test&quot;</span>] + <span class="hljs-string">&quot;\n&quot;</span> +<br>    <span class="hljs-string">f&quot;check(<span class="hljs-subst">&#123;problem[<span class="hljs-string">&#x27;entry_point&#x27;</span>]&#125;</span>)&quot;</span><br>    )<br></code></pre></td></tr></table></figure> 之后运行这个拼接之后的代码，<code>test</code>中包含了很多测试用例，模型需要判断是否通过所有测试用例，全部通过才代表<code>passed</code>。 但是模型生成的代码并不完全是符合要求的格式：仅包含代码块，实际也会生成函数头，但经过检查发现这样没有影响评测的结果，why？ 如果函数头重复，那么生成的代码类似以下格式： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-comment"># 这个函数头重复了一遍</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has_close_elements</span>(<span class="hljs-params">numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>], threshold: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Check if in given list of numbers, are any two numbers closer to each other than</span><br><span class="hljs-string">    given threshold.</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.0, 3.0], 0.5)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has_close_elements</span>(<span class="hljs-params">numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>], threshold: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-string">&quot;&quot;&quot; Check if in given list of numbers, are any two numbers closer to each other than</span><br><span class="hljs-string">    given threshold.</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.0, 3.0], 0.5)</span><br><span class="hljs-string">    False</span><br><span class="hljs-string">    &gt;&gt;&gt; has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)</span><br><span class="hljs-string">    True</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> idx, elem <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numbers):<br>        <span class="hljs-keyword">for</span> idx2, elem2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(numbers):<br>            <span class="hljs-keyword">if</span> idx != idx2:<br>                distance = <span class="hljs-built_in">abs</span>(elem - elem2)<br>                <span class="hljs-keyword">if</span> distance &lt; threshold:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>METADATA = &#123;<br>    <span class="hljs-string">&#x27;author&#x27;</span>: <span class="hljs-string">&#x27;jt&#x27;</span>,<br>    <span class="hljs-string">&#x27;dataset&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">candidate</span>):<br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.2</span>], <span class="hljs-number">0.3</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.2</span>], <span class="hljs-number">0.05</span>) == <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>], <span class="hljs-number">0.95</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">5.9</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>], <span class="hljs-number">0.8</span>) == <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">2.0</span>], <span class="hljs-number">0.1</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">4.1</span>, <span class="hljs-number">5.1</span>], <span class="hljs-number">1.0</span>) == <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">assert</span> candidate([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">4.1</span>, <span class="hljs-number">5.1</span>], <span class="hljs-number">0.5</span>) == <span class="hljs-literal">False</span><br><br><br></code></pre></td></tr></table></figure> 这是一个有趣的现象，说明即使模型生成的代码中包含了函数头，拼接后的代码仍然可以通过评测。这是因为Python的<strong>函数定义覆盖特性</strong>以及<strong>代码执行顺序</strong>允许这种情况下的正确执行。 实际上，最终的有效定义是<code>completion</code>中的那个函数，因为它会覆盖掉<code>prompt</code>中的不完整定义。这个机制确保了模型生成的完整代码可以正确执行。</p><h3 id="评价指标-passk">评价指标 'Pass@k'</h3><p>HumanEval 使用 pass@k 作为主要评估指标，它衡量的是模型生成代码在多次尝试中成功解决问题的概率。具体计算方式如下： - k = 1：模型只生成一个代码解决方案，评估该方案是否通过所有测试用例。 - k &gt; 1：模型可以生成多个候选代码，评估在这 k 个候选方案中，至少有一个通过所有测试用例的情况。</p><h3 id="record-两天复现deepseek-on-humaneval-python">[Record] 两天复现<code>DeepSeek on HumanEval-python</code>🤩</h3><p>在这里记录一下，由于项目需要，所以复现了一下DeepSeek在HumanEval上的测评。</p><p>复现使用的大模型是<code>DeepSeek-V2.5</code>，在这里并没有从Huggingface上下载开源大模型，只是使用API调用的方法进行评测。</p><p>首先clone下来<a href="https://github.com/deepseek-ai/deepseek-coder">DeepSeek-Coder</a>的系列代码，阅读代码发现，他们在评测humanEval的时候，并不是单纯把prompt输入进去，而是对prompt进行了修改，增加了一段约束输出的提示： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_deepseekcoder_instruction</span>(<span class="hljs-params">languge: <span class="hljs-built_in">str</span>, question: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">return</span> <br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Please continue to complete the function. You are not allowed to modify the given code and do the completion only. Please return all completed function in a codeblock. Here is the given code to do completion:</span><br><span class="hljs-string">    ```&#123;&#125;</span><br><span class="hljs-string">        &#123;&#125;```</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>.strip().<span class="hljs-built_in">format</span>(languge.lower(), question.strip())<br></code></pre></td></tr></table></figure></p><p>下面需要面对的问题就是，在调用API接口的时候，两个关键的参数<code>temperature</code>和<code>top_p</code>怎么设定？ <div class="note note-primary">            <ol type="1"><li>temperature控制模型生成的随机性或创造性。<ul><li>范围：通常在0到1之间（可以取大于1的值，但不常见）。</li><li>作用：<ul><li>当temperature值接近0时，模型的输出会变得更加<strong>确定</strong>，它会倾向于选择概率最高的单词，这样生成的内容会更保守，更接近训练数据中的常见模式。</li><li>当temperature值较高时，模型生成的单词选择会更加<strong>随机</strong>，输出的内容会更具创造性，但也可能会变得不太连贯或不合逻辑。</li></ul></li></ul></li><li>top_p(Nucleus Sampling)控制模型生成时使用的<strong>概率累积阈值</strong>，用于确定在候选单词中的选择范围，主要控制<strong>多样性</strong>。<ul><li>范围：在0到1之间。</li><li>作用：<ul><li>top_p会影响生成时候选单词的集合。当top_p=1时，模型会从所有可能的单词中进行采样；当top_p的值越低，模型会在一个概率累积较高的候选词集合中选择，即只考虑那些占总概率最高的词汇。</li></ul></li></ul></li></ol>          </div> 在这里，由于在deepseek的官方代码中没有找到他们的参数，因此我选择和<a href="https://huggingface.co/spaces/bigcode/bigcode-models-leaderboard">bigcode-models-leaderboard</a>的参数对齐。也就是<code>temperature=0.2，top_p=0.95</code></p><p>调用代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_response</span>(<span class="hljs-params">prompt</span>):<br>    prompt = build_deepseekcoder_instruction(<span class="hljs-string">&#x27;Python&#x27;</span>, prompt)<br>    response = client.chat.completions.create(<br>        model=<span class="hljs-string">&quot;deepseek-coder&quot;</span>,<br>        messages=[<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: prompt&#125;<br>        ],<br>        temperature=<span class="hljs-number">0.2</span>,<br>        top_p=<span class="hljs-number">0.95</span>,<br>        max_tokens=<span class="hljs-number">1024</span>,<br>        stream=<span class="hljs-literal">False</span><br>    )<br>    <span class="hljs-keyword">return</span> response.choices[<span class="hljs-number">0</span>].message.content<br></code></pre></td></tr></table></figure></p><p>主要的两个问题考虑了之后，我首先跑出了第一轮结果： <img src="../img/first_round.png" alt="first_round.png" /> 官网给出的分数高达89，但我只复现出了约66分，说明复现的过程还是有问题。 思考思考，检查结果很容易发现，生成的代码报错原因非常集中： <img src="../img/mistake.png" alt="mistake.png" /> 都是缩进的错···🙄🙄 于是阅读了deepseek处理代码缩进的逻辑，并且对他们的逻辑进行稍微修改（很奇怪，他们的逻辑会把prompt中代码def之前的部分补上，又会导致缩进问题，这部分直接不要就好了），修改后再次进行打分： <img src="../img/second_round.png" alt="second_round.png" /> 呀，这下终于跑出了满意的结果！😄😄</p><div class="note note-success">            <p>在复现结果差距很大的时候，要学会找原因。我在第一次跑出66分的时候，其实在这次之前没有验证评测代码是否正确，但是其实官网上有一个小脚本只要执行就可以验证评测对不对。 虽然也是找到了原因，但是这次过程没有循序渐进，有可能换一个其他隐藏的小错误就发现不了了...😐😐</p><p>这种对大模型生成的代码进行评测的难点，有一个就是在于如何把代码格式化，可以直接执行，其实生成的代码很多不能执行其实不是逻辑问题仅仅是格式有误。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
      <category>Image2Code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Benchmark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>September个人随想</title>
    <link href="/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/09/11/September%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="78e20ae06319cdf44051419af0381f3654a9409a276ff1e723383d4298cd7b36"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic Knowledge for Domain Generalization</title>
    <link href="/2024/09/04/Generalization/"/>
    <url>/2024/09/04/Generalization/</url>
    
    <content type="html"><![CDATA[<p>🌞🌞有幸接触到一个做域泛化的项目组，在准备期间看论文发现自己机器学习、深度学习的基础其实一点都不扎实🥹🥹，在这里记录一下跟进项目需要用到的知识点！ ### <strong>域自适应[Domain Adaptation]</strong> VS <strong>域泛化[Domain Generalization]</strong> 以一个具体的场景为例： 假设我在开发一个自动驾驶系统，它需要识别街道上的行人。我在A城市收集了大量的行人图像（源领域），我的目标是把这个系统应用到B城市，但是B城市的街道布局、行人穿着、天气条件等可能与A有所不同，这就是所谓的“领域偏移”（domain shift）。</p><ul><li><strong>Domain Adaptation:</strong> 在训练的过程中，就给模型提供B城市的图像，虽然这些图像可能没有标注过，但是我的目标是让模型利用这些未标注的目标领域数据，调整自己对新环境的适应性。</li><li><strong>Domain Generalization:</strong> 在训练过程中，我并不提供B城市的图像，而模型在使用的过程中，也可以识别出B城市的行人。</li></ul><p>总结来说：<strong>域自适应</strong>是通过使用一些目标领域的数据来帮助模型适应新环境，而<strong>域泛化</strong>则要求模型在没有看到目标领域数据的情况下，依然能够应对新的环境。</p><h3 id="元学习meta-learning">元学习[Meta Learning]</h3><p>Meta-learning，也称为“学习如何学习”，是一种机器学习方法，旨在通过学习元知识（即关于学习过程本身的知识）来提高模型在新任务上的表现。Meta-learning的目标是使模型能够快速适应新任务，即使在只有少量训练数据的情况下，也能取得良好的效果。元学习的核心想法是学习一个先验知识 (prior)。 &gt; (夹带点私货，下面这个elegant的图，是用mermaid绘制出来的，useful!🤩🤩欸，但是大小不好调整，而且多次尝试都失败了，😢sad)</p><p><strong>元学习的内容细分</strong></p><pre><code class=" mermaid">%%&#123; init: &#123; &quot;theme&quot;: &quot;base&quot;, &quot;themeVariables&quot;: &#123; &quot;width&quot;: &quot;300px&quot;, &quot;height&quot;: &quot;300px&quot; &#125;&#125;&#125;%%graph LR    A[Meta-Learning] --&gt; B[Meta-Training Phase]    A --&gt; C[Meta-Testing Phase]    B --&gt; D[Meta-Training Data]    B --&gt; E[Meta-Validation Data]    D --&gt; F[Meta-Train Task 1]    D --&gt; G[Meta-Train Task 2]    D --&gt; H[Meta-Train Task N]    E --&gt; I[Meta-Validation Task 1]    E --&gt; J[Meta-Validation Task 2]    E --&gt; K[Meta-Validation Task N]    C --&gt; L[Meta-Testing Data]    L --&gt; M[Meta-Test Task]subgraph Task_StructureF --&gt; N[Support Set N-way K-shot]F --&gt; O[Query Set]G --&gt; NG --&gt; OH --&gt; NH --&gt; OM --&gt; NM --&gt; Oend</code></pre><h3 id="pacs-数据集">PACS 数据集</h3><p><strong>PACS</strong> 是一个常用于域自适应和域泛化任务的数据集。它特别适用于评估模型在不同视觉风格下的泛化能力。PACS 的全称来自它所包含的四个不同的视觉风格类别： - P: Photo（真实照片） - A: Art painting（艺术画） - C: Cartoon（卡通图像） - S: Sketch（素描）</p><p>每种风格都包含相同的7个类别的物体：狗、象、长颈鹿、吉他、马、房子、人物。</p><p>PACS 的数据来自四种视觉风格，旨在研究模型如何在不同的视觉领域间进行泛化。例如，模型可能在“Photo”风格上进行训练，但要在“Art painting”或“Cartoon”风格上进行测试。</p><h3 id="图像的通道">图像的通道</h3><p>图像的通道是指图像中每个像素点所包含的颜色或信息维度。不同类型的图像根据所使用的颜色模式可能有不同数量的通道。 RGB图像是最常见的彩色图像格式，有<strong>三个</strong>通道：红色 (Red)、绿色 (Green)、蓝色 (Blue)。 每个像素点通过三个通道的组合来表示颜色。每个通道的值通常范围在 0 到 255 之间，不同通道的组合可以生成不同的颜色。</p><p>在深度学习中，特别是计算机视觉任务中，通道数是图像张量结构的一部分。例如，对于一个 RGB 图像，张量通常表示为 (C, H, W)，其中： - C 代表通道数（对于 RGB 图像为 3）； - H 代表图像的高度； - W 代表图像的宽度。</p><p>神经网络会分别处理每个通道的数据，并通过卷积、池化等操作来提取和处理图像的特征。</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Machine Learning</tag>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>useful code</title>
    <link href="/2024/08/22/code/"/>
    <url>/2024/08/22/code/</url>
    
    <content type="html"><![CDATA[<h2 id="c-mainly-for-online-judge">C++ (mainly for Online Judge)</h2><h3 id="type-casting">Type Casting</h3><ol type="1"><li><p><code>long</code> to <code>int</code> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">long</span> currentUgly = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)currentUgly;<br></code></pre></td></tr></table></figure></p></li><li><p><code>int</code>/<code>float</code> to <code>string</code></p><p><code>std::to_string</code> 是 C++11 引入的函数，可以将整数或浮点数转换为字符串。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string index_s = <span class="hljs-built_in">to_string</span>(index);<br></code></pre></td></tr></table></figure></p></li><li><p><code>string</code> to <code>integer</code></p><ul><li>支持处理带符号的整数（如正数和负数）</li><li>如果字符串不是有效数字格式，则会抛出异常</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">stoi</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; str, <span class="hljs-type">size_t</span>* idx = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> base = <span class="hljs-number">10</span>)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>str</code>：待转换的字符串</li><li><code>idx</code>（可选）：表示转换停止的字符索引（用来标记多余字符起始位置）</li><li><code>base</code>（可选）：表示字符串的进制（默认为10，支持2、8、16等）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s1 = <span class="hljs-string">&quot;123&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;-456&quot;</span>;<br>string s3 = <span class="hljs-string">&quot;789abc&quot;</span>;<br><br><span class="hljs-comment">// 基本使用</span><br>cout &lt;&lt; <span class="hljs-built_in">stoi</span>(s1) &lt;&lt; endl;  <span class="hljs-comment">// 输出 123</span><br>cout &lt;&lt; <span class="hljs-built_in">stoi</span>(s2) &lt;&lt; endl;  <span class="hljs-comment">// 输出 -456</span><br><br><span class="hljs-comment">// 使用 idx 参数</span><br><span class="hljs-type">size_t</span> idx;<br><span class="hljs-type">int</span> num = <span class="hljs-built_in">stoi</span>(s3, &amp;idx);<br>cout &lt;&lt; num &lt;&lt; endl;       <span class="hljs-comment">// 输出 789</span><br>cout &lt;&lt; <span class="hljs-string">&quot;剩余字符串: &quot;</span> &lt;&lt; s<span class="hljs-number">3.</span><span class="hljs-built_in">substr</span>(idx) &lt;&lt; endl;  <span class="hljs-comment">// 输出 &quot;abc&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="digit-separation">Digit Separation</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 来自快乐数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">square_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span> ) &#123;<br>        <span class="hljs-type">int</span> digit = n % <span class="hljs-number">10</span>;<br>        n /= <span class="hljs-number">10</span>;<br>        sum += digit * digit;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="create-linkedlist">Create LinkedList</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> namesapce std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the number of elements: &quot;</span>;<br>    cin &gt;&gt; n;<br>    ListNode* head = <span class="hljs-literal">nullptr</span>;<br>    ListNode pnode = <span class="hljs-literal">nullptr</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter the elements: &quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> val;<br>        cin &gt;&gt; val;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>            pnode = head;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ListNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>            pnode-&gt;next = newNode;<br>            pnode = newNode;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="binarysearch">BinarySearch</h3><p>如<a href="https://leetcode.cn/problems/sqrtx/?envType=problem-list-v2&amp;envId=binary-search">Leetcode第69题:x的平方根</a>需要理解题目适当变形！ <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 防止溢出</span><br>    <br>    <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>        <span class="hljs-keyword">return</span> mid;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>        left = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="about-vector">About vector</h3><h4 id="basic-operations">basic operations</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>v.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">// 删除最后一个元素</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n,<span class="hljs-number">0</span>)); <span class="hljs-comment">// 建立一个固定大小的二维数组</span><br>v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">3</span>); <span class="hljs-comment">// 在第一个元素前面插入一个元素</span><br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>); <span class="hljs-comment">// 删除第二个元素</span><br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 对数组进行原地排序</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="dynamic-array-vs-static-array">dynamic array vs static array</h4><p>在做题的时候一不小心把<code>vector&lt;string&gt; s(3)</code>打成了<code>vector&lt;string&gt; s[3]</code>，因为本人没有细学过C++，因此在这里记录一下~ <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;string&gt; s; <span class="hljs-comment">// 这是一个动态大小的向量，能够在运行时添加任意数量的 string 元素</span><br>vector&lt;string&gt; s[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 这是一个静态数组，包含 3 个 vector&lt;string&gt; 对象。</span><br><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// 向量 s 会有 3 个元素，且这些元素都是空字符串。</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>; <span class="hljs-comment">// 向量 v 会有 3 个元素，且这些元素都是 0。</span><br></code></pre></td></tr></table></figure> 回过头来意识到我这个问题好幼稚，犯的错好傻呀...🫥🫥</p><h4 id="reverse-array">reverse array</h4><p>包含在<code>algorithm</code>头文件中，可以通过<code>reverse(begin, end)</code>函数实现数组的翻转。 注意，<code>begin()</code>和<code>end()</code>函数返回的迭代器是左闭右开的，也就是说，<code>begin()</code>指向第一个元素，而<code>end()</code>指向<strong>最后一个元素的下一个位置</strong>。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 翻转数组</span><br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">4</span>); <span class="hljs-comment">// 翻转转从第 0 个元素开始到第 3 个元素</span><br></code></pre></td></tr></table></figure></p><h4 id="accumulate-vector">accumulate vector</h4><p><code>accumulate</code>是C++标准库中的一个函数，用于计算范围内所有元素的累计和。它通常用于容器（如vector、array等）中的元素累计。<code>accumulate</code>函数位于<code>&lt;numeric&gt;</code>头文件中。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIterator</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function">T <span class="hljs-title">accumulate</span><span class="hljs-params">(InputIterator first, InputIterator last, T init)</span></span>;<br></code></pre></td></tr></table></figure></p><ul><li><code>first</code>：输入序列的起始迭代器（指向序列的第一个元素）。</li><li><code>last</code>：输入序列的结束迭代器（指向序列的最后一个元素的后一个位置）。</li><li><code>init</code>：累加的初始值，这个值会作为累加计算的起点。累加后的结果将基于这个初始值。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span>  <span class="hljs-comment">// accumulate 所在的头文件</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 使用 accumulate 计算 nums 中所有元素的和，初始值为 0</span><br><span class="hljs-type">int</span> total = <span class="hljs-built_in">accumulate</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h4 id="lower_bound">lower_bound()</h4><p>在一个有序数组（或容器）中找到第一个大于等于指定值的元素的位置 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">lower_bound</span>(sub.<span class="hljs-built_in">begin</span>(), sub.<span class="hljs-built_in">end</span>(), x);<br></code></pre></td></tr></table></figure> 如果<code>it == sub.end()</code>，表示<code>x</code>比<code>sub</code>中的所有元素都大（即<code>x</code>可以直接追加到数组末尾）。</p><h4 id="max_elementmin_element">max_element()/min_element()</h4><p>用于找到在指定范围内最大、最小值的函数，它是<code>&lt;algorithm&gt;</code>头文件中的一个函数模板。 参数：</p><ul><li><code>first</code>：容器或范围的起始迭代器</li><li><code>last</code>：容器或范围的结束迭代器（不包括最后一个元素）</li><li>（可选）<code>comp</code>：一个二元谓词，用于指定比较规则</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt; <span class="hljs-keyword">class</span> ForwardIterator &gt;</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">max_element</span><span class="hljs-params">( ForwardIterator first, ForwardIterator last )</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt; <span class="hljs-keyword">class</span> ForwardIterator, <span class="hljs-keyword">class</span> Compare &gt;</span><br><span class="hljs-function">ForwardIterator <span class="hljs-title">max_element</span><span class="hljs-params">( ForwardIterator first, ForwardIterator last, Compare comp )</span></span>; <br></code></pre></td></tr></table></figure><p>注意，返回值是一个<strong>指向最大元素的迭代器</strong>，在取出具体值的时候，要使用<code>*</code>取出： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">auto</span> max_it = <span class="hljs-built_in">max_element</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>());<br>cout &lt;&lt; <span class="hljs-string">&quot;最大值是：&quot;</span> &lt;&lt; *max_it &lt;&lt; endl;<br></code></pre></td></tr></table></figure></p><h3 id="about-binary-tree">About Binary Tree</h3><h4 id="中序遍历">中序遍历</h4><ol type="1"><li>递归实现 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode* root,vector&lt;<span class="hljs-type">int</span>&gt;&amp; res)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">inorder</span>(root-&gt;left);<br>    res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>    <span class="hljs-built_in">inorder</span>(root-&gt;right);<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    <span class="hljs-built_in">inorder</span>(root, res);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>迭代实现 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"> <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br> vector&lt;<span class="hljs-type">int</span>&gt; res;<br> stack&lt;TreeNode*&gt; stk;<br> <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">nullptr</span> || !stk.<span class="hljs-built_in">empty</span>()) &#123;<br>     <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">nullptr</span>) &#123;<br>     stk.<span class="hljs-built_in">push</span>(root);<br>     root = root-&gt;left;<br>    &#125;<br>     root = stk.<span class="hljs-built_in">top</span>();<br>     stk.<span class="hljs-built_in">pop</span>();<br>     res.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>     root = root-&gt;right;<br>  &#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="calculate-the-depth-of-the-binary-tree">Calculate the depth of the binary tree</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">maxDepth</span>(root-&gt;left), <span class="hljs-built_in">maxDepth</span>(root-&gt;right)) + <span class="hljs-number">1</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="about-heap">About Heap</h3><h4 id="maxheap-minheap">maxHeap &amp; minHeap</h4><p>cpp中已经实现了最大堆和最小堆，没有必要自己手动实现，包含在<code>&lt;queue&gt;</code>中。</p><ul><li>默认情况下，C++ 的 <code>priority_queue</code> 是一个 最大堆。</li><li>想要使用最小堆，需要使用 <code>priority_queue</code> 并传递 <code>std::greater</code> 比较器。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 默认最大堆</span><br>priority_queue&lt;<span class="hljs-type">int</span>&gt; maxHeap;<br><span class="hljs-comment">// 最小堆</span><br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt; minHeap;<br><span class="hljs-comment">// 基本操作：push pop top size和栈一样</span><br></code></pre></td></tr></table></figure><h4 id="custom-heap-sorting">Custom heap sorting</h4><p>举个例子： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 使用最小堆 按照频率从低到高排序 这里是一个lambda表达式</span><br><span class="hljs-comment">// 如果定义为 frequencyMap[a] &gt; frequencyMap[b]，堆会按照频率从小到大排序，变成了最小堆。</span><br><span class="hljs-comment">// 如果定义为 frequencyMap[a] &lt; frequencyMap[b]，堆会按照频率从大到小排序，保持为最大堆。</span><br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; frequencyMap;<br><span class="hljs-keyword">auto</span> cmp = [&amp;frequencyMap](<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b) &#123;<br>        <span class="hljs-keyword">return</span> frequencyMap[a] &gt; frequencyMap[b];<br>    &#125;;<br><span class="hljs-comment">// decltype(cmp)：用于指定比较器的类型，这里通过 decltype(cmp) 获取 cmp 的类型。</span><br><span class="hljs-comment">// cmp：将定义好的 lambda 表达式 cmp 作为堆的比较器传递。</span><br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,<span class="hljs-keyword">decltype</span>(cmp)&gt; <span class="hljs-built_in">minHeap</span>(cmp);<br><br></code></pre></td></tr></table></figure></p><h3 id="about-hash-table-hash-set">About Hash Table &amp; Hash Set</h3><h4 id="traverse-the-hash-table">Traverse the hash table</h4><ol type="1"><li>HashMap <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = mp.<span class="hljs-built_in">begin</span>(); it != mp.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>   it-&gt;first; <span class="hljs-comment">// key</span><br>   it-&gt;second; <span class="hljs-comment">// value</span><br>   <span class="hljs-comment">// other code</span><br>   &#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [key, value] : mp) &#123;<br>   <span class="hljs-comment">// other code</span><br>   &#125;<br></code></pre></td></tr></table></figure></li><li>HashSet <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = st.<span class="hljs-built_in">begin</span>(); it != st.<span class="hljs-built_in">end</span>(); ++it) &#123;<br>   *it; <span class="hljs-comment">// value</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; value : st) &#123;<br>   value;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="about-char">About char</h3><h4 id="isdigit">isDigit()</h4><ul><li><p>用于检查一个字符是否是数字字符（0-9）</p></li><li><p>返回值为布尔值：true 表示该字符是数字，false 表示不是数字</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">char</span> c1 = <span class="hljs-string">&#x27;5&#x27;</span>;<br><span class="hljs-type">char</span> c2 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>cout &lt;&lt; <span class="hljs-built_in">isdigit</span>(c1) &lt;&lt; endl;  <span class="hljs-comment">// 输出 1，因为 &#x27;5&#x27; 是数字</span><br>cout &lt;&lt; <span class="hljs-built_in">isdigit</span>(c2) &lt;&lt; endl;  <span class="hljs-comment">// 输出 0，因为 &#x27;a&#x27; 不是数字</span><br></code></pre></td></tr></table></figure><h3 id="about-string">About string</h3><h4 id="substring">substring</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>string sub = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">6</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 从索引6开始，长度为5的子串</span><br>sub == <span class="hljs-string">&quot;World&quot;</span>; <span class="hljs-comment">// 判断字符串是否相等</span><br></code></pre></td></tr></table></figure><h4 id="append-string">Append string</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s1 = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">int</span> num = <span class="hljs-number">3</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">append</span>(num, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">// 将字母a重复3次，并追加到s1后面</span><br></code></pre></td></tr></table></figure><h4 id="reverse-string">Reverse string</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>().s.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 反转字符串顺序</span><br></code></pre></td></tr></table></figure><h4 id="spilt-string">Spilt string</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;/home/foo/&quot;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : s) &#123;<br>   <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      <span class="hljs-comment">// some work</span><br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// some work</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="clear-string">clear string</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string s = <span class="hljs-string">&quot;122344&quot;</span>;<br>s.<span class="hljs-built_in">clear</span>(); <span class="hljs-comment">// 置空字符串</span><br></code></pre></td></tr></table></figure><h3 id="about-matrix">About matrix</h3><h4 id="matrix-transpose">Matrix transpose</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; matrix = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;&#125;;<br><span class="hljs-type">int</span> n = matrix.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n;j++) &#123;<br>      <span class="hljs-built_in">swap</span>(matrix[i][j],matrix[j][i]);<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="matrix-flipped-horizontally">matrix flipped horizontally</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>   <span class="hljs-type">int</span> n = matrix.<span class="hljs-built_in">size</span>();<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; matrix.<span class="hljs-built_in">size</span>();i++) &#123;<br>      <span class="hljs-built_in">reverse</span>(matrix[i].<span class="hljs-built_in">begin</span>(),matrix[i].<span class="hljs-built_in">end</span>());<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="dfs-template">DFS template</h3><h4 id="trees-dfs">Tree's DFS</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFSTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>   <span class="hljs-comment">// 处理当前节点</span><br>   cout &lt;&lt; root-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>   <span class="hljs-comment">// 递归遍历左子树</span><br>   <span class="hljs-built_in">DFSTree</span>(root-&gt;left);<br>   <span class="hljs-comment">// 递归遍历右子树</span><br>   <span class="hljs-built_in">DFSTree</span>(root-&gt;right);<br>   <br>   <span class="hljs-comment">// 回溯</span><br>   <span class="hljs-comment">// pop_back();</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sort-methods">Sort Methods</h3><h4 id="custom-sorting">Custom Sorting</h4><p>来源于<a href="https://leetcode.cn/problems/largest-number/?envType=problem-list-v2&amp;envId=greedy">Leetcode 179.largestNumber</a>，这个题目中只要自定义排序几行代码就完事！ <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),[](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-built_in">to_string</span>(x) + <span class="hljs-built_in">to_string</span>(y) &gt; <span class="hljs-built_in">to_string</span>(y) + <span class="hljs-built_in">to_string</span>(x);<br>     &#125;);<br></code></pre></td></tr></table></figure></p><ul><li>第三个参数是自定义的比较函数，用于定义排序的规则</li><li>这里使用匿名lambda表达式</li></ul><h4 id="mergesort">MergeSort</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 这一步是两个升序数组的合并</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1,vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;result;<br>    <span class="hljs-type">int</span> point1 = <span class="hljs-number">0</span>,point2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (point1 &lt; nums<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() &amp;&amp; point2 &lt; nums<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (nums1[point1] &lt; nums2[point2]) &#123;<br>            result.<span class="hljs-built_in">push_back</span>(nums1[point1]);<br>            point1++;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            result.<span class="hljs-built_in">push_back</span>(nums2[point2]);<br>            point2++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = point1; i &lt; nums<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>();i++) &#123;<br>        result.<span class="hljs-built_in">push_back</span>(nums1[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = point2; i &lt; nums<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>();i++) &#123;<br>        result.<span class="hljs-built_in">push_back</span>(nums2[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">// 这是归并排序主代码</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (nums.<span class="hljs-built_in">empty</span>() || nums.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums;<br><br>    <span class="hljs-type">int</span> mid = nums.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left</span><span class="hljs-params">(nums.begin(),nums.begin() + mid)</span></span>;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">right</span><span class="hljs-params">(nums.begin()+mid,nums.end())</span></span>;<br>    left = <span class="hljs-built_in">sortArray</span>(left);<br>    right = <span class="hljs-built_in">sortArray</span>(right);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sortArray</span>(left,right);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="quicksort">QuickSort</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span> </span>&#123;<br>   <span class="hljs-type">int</span> i = left;<br>   <span class="hljs-type">int</span> pivot = nums[right];<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = left; j &lt; right; j++) &#123;<br>      <span class="hljs-keyword">if</span>(nums[j] &lt; pivot) &#123;<br>        <span class="hljs-built_in">swap</span>(nums[i],nums[j]);<br>        i++;<br>      &#125;<br>   &#125;<br>   <span class="hljs-built_in">swap</span>(nums[i],nums[right]);<br>   <span class="hljs-keyword">return</span> i;<br>&#125;<br> <span class="hljs-comment">// 排序从left到right的部分</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (left &lt; right) &#123; <span class="hljs-comment">// 递归调用 两者相等的时候停止排序</span><br>      <span class="hljs-type">int</span> pivotIndex = <span class="hljs-built_in">partition</span>(nums,left,right);<br>      <span class="hljs-built_in">quickSort</span>(nums,left,pivotIndex - <span class="hljs-number">1</span>); <span class="hljs-comment">// 左侧数组排序</span><br>      <span class="hljs-built_in">quickSort</span>(nums,pivotIndex + <span class="hljs-number">1</span>,right); <span class="hljs-comment">// 右侧数组排序</span><br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地主机连接远程服务器的几种方式</title>
    <link href="/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/08/13/%E6%9C%AC%E5%9C%B0%E4%B8%BB%E6%9C%BA%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>从大二开始，我接触到远程服务器，在这里总结一下本地主机连接远程服务器的几种方式😎 1. <strong>使用密码和VPN（可选）连接</strong>：这是我接触最多的连接方式，但是这样连接有缺点：安全性差。 这种方式有时需要使用VPN才能连接，因为VPN可以屏蔽一些网络设备，比如防火墙，所以可以避免一些安全风险。 首先通过VPN连接到远程服务器所在的网络。VPN（虚拟专用网络）将本地网络流量加密，并通过远程服务器所在的网络进行路由，使我们能够像在同一局域网内一样访问服务器。 2. <strong>使用公钥和私钥连接</strong>：有过一次使用公私钥连接的经历。这种方式可以避免密码的传输，安全性更高。连接流程如下： 1. 生成密钥对: 使用SSH工具（如ssh-keygen）在本地生成一对公钥和私钥。 2. 配置公钥: 将生成的公钥 (~/.ssh/id_rsa.pub) 添加到远程服务器上的 ~/.ssh/authorized_keys 文件中。 3. SSH连接: 使用SSH客户端，通过私钥文件（~/.ssh/id_rsa）连接到远程服务器。SSH会自动使用私钥进行身份验证。 这样连接以后，无需输入密码即可快速登录服务器，提升了工作效率，而且具有较高的安全性。🙆🏻如下图所示，是使用MobaXterm进行连接的界面： <img src="../img/Moba_ssh.png" alt="使用MobaXterm进行公私钥的SSH连接" /></p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>August💘个人随想</title>
    <link href="/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/"/>
    <url>/2024/08/09/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="850817311927f33603147bb439366d465bd01bc2510177fde695b7886e2ba289"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">需要密码才可以看哦！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Random Thoughts</category>
      
    </categories>
    
    
    <tags>
      
      <tag>myself</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pycharm如何连接远程服务器</title>
    <link href="/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2024/08/02/Pycharm%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在实习，旁边的小伙伴全都劝我用vscode，说连接简单不费力，我这样一个忠诚的pycharm用户，JetBrains全家桶爱好者，怎么能受得了这样的虎狼之词！😡😡 于是，写下一篇博文，记录一下如何使用pycharm连接远程服务器。 <div class="note note-warning">            <p>该远程连接步骤没有参考任何网上教程；pycharm版本：PyCharm 2023.2.2 pycharm连接远程服务器有很多种方法，或者某一步骤错误了其实有很多补救措施，可以自行探索！☺️</p>          </div> ### Step1：新建一个项目 新建一个项目，选择Python解释器，选择<code>Previously configured interpreter</code>，然后点击<code>Add Interpreter</code>，选择<code>On SSh</code>，如下图所示： <img src="../img/img_img1.png" alt="img.png" /> 在这儿，填写服务器的ip地址（Host），端口号（往往默认），用户名，如下图所示： <img src="../img/img_1.png" alt="img_1.png" /> 之后能点击next的，一路点击next，直到下图，输入密码（这里我使用的是密码连接），之后还是点击next，如下图： <img src="../img/img_2.png" alt="img_2.png" /> 还是next： <img src="../img/img_3.png" alt="img_3.png" /> ok，现在来到第四步： <img src="../img/img_4.png" alt="img_4.png" /> 在这里，我想要使用服务器中已经存在的环境，于是我选择<code>existing</code>,选择虚拟环境中对应的<code>python.exe</code>,往往在<code>Anaconda3</code>中的<code>envs</code>的虚拟环境名字下的<code>bin</code>中，选好了点击ok，然后点击create，如下图： <img src="../img/img_5.png" alt="img_5.png" /> 之后注意选一下相匹配的文件夹，也就是你的这个项目中的文件，应该上传到服务器中的文件夹中的什么位置： <img src="../img/img_10.png" alt="img_10.png" /> 这样就创建项目成功啦！</p><h3 id="step2浏览服务器上的文件夹">Step2：浏览服务器上的文件夹</h3><p>在项目创建成功后，点击<code>Main Menu</code>（就是左上角三条线的图标），之后点击同行的<code>tools</code>-&gt;<code>deployment</code>-&gt;<code>Browse Remote Host</code>，如下图： <img src="../img/img_6.png" alt="img_6.png" /> 之后在pycharm最左侧就会出代表现服务器上的文件夹的标志，选择对应的远程主机，就可以看到展开的文件夹啦： <img src="../img/img_8.png" alt="img_8.png" /></p><h3 id="step3终端修改">Step3：终端修改</h3><p>注意在使用远程服务器的时候，我们往往是在终端操作，点击终端，注意<code>+</code>号旁边的小箭头，点击这个小箭头，选择对应的虚拟环境即可，如下图： <img src="../img/img_9.png" alt="img_9.png" /> 这样，终端也切换到远程服务器的虚拟环境啦！It's done!</p>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Useful instructions in Linux</title>
    <link href="/2024/08/01/Useful-instructions-in-Linux/"/>
    <url>/2024/08/01/Useful-instructions-in-Linux/</url>
    
    <content type="html"><![CDATA[<p>这是第一次正经使用远程服务器跑数据，遂记录一下常用的命令，希望以后会越来越熟练！🤗 - 查看显卡情况 - 1️⃣ 简易版 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nvidia-smi<br></code></pre></td></tr></table></figure> - 2️⃣ 更详细更美观🤩 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install nvitop<br>nvitop<br></code></pre></td></tr></table></figure> nvitop的效果确实更美观，包括进程也展示的更加清楚： <img src="../img/nvitop.jpg" alt="nvitop效果图" /></p><ul><li><p>查看虚拟环境列表 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env list<br></code></pre></td></tr></table></figure></p></li><li><p>多人共享一个服务器，GPU资源稀缺的时候，需要进行<strong>占卡</strong>操作，确保一个人在使用 GPU 时，其他人不会干扰或抢占该资源 如何实现占卡？编写一个脚本，在脚本中执行一个死循环，这样就可以占用 GPU 资源了。例如： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvidia-smi<br><span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0  <span class="hljs-comment"># 选择 GPU 0</span><br>python your_script.py<br></code></pre></td></tr></table></figure></p></li><li><p>脱离自己的终端，继续运行脚本，我常常使用的指令是<code>nohup</code>，例如： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> python your_script.py &gt; stdout.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure> 这个指令用于在后台运行一个Python脚本，同时将输出重定向到日志文件中。具体来说：</p><ul><li><code>nohup</code>：表示“no hang up”，用于在你关闭终端后继续运行该命令。通常，如果没有使用<code>nohup</code>，关闭终端后，正在运行的进程也会被终止。使用nohup可以确保即使关闭了终端，脚本仍然会继续运行。</li><li><code>python your_script.py</code>：这是你要运行的Python脚本的命令。</li><li><code>&gt;</code>：重定向符号，表示将输出重定向到指定的文件。</li><li><code>stdout.log</code>：用于存储脚本的标准输出（即通常在终端显示的输出信息）。所有标准输出会被写入这个文件中。</li><li><code>2&gt;&amp;1</code>：这是将标准错误输出（即错误信息）重定向到标准输出中，因此所有的错误信息也会被写入stdout.log中。这其中，2表示标准错误，1表示标准输出，&amp;表示引用相同的文件描述符。</li><li><code>&amp;</code>：将该命令放到后台运行，即使你关闭当前的终端会话，脚本仍然会继续运行。</li></ul></li><li><p>赋予自己的脚本权限，例如： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x your_script.py<br></code></pre></td></tr></table></figure> 使用<code>chmod</code>命令，你可以给文件赋予权限。<code>+x</code>表示增加执行权限，这样你就可以运行这个脚本了。同理，<code>-x</code>表示移除执行权限，移除之后，你无法运行这个脚本。</p></li><li><p>杀死进程 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -9 pid # pid是进程的ID, kill -9 强制终止进程<br>kill pid<br></code></pre></td></tr></table></figure></p></li><li><p>退出状态码</p><ul><li><strong>Exit 1</strong> 通常是脚本内的问题，需要检查日志。 本小菜在分批次使用nohup执行脚本时，发现脚本总是自动退出，退出状态码为1。后来寻找发现是自己的bash文件多了一行空行，实际上是多了换行符，导致脚本无法执行🥲🥲。</li><li><strong>Exit 126</strong> 通常是权限或路径问题，需要检查脚本路径和权限。</li></ul></li><li><p>查看文件夹下有多少文件 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -1 /path/to/directory | wc -l<br></code></pre></td></tr></table></figure></p><ul><li><code>ls -1</code> 列出目录中的每个文件和文件夹，每行显示一个名称。</li><li><code>wc -l</code> 统计行数，即文件和文件夹的数量。</li></ul></li><li><p>从huggingface的镜像上下载文件到服务器，步骤如下图所示： <img src="https://krseoul.imgtbl.com/i/2024/08/22/66c6b5110cb2b.png" alt="huggingface-cli.png" /> <div class="note note-warning">            <p>注意，在每次执行下载命令的时候都要<code>export HF ENDPOINT=https://hf-mirror.com</code>，要不然下载速度会巨慢无比😑</p>          </div></p></li><li><p>查看当前的python进程 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep python <br>ps -aux | grep python<br></code></pre></td></tr></table></figure></p><ul><li><code>ps -ef</code> 显示的是更传统的 Unix 风格的输出，注重进程间的关系（如父子进程关系）以及命令的详细信息。例子如下所示： <img src="../img/ef.png" alt="ef.png" /></li><li><code>ps -aux</code> 提供了关于资源使用情况的更多信息，如 CPU 和内存占用率，且格式与 <code>ps -ef</code> 不同。 例子如下所示： <img src="../img/aux_1.png" alt="aux.png" /> 其中，<code>STAT</code> 列显示了每个进程的状态，其中字母组合（如 Ssl、Sl、Rl 等）表示进程的状态和属性。以下是这些标记的含义：<ol type="1"><li>S: Interruptible Sleep (可中断的睡眠状态)</li><li>R: Running (运行中)</li><li>l: Multi-threaded (多线程)</li><li>s: Session Leader (会话领导)</li><li>S: Low-priority (低优先级)</li></ol>这些字母组合起来，就表示了进程的状态和属性。例如，<code>Ssl</code> 表示进程正在睡眠中，并且是低优先级的···</li></ul></li><li><p>查看当前机器的内存空间 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">free -h<br></code></pre></td></tr></table></figure> 效果如下图所示： <a href="https://ice.frostsky.com/2024/10/08/282d1ad2026ea2c7daa86061b1ed73d9.png"><img src="https://ice.frostsky.com/2024/10/08/282d1ad2026ea2c7daa86061b1ed73d9.png" alt="free.png" /></a></p></li><li><p>解压zip文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip filename.zip -d /path/to/destination<br></code></pre></td></tr></table></figure> 这将文件解压到<code>/path/to/destination</code>目录</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Research Basic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
